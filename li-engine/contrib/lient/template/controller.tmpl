{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{ define "model/additional/lient-controller" }}
type (
	I{{ $.Name }} struct {
		ID {{ $.ID.Type }} {{ with $.Annotations.Fields.StructTag.id }}`{{ . }}`{{ else }}`{{ $.ID.StructTag }}`{{ end }}
		{{- range $f := $.Fields }}
			{{- $tag := $f.StructTag }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
			{{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }} {{ if not $f.Sensitive }}`{{ $tag }}`{{ else }}`json:"-"`{{ end }}
		{{- end }}
		{{- range $e := $.Edges }}
			{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}*I{{ $e.Type.Name }} {{ with $e.StructTag }}`{{ . }}`{{ end }}
		{{- end }}
	}
	List{{ $.Name }}Req struct {
		Page int `json:"page" d:"1" v:"min:1"`
		Limit int `json:"limit" d:"20" v:"min:1|max:500"`
		Filter *List{{ $.Name }}Filter `json:"filter"`
		Sorter *List{{ $.Name }}Sorter `json:"sorter"`
	}
	List{{ $.Name }}Filter struct {
		{{- range $f := $.Fields }}
        {{- if not $f.Sensitive }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Filterable }}
			{{- $component := index $annotation.ViewSchema "x-component"  }}
			{{- if or (eq $component "DatePicker") (eq $component "TimePicker") (eq $component "Checkbox.Group") }}
				{{ $f.StructField }} []{{ $f.Type }} `json:"{{ $f.Name }}"`
			{{- else if eq $component "Select" }}
				{{- if $f.Type.Nillable }}
					{{ $f.StructField }} {{ $f.Type }} `json:"{{ $f.Name }}"`
				{{- else }}
					{{ $f.StructField }} []{{ $f.Type }} `json:"{{ $f.Name }}"`
				{{- end }}
			{{- else }}
				{{ $f.StructField }} *{{ $f.Type }} `json:"{{ $f.Name }}"`
			{{- end }}
		{{- end }}
        {{- end }}
        {{- end }}
		{{- range $e := $.Edges }}
		{{- $annotation := $e.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Filterable }}
			{{ $e.StructField }} []*struct { ID {{ $e.Type.ID.Type }} `json:"id" v:"required"` } {{ with $e.StructTag }}`{{ . }}`{{ end }}
		{{- end }}
		{{- end }}
	}
	List{{ $.Name }}Sorter struct {
		{{- range $f := $.Fields }}
        {{- if not $f.Sensitive }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Sortable }}
			{{ $f.StructField }} int `json:"{{ $f.Name }}"`
		{{- end }}
        {{- end }}
        {{- end }}
	}
	List{{ $.Name }}Res struct {
		List []*I{{ $.Name }} `json:"list"`
		Total int `json:"total"`
	}
	Create{{ $.Name }}Req struct {
		{{- range $f := $.Fields }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableCreate) }}
			{{- $tag := printf `json:"%s"` $f.Name }}{{ with $tags := $.Annotations.Fields.StructTag }}{{ with index $tags $f.Name }}{{ $tag = . }}{{ end }}{{ end }}
            {{- if and $annotation $annotation.ValidateRule }}
				{{- $tag = printf `%s v:"%s"` $tag $annotation.ValidateRule }}
			{{- else if not $f.Optional }}
				{{- $tag = printf `%s v:"required"` $tag }}
			{{- end }}
			{{- if $f.Optional }}
				{{- if $f.Type.Nillable }}
					{{ $f.StructField }} {{ $f.Type }} `{{ $tag }}`
				{{- else }}
					{{ $f.StructField }} *{{ $f.Type }} `{{ $tag }}`
				{{- end }}
			{{- else }}
				{{ $f.StructField }} {{ $f.Type }} `{{ $tag }}`
			{{- end }}
		{{- end }}
        {{- end }}
		{{- range $e := $.Edges }}
		{{- $annotation := $e.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableCreate) }}
			{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}*struct { ID {{ $e.Type.ID.Type }} `json:"id" v:"required"` } `json:"{{ $e.Name }}"{{if not $e.Optional }} v:"required"{{ end }}`
		{{- end }}
		{{- end }}
	}
	Get{{ $.Name }}Req struct {
		ID {{ $.ID.Type }} `json:"id" v:"required"`
	}
	Update{{ $.Name }}Req struct {
        ID {{ $.ID.Type }} `json:"id" v:"required"`
		{{- range $f := $.Fields }}
		{{- if not $f.Sensitive }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableUpdate) }}
			{{- $tag := printf `json:"%s"` $f.Name }}
            {{- if and $annotation $annotation.ValidateRule }}
				{{- $tag = printf `%s v:"%s"` $tag $annotation.ValidateRule }}
			{{- else if not $f.Optional }}
				{{- $tag = printf `%s v:"required"` $tag }}
			{{- end }}
			{{- if $f.Optional }}
				{{- if $f.Type.Nillable }}
					{{ $f.StructField }} {{ $f.Type }} `{{ $tag }}`
				{{- else }}
					{{ $f.StructField }} *{{ $f.Type }} `{{ $tag }}`
				{{- end }}
			{{- else }}
				{{ $f.StructField }} {{ $f.Type }} `{{ $tag }}`
			{{- end }}
		{{- end }}
        {{- end }}
		{{- end }}
		{{- range $e := $.Edges }}
		{{- $annotation := $e.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableUpdate) }}
			{{ $e.StructField }} {{ if not $e.Unique }}[]{{ end }}*struct { ID {{ $e.Type.ID.Type }} `json:"id" v:"required"` } `json:"{{ $e.Name }}"{{if not $e.Optional }} v:"required"{{ end }}`
		{{- end }}
		{{- end }}
	}
	Delete{{ $.Name }}Req struct {
		ID {{ $.ID.Type }} `json:"id" v:"required"`
	}
	DeleteMany{{ $.Name }}Req struct {
		IDs []{{ $.ID.Type }} `json:"ids" v:"required"`
	}
)

func NewI{{ $.Name }}(e *{{ $.Name }}) *I{{ $.Name }} {
	if e == nil {
		return nil
	}
	return &I{{ $.Name }}{
		ID: e.ID,
		{{- range $f := $.Fields }}
			{{ $f.StructField }}: e.{{ $f.StructField }},
		{{- end }}
		{{- range $e := $.Edges }}
			{{ $e.StructField }}: NewI{{ $e.Type.Name }}{{ if not $e.Unique }}Array{{ end }}(e.Edges.{{ $e.StructField }}),
		{{- end }}
	}
}

func NewI{{ $.Name }}Array(es []*{{ $.Name }}) []*I{{ $.Name }} {
	if len(es) == 0 {
		return nil
	}
	r := make([]*I{{ $.Name }}, len(es))
	for i, e := range es {
		r[i] = NewI{{ $.Name }}(e)
	}
	return r
}

func List{{ $.Name }}Controller(ctx context.Context, req *List{{ $.Name }}Req) (res *List{{ $.Name }}Res, err error) {
	q := LiClient().{{ $.Name }}.Query()
	if req.Filter != nil {
		{{- range $f := $.Fields }}
        {{- if not $f.Sensitive }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Filterable }}
			{{- $component := index $annotation.ViewSchema "x-component"  }}
			{{- if or (eq $component "DatePicker") (eq $component "TimePicker") }}
				if len(req.Filter.{{ $f.StructField }}) == 2 {
					q.Where({{ $.Package }}.{{ $f.StructField }}GTE(req.Filter.{{ $f.StructField }}[0]), {{ $.Package }}.{{ $f.StructField }}LTE(req.Filter.{{ $f.StructField }}[1]))
				}
			{{- else if eq $component "Checkbox.Group" }}
				if len(req.Filter.{{ $f.StructField }}) > 0 {
					q.Where({{ $.Package }}.{{ $f.StructField }}In(req.Filter.{{ $f.StructField }}...))
				}
			{{- else if eq $component "Select" }}
				{{- if $f.Type.Nillable }}
					if len(req.Filter.{{ $f.StructField }}) > 0 {
						q.Where(func(s *sql.Selector) {
							s.Where(sqljson.ValueContains(user.Field{{ $f.StructField }}, req.Filter.{{ $f.StructField }}))
						})
					}
				{{- else }}
					if len(req.Filter.{{ $f.StructField }}) > 0 {
						q.Where({{ $.Package }}.{{ $f.StructField }}In(req.Filter.{{ $f.StructField }}...))
					}
				{{- end }}
			{{- else if eq $f.Type.String "string" }}
				if req.Filter.{{ $f.StructField }} != nil {
					q.Where({{ $.Package }}.{{ $f.StructField }}ContainsFold(*req.Filter.{{ $f.StructField }}))
				}
			{{- else }}
				if req.Filter.{{ $f.StructField }} != nil {
					q.Where({{ $.Package }}.{{ $f.StructField }}EQ(*req.Filter.{{ $f.StructField }}))
				}
			{{- end }}
		{{- end }}
        {{- end }}
        {{- end }}
		{{- range $e := $.Edges }}
		{{- $annotation := $e.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Filterable }}
			if len(req.Filter.{{ $e.StructField }}) > 0 {
			{{- if $e.Field }}
				q.Where({{ $.Package }}.{{ pascal $e.Field.Name }}In(func() []{{ $e.Field.Type }} {
					ids := make([]{{ $e.Field.Type }}, len(req.Filter.{{ $e.StructField }}))
					for i, v := range req.Filter.{{ $e.StructField }} {
						ids[i] = v.ID
					}
					return ids
				}()...))
			{{- else }}
				q.Where({{ $.Package }}.Has{{ $e.StructField }}With({{ $e.Type.Package }}.IDIn(func() []{{ $e.Type.ID.Type }} {
					ids := make([]{{ $e.Type.ID.Type }}, len(req.Filter.{{ $e.StructField }}))
					for i, v := range req.Filter.{{ $e.StructField }} {
						ids[i] = v.ID
					}
					return ids
				}()...)))
			{{- end }}
			}
		{{- end }}
		{{- end }}
	}
	if req.Sorter != nil {
		{{- range $f := $.Fields }}
        {{- if not $f.Sensitive }}
		{{- $annotation := $f.Annotations.LiEnt }}
		{{- if and $annotation $annotation.ViewSchema $annotation.ColumnProps $annotation.ColumnProps.Sortable }}
			{{ $f.StructField }} int `json:"{{ $f.Name }}"`
			if req.Sorter.{{ $f.StructField }} > 0 {
				q.Order(Asc({{ $.Package }}.{{ $f.StructField }}))
			} else if req.Sorter.{{ $f.StructField }} < 0 {
				q.Order(Desc({{ $.Package }}.{{ $f.StructField }}))
			}
		{{- end }}
        {{- end }}
        {{- end }}
	}
	res = &List{{ $.Name }}Res{}
	res.Total, err = q.Count(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	ret, err := q.{{ range $e := $.Edges }}{{ $annotation := $e.Annotations.LiEnt }}{{ if and $annotation $annotation.ViewSchema $annotation.ColumnProps }}With{{ $e.StructField }}().{{ end }}{{ end }}Limit(req.Limit).Offset((req.Page - 1) * req.Limit).All(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	res.List = NewI{{ $.Name }}Array(ret)
	return res, nil
}

func Create{{ $.Name }}Controller(ctx context.Context, req *Create{{ $.Name }}Req) (res *I{{ $.Name }}, err error) {
	b := LiClient().{{ $.Name }}.Create()
	{{- range $f := $.Fields }}
	{{- $annotation := $f.Annotations.LiEnt }}
	{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableCreate) }}
		{{- if $f.Optional }}
			if req.{{ $f.StructField }} != nil {
				{{- if $f.Type.Nillable }}
					b.Set{{ $f.StructField }}(req.{{ $f.StructField }})
				{{- else }}
					b.Set{{ $f.StructField }}(*req.{{ $f.StructField }})
				{{- end }}
            }
		{{- else }}
			b.Set{{ $f.StructField }}(req.{{ $f.StructField }})
		{{- end }}
	{{- end }}
	{{- end }}
	{{- range $e := $.Edges }}
	{{- $annotation := $e.Annotations.LiEnt }}
	{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableCreate) }}
		{{- if $e.Unique }}
			if req.{{ $e.StructField }} != nil {
			{{- if $e.Field }}
				b.Set{{ pascal $e.Field.Name }}(req.{{ $e.StructField }}.ID)
			{{- end }}
			}
		{{- else if not $e.Field }}
			if len(req.{{ $e.StructField }}) > 0 {
				b.Add{{ $e.Type.Name }}IDs(func() []{{ $e.Type.ID.Type }} {
					ids := make([]{{ $e.Type.ID.Type }}, len(req.{{ $e.StructField }}))
					for i, v := range req.{{ $e.StructField }} {
						ids[i] = v.ID
					}
					return ids
				}()...)
			}
		{{- end }}
	{{- end }}
	{{- end }}
	ret, err := b.Save(ctx)
	if err != nil {
		if IsConstraintError(err) {
			return nil, gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewI{{ $.Name }}(ret), nil
}

func Get{{ $.Name }}Controller(ctx context.Context, req *Get{{ $.Name }}Req) (res *I{{ $.Name }}, err error) {
	ret, err := LiClient().{{ $.Name }}.
		Query().
		{{- range $e := $.Edges }}
			{{- $annotation := $e.Annotations.LiEnt }}
			{{- if and $annotation $annotation.ViewSchema }}
				With{{ $e.StructField }}().
			{{- end }}
		{{- end }}
		Where({{ $.Package }}.IDEQ(req.ID)).
		Only(ctx)
	if err != nil {
		if IsNotFound(err) {
			return nil, gerror.WrapCode(gcode.CodeNotFound, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewI{{ $.Name }}(ret), nil
}

func Update{{ $.Name }}Controller(ctx context.Context, req *Update{{ $.Name }}Req) (res *I{{ $.Name }}, err error) {
	b := LiClient().{{ $.Name }}.UpdateOneID(req.ID)
	{{- range $f := $.Fields }}
	{{- if not $f.Sensitive }}
	{{- $annotation := $f.Annotations.LiEnt }}
	{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableUpdate) }}
		{{- if $f.Optional }}
			if req.{{ $f.StructField }} != nil {
				{{- if $f.Type.Nillable }}
					b.Set{{ $f.StructField }}(req.{{ $f.StructField }})
				{{- else }}
					b.Set{{ $f.StructField }}(*req.{{ $f.StructField }})
				{{- end }}
            }
		{{- else }}
			b.Set{{ $f.StructField }}(req.{{ $f.StructField }})
		{{- end }}
	{{- end }}
	{{- end }}
	{{- end }}
	{{- range $e := $.Edges }}
	{{- $annotation := $e.Annotations.LiEnt }}
	{{- if and $annotation $annotation.ViewSchema (not $annotation.DisableUpdate) }}
		{{- if $e.Unique }}
			if req.{{ $e.StructField }} != nil {
			{{- if $e.Field }}
				b.Set{{ pascal $e.Field.Name }}(req.{{ $e.StructField }}.ID)
			{{- end }}
			}
		{{- else if not $e.Field }}
			if req.{{ $e.StructField }} != nil {
				b.Clear{{ $e.StructField }}().Add{{ $e.Type.Name }}IDs(func() []{{ $e.Type.ID.Type }} {
					ids := make([]{{ $e.Type.ID.Type }}, len(req.{{ $e.StructField }}))
					for i, v := range req.{{ $e.StructField }} {
						ids[i] = v.ID
					}
					return ids
				}()...)
			}
		{{- end }}
	{{- end }}
	{{- end }}
	ret, err := b.Save(ctx)
	if err != nil {
		if IsNotFound(err) {
			return nil, gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return nil, gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewI{{ $.Name }}(ret), nil
}

func Delete{{ $.Name }}Controller(ctx context.Context, req *Delete{{ $.Name }}Req) (err error) {
	err = LiClient().{{ $.Name }}.DeleteOneID(req.ID).Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteMany{{ $.Name }}Controller(ctx context.Context, req *DeleteMany{{ $.Name }}Req) (err error) {
	_, err = LiClient().{{ $.Name }}.Delete().Where({{ $.Package }}.IDIn(req.IDs...)).Exec(ctx)
	if err != nil {
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}
{{ end }}