{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{ define "model/additional/lient-view" }}
func List{{ $.Name }}View() view.Node {
	return node.List("{{ $.Package }}List").
		AC({{ $.Package }}ViewACL["@list{{ $.Name }}"]).
		ForInit("@list{{ $.Name }}", List{{ $.Name }}Controller).
		DecoratorCard().
		Children(
			node.ListTable("{{ $.Package }}ListTable").
				EnableFilter().
				RowSelectionType("checkbox").
				ActionBar(
					node.ListAction("{{ $.Package }}ListActions").Children(
						node.ListActionRecordEditDrawer("add{{ $.Name }}").
							Title("新建").
							AC({{ $.Package }}ViewACL["@add{{ $.Name }}"]).
							ButtonType("primary").
							ButtonIcon("IconPlus").
							ButtonPosition("left").
							Body(
								node.FormGrid("grid").MaxColumns(2).Children(
									{{- range $f := $.Fields }}
										{{- if $annotation := $f.Annotations.LiEnt }}
											{{- if and $annotation.ViewSchema (not $annotation.DisableCreate) }}
												{{ $.Package }}.Node{{ $f.StructField }}().SetAC({{ $.Package }}ViewACL["{{ $f.Name }}"]){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
											{{- end }}
										{{- end }}
									{{- end }}
								),
							).
							Footer(
								node.ActionFormDrawerCancel("cancel"),
								node.ActionFormDrawerSubmit("submit").ForSubmit("@add{{ $.Name }}", Create{{ $.Name }}Controller),
							),
						node.ListActionRowSelection("deleteMany{{ $.Name }}").
							Title("删除").
							AC({{ $.Package }}ViewACL["@deleteMany{{ $.Name }}"]).
							ForSubmit("@deleteMany{{ $.Name }}", DeleteMany{{ $.Name }}Controller).
							AfterReload().
							ConfirmTitle("确认删除").
							ButtonStatus("danger").
							ButtonIcon("IconDelete").
							ButtonPosition("left"),
					),
				).
				Columns(
                    {{- range $i, $f := $.Fields }}
						{{- if not $f.Sensitive }}
                        {{- if $annotation := $f.Annotations.LiEnt }}
                            {{- if and $annotation.ViewSchema (not $annotation.DisableRead) (not (isNil $annotation.ColumnProps)) }}
								node.ListTableColumn("column{{ $i }}").
									AC({{ $.Package }}ViewACL["{{ $f.Name }}"]).
									Title({{ $.Package }}.Node{{ $f.StructField }}Title).
									DataIndex("{{ $f.Name }}").
									{{- if $annotation.ColumnProps.Align }}Align("{{ $annotation.ColumnProps.Align }}").{{- end }}
									{{- if $annotation.ColumnProps.Ellipsis }}Ellipsis().{{- end }}
									{{- if $annotation.ColumnProps.Width }}Width({{ $annotation.ColumnProps.Width }}){{- end }}
									{{- if $annotation.ColumnProps.Filterable }}Filterable().{{- end }}
									{{- if $annotation.ColumnProps.Sortable }}Sortable().{{- end }}
									Render({{ $.Package }}.Node{{ $f.StructField }}()),
                            {{- end }}
                        {{- end }}
						{{- end }}
                    {{- end }}
					node.ListTableColumn("column{{ len $.Fields }}").
						Title("操作").
						DataIndex("__action").
						Width(150).
						Render(
							node.Space("actions").Children(
								node.ListActionRecordEditDrawer("view").
									Title("查看").
									ForInit("@get{{ $.Name }}", Get{{ $.Name }}Controller).
									Body(
										node.FormGrid("grid").MaxColumns(2).Children(
											{{- range $f := $.Fields }}
												{{- if $annotation := $f.Annotations.LiEnt }}
													{{- if and $annotation.ViewSchema (not $annotation.DisableUpdate) }}
														{{ $.Package }}.Node{{ $f.StructField }}(){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
													{{- end }}
												{{- end }}
											{{- end }}
										),
									).
									Footer(
										node.ActionFormDrawerCancel("cancel"),
										node.ActionFormDrawerSubmit("submit").
											AC({{ $.Package }}ViewACL["@update{{ $.Name }}"]).
											ForSubmit("@update{{ $.Name }}", Update{{ $.Name }}Controller),
									),
								node.ListActionRecordDelete("delete").
									Title("删除").
									AC({{ $.Package }}ViewACL["@delete{{ $.Name }}"]).
									ForSubmit("@delete{{ $.Name }}", Delete{{ $.Name }}Controller),
							),
						),
				),
		)
}

var {{ $.Package }}ViewACL = map[string]ac.AC{}

func init() {
	rf := reflect.ValueOf(schema.{{ $.Name }}{}).MethodByName("ACL")
	if rf.IsValid() {
		{{ $.Package }}ViewACL, _ = rf.Call([]reflect.Value{})[0].Interface().(map[string]ac.AC)
	}
}
{{ end }}