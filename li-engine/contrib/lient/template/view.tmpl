{{/* gotype: entgo.io/ent/entc/gen.Type */}}

{{ define "model/additional/lient-view" }}
{{- $searchable := false }}
func Create{{ $.Name }}FormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children(
		{{- range $f := $.Fields }}
			{{- if $annotation := $f.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableCreate) }}
					{{- if $annotation.Edge }}
					{{ $.Package }}.Node{{ $annotation.Edge.StructField }}().SetAC({{ $.Package }}ACL["create:{{ $annotation.Edge.Name }}"]){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
					{{- else }}
					{{ $.Package }}.Node{{ $f.StructField }}().SetAC({{ $.Package }}ACL["create:{{ $f.Name }}"]){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
					{{- end }}
				{{- end }}
				{{- if and (not $searchable) $annotation $annotation.Queryable }}
					{{- $searchable = true }}
				{{- end }}
			{{- end }}
		{{- end }}
		{{- range $e := $.Edges }}
			{{- if $annotation := $e.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableCreate) }}
					{{ $.Package }}.Node{{ $e.StructField }}().SetAC({{ $.Package }}ACL["create:{{ $e.Name }}"]){{ if not $e.Optional }}.SetRequired(true){{ end }},
				{{- end }}
			{{- end }}
		{{- end }}
	)
}

func Read{{ $.Name }}FormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children(
		{{- range $f := $.Fields }}
			{{- if $annotation := $f.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableRead) }}
					{{- if $annotation.Edge }}
					{{ $.Package }}.Node{{ $annotation.Edge.StructField }}().SetAC({{ $.Package }}ACL["read:{{ $annotation.Edge.Name }}"]),
					{{- else }}
					{{ $.Package }}.Node{{ $f.StructField }}().SetAC({{ $.Package }}ACL["read:{{ $f.Name }}"]),
					{{- end }}
				{{- end }}
			{{- end }}
		{{- end }}
		{{- range $e := $.Edges }}
			{{- if $annotation := $e.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableRead) }}
					{{ $.Package }}.Node{{ $e.StructField }}().SetAC({{ $.Package }}ACL["read:{{ $e.Name }}"]),
				{{- end }}
			{{- end }}
		{{- end }}
	)
}

func Update{{ $.Name }}FormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children(
		{{- range $f := $.Fields }}
			{{- if $annotation := $f.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableUpdate) }}
					{{- if $annotation.Edge }}
					{{ $.Package }}.Node{{ $annotation.Edge.StructField }}().SetAC({{ $.Package }}ACL["update:{{ $annotation.Edge.Name }}"]){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
					{{- else }}
					{{ $.Package }}.Node{{ $f.StructField }}().SetAC({{ $.Package }}ACL["update:{{ $f.Name }}"]){{- if contains $annotation.ValidateRule "required" }}.SetRequired(true){{- end }},
					{{- end }}
				{{- end }}
			{{- end }}
		{{- end }}
		{{- range $e := $.Edges }}
			{{- if $annotation := $e.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableUpdate) }}
					{{ $.Package }}.Node{{ $e.StructField }}().SetAC({{ $.Package }}ACL["update:{{ $e.Name }}"]){{ if not $e.Optional }}.SetRequired(true){{ end }},
				{{- end }}
			{{- end }}
		{{- end }}
	)
}

func List{{ $.Name }}TableColumns() []view.Node {
	return []view.Node{
		{{- range $i, $f := $.Fields }}
			{{- if not $f.Sensitive }}
			{{- if $annotation := $f.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableRead) (not (isNil $annotation.ColumnProps)) }}
					{{- if $annotation.Edge }}
					node.ListTableColumn("column{{ $i }}").
						Title({{ $.Package }}.Node{{ $annotation.Edge.StructField }}Title).
						AC({{ $.Package }}ACL["read:{{ $annotation.Edge.Name }}"]).
						DataIndex("{{ $annotation.Edge.Name }}").
						{{- if $annotation.ColumnProps.Align }}Align("{{ $annotation.ColumnProps.Align }}").{{- end }}
						{{- if $annotation.ColumnProps.Ellipsis }}Ellipsis(true).{{- end }}
						{{- if $annotation.ColumnProps.Width }}Width({{ $annotation.ColumnProps.Width }}).{{- end }}
						{{- if $annotation.ColumnProps.Filterable }}Filterable(true).{{- end }}
						{{- if $annotation.ColumnProps.Sortable }}Sortable(true).{{- end }}
						{{- if $annotation.ColumnProps.HideInTable }}HideInTable(true).{{- end }}
						{{- if $annotation.ColumnProps.Order }}Order({{ $annotation.ColumnProps.Order }}).{{- end }}
						Render({{ $.Package }}.Node{{ $annotation.Edge.StructField }}()),
					{{- else }}
					node.ListTableColumn("column{{ $i }}").
						Title({{ $.Package }}.Node{{ $f.StructField }}Title).
						AC({{ $.Package }}ACL["read:{{ $f.Name }}"]).
						DataIndex("{{ $f.Name }}").
						{{- if $annotation.ColumnProps.Align }}Align("{{ $annotation.ColumnProps.Align }}").{{- end }}
						{{- if $annotation.ColumnProps.Ellipsis }}Ellipsis(true).{{- end }}
						{{- if $annotation.ColumnProps.Width }}Width({{ $annotation.ColumnProps.Width }}).{{- end }}
						{{- if $annotation.ColumnProps.Filterable }}Filterable(true).{{- end }}
						{{- if $annotation.ColumnProps.Sortable }}Sortable(true).{{- end }}
						{{- if $annotation.ColumnProps.HideInTable }}HideInTable(true).{{- end }}
						{{- if $annotation.ColumnProps.Order }}Order({{ $annotation.ColumnProps.Order }}).{{- end }}
						Render({{ $.Package }}.Node{{ $f.StructField }}()),
					{{- end }}
				{{- end }}
			{{- end }}
			{{- end }}
		{{- end }}
		{{- range $i, $e := $.Edges }}
			{{- if $annotation := $e.Annotations.LiEnt }}
				{{- if and $annotation.ViewSchema (not $annotation.DisableRead) (not (isNil $annotation.ColumnProps)) }}
					node.ListTableColumn("columnEdge{{ $i }}").
						Title({{ $.Package }}.Node{{ $e.StructField }}Title).
						AC({{ $.Package }}ACL["read:{{ $e.Name }}"]).
						DataIndex("{{ $e.Name }}").
						{{- if $annotation.ColumnProps.Align }}Align("{{ $annotation.ColumnProps.Align }}").{{- end }}
						{{- if $annotation.ColumnProps.Ellipsis }}Ellipsis(true).{{- end }}
						{{- if $annotation.ColumnProps.Width }}Width({{ $annotation.ColumnProps.Width }}).{{- end }}
						{{- if $annotation.ColumnProps.Filterable }}Filterable(true).{{- end }}
						{{- if $annotation.ColumnProps.Sortable }}Sortable(true).{{- end }}
						{{- if $annotation.ColumnProps.HideInTable }}HideInTable(true).{{- end }}
						{{- if $annotation.ColumnProps.Order }}Order({{ $annotation.ColumnProps.Order }}).{{- end }}
						Render(
							{{ $.Package }}.Node{{ $e.StructField }}().SetAC({{ $.Package }}ACL["read:{{ $e.Name }}"]),
						),
				{{- end }}
			{{- end }}
		{{- end }}
	}
}

func List{{ $.Name }}View() view.Node {
	return node.List("{{ $.Package }}List").
		AC({{ $.Package }}ACL["list:{{ $.Name }}"]).
		ForInit("@list{{ $.Name }}", List{{ $.Name }}Controller).
		DecoratorCard().
		EnableFilter().
		SelectionMultiple(true).
		Children(
			node.ListTable("{{ $.Package }}ListTable").
				ActionBar(
					node.ListAction("{{ $.Package }}ListActions").Children(
						node.ListActionRecordFormDrawer("add{{ $.Name }}").
							Title("addNew").
							AC({{ $.Package }}ACL["create:{{ $.Name }}"]).
							ButtonType("primary").
							ButtonIcon("IconPlus").
							ButtonPosition("left").
							Body(Create{{ $.Name }}FormView()).
							Footer(
								node.ActionFormDrawerCancel("cancel"),
								node.ActionFormDrawerSubmit("submit").ForSubmit("@add{{ $.Name }}", Create{{ $.Name }}Controller),
							),
						node.ListActionRowSelection("deleteMany{{ $.Name }}").
							Title("bulkDelete").
							AC({{ $.Package }}ACL["deleteMany:{{ $.Name }}"]).
							ForSubmit("@deleteMany{{ $.Name }}", DeleteMany{{ $.Name }}Controller).
							AfterReload(true).
							ConfirmTitle("confirmDelete").
							ButtonStatus("danger").
							ButtonIcon("IconDelete").
							ButtonPosition("left"),
						{{- if $searchable }}
							node.ListActionSearch("search{{ $.Name }}"),
						{{- end }}
					),
				).
				Columns(
					append(
						List{{ $.Name }}TableColumns(),
						node.ListTableColumn("columnAction").
							Title("columnAction").
							DataIndex("__action").
							Width(150).
							Render(
								node.Space("actions").Size(0).SplitByDivider().Children(
									node.ListActionRecordFormDrawer("view").
										AC({{ $.Package }}ACL["get:{{ $.Name }}"]).
										ForInit("@get{{ $.Name }}", Get{{ $.Name }}Controller).
										DrawerTitle("viewDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEye").
										Body(Read{{ $.Name }}FormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
										),
									node.ListActionRecordFormDrawer("edit").
										AC({{ $.Package }}ACL["update:{{ $.Name }}"]).
										ForInit("@get{{ $.Name }}", Get{{ $.Name }}Controller).
										DrawerTitle("editDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEdit").
										Body(Update{{ $.Name }}FormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
											node.ActionFormDrawerSubmit("submit").
												ForSubmit("@update{{ $.Name }}", Update{{ $.Name }}Controller),
										),
									node.ListActionRecordDelete("delete").
										AC({{ $.Package }}ACL["delete:{{ $.Name }}"]).
										ForSubmit("@delete{{ $.Name }}", Delete{{ $.Name }}Controller).
										ButtonType("text").
										ButtonIcon("IconDelete"),
								),
							),
					)...,
				),
		)
}

var {{ $.Package }}ACL = map[string]ac.AC{}

func init() {
	rf := reflect.ValueOf(schema.{{ $.Name }}{}).MethodByName("ACL")
	if rf.IsValid() {
		{{ $.Package }}ACL, _ = rf.Call([]reflect.Value{})[0].Interface().(map[string]ac.AC)
	}
}

func {{ $.Name }}AccessControlExec(ctx context.Context, key string) (pass bool, err error) {
	f := {{ $.Package }}ACL[key]
	if f != nil {
		return f(ctx)
	}
	return true, nil
}

func {{ $.Name }}AccessControlExecX(ctx context.Context, key string) (pass bool) {
	var err error
	pass, err = {{ $.Name }}AccessControlExec(ctx, key)
	if err != nil {
		panic(err)
	}
	return
}
{{ end }}