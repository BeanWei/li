// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// FlowNodeInstanceUpdate is the builder for updating FlowNodeInstance entities.
type FlowNodeInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *FlowNodeInstanceMutation
}

// Where appends a list predicates to the FlowNodeInstanceUpdate builder.
func (fniu *FlowNodeInstanceUpdate) Where(ps ...predicate.FlowNodeInstance) *FlowNodeInstanceUpdate {
	fniu.mutation.Where(ps...)
	return fniu
}

// SetUpdatedAt sets the "updated_at" field.
func (fniu *FlowNodeInstanceUpdate) SetUpdatedAt(i int64) *FlowNodeInstanceUpdate {
	fniu.mutation.ResetUpdatedAt()
	fniu.mutation.SetUpdatedAt(i)
	return fniu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fniu *FlowNodeInstanceUpdate) AddUpdatedAt(i int64) *FlowNodeInstanceUpdate {
	fniu.mutation.AddUpdatedAt(i)
	return fniu
}

// SetDeletedAt sets the "deleted_at" field.
func (fniu *FlowNodeInstanceUpdate) SetDeletedAt(i int64) *FlowNodeInstanceUpdate {
	fniu.mutation.ResetDeletedAt()
	fniu.mutation.SetDeletedAt(i)
	return fniu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fniu *FlowNodeInstanceUpdate) SetNillableDeletedAt(i *int64) *FlowNodeInstanceUpdate {
	if i != nil {
		fniu.SetDeletedAt(*i)
	}
	return fniu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fniu *FlowNodeInstanceUpdate) AddDeletedAt(i int64) *FlowNodeInstanceUpdate {
	fniu.mutation.AddDeletedAt(i)
	return fniu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fniu *FlowNodeInstanceUpdate) ClearDeletedAt() *FlowNodeInstanceUpdate {
	fniu.mutation.ClearDeletedAt()
	return fniu
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fniu *FlowNodeInstanceUpdate) SetFlowInstanceID(s string) *FlowNodeInstanceUpdate {
	fniu.mutation.SetFlowInstanceID(s)
	return fniu
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (fniu *FlowNodeInstanceUpdate) SetSourceFlowNodeInstanceID(s string) *FlowNodeInstanceUpdate {
	fniu.mutation.SetSourceFlowNodeInstanceID(s)
	return fniu
}

// SetNillableSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field if the given value is not nil.
func (fniu *FlowNodeInstanceUpdate) SetNillableSourceFlowNodeInstanceID(s *string) *FlowNodeInstanceUpdate {
	if s != nil {
		fniu.SetSourceFlowNodeInstanceID(*s)
	}
	return fniu
}

// ClearSourceFlowNodeInstanceID clears the value of the "source_flow_node_instance_id" field.
func (fniu *FlowNodeInstanceUpdate) ClearSourceFlowNodeInstanceID() *FlowNodeInstanceUpdate {
	fniu.mutation.ClearSourceFlowNodeInstanceID()
	return fniu
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fniu *FlowNodeInstanceUpdate) SetFlowInstanceDataID(s string) *FlowNodeInstanceUpdate {
	fniu.mutation.SetFlowInstanceDataID(s)
	return fniu
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fniu *FlowNodeInstanceUpdate) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceUpdate {
	if s != nil {
		fniu.SetFlowInstanceDataID(*s)
	}
	return fniu
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (fniu *FlowNodeInstanceUpdate) ClearFlowInstanceDataID() *FlowNodeInstanceUpdate {
	fniu.mutation.ClearFlowInstanceDataID()
	return fniu
}

// SetNodeKey sets the "node_key" field.
func (fniu *FlowNodeInstanceUpdate) SetNodeKey(s string) *FlowNodeInstanceUpdate {
	fniu.mutation.SetNodeKey(s)
	return fniu
}

// SetSourceNodeKey sets the "source_node_key" field.
func (fniu *FlowNodeInstanceUpdate) SetSourceNodeKey(s string) *FlowNodeInstanceUpdate {
	fniu.mutation.SetSourceNodeKey(s)
	return fniu
}

// SetNillableSourceNodeKey sets the "source_node_key" field if the given value is not nil.
func (fniu *FlowNodeInstanceUpdate) SetNillableSourceNodeKey(s *string) *FlowNodeInstanceUpdate {
	if s != nil {
		fniu.SetSourceNodeKey(*s)
	}
	return fniu
}

// ClearSourceNodeKey clears the value of the "source_node_key" field.
func (fniu *FlowNodeInstanceUpdate) ClearSourceNodeKey() *FlowNodeInstanceUpdate {
	fniu.mutation.ClearSourceNodeKey()
	return fniu
}

// SetStatus sets the "status" field.
func (fniu *FlowNodeInstanceUpdate) SetStatus(i int8) *FlowNodeInstanceUpdate {
	fniu.mutation.ResetStatus()
	fniu.mutation.SetStatus(i)
	return fniu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fniu *FlowNodeInstanceUpdate) SetNillableStatus(i *int8) *FlowNodeInstanceUpdate {
	if i != nil {
		fniu.SetStatus(*i)
	}
	return fniu
}

// AddStatus adds i to the "status" field.
func (fniu *FlowNodeInstanceUpdate) AddStatus(i int8) *FlowNodeInstanceUpdate {
	fniu.mutation.AddStatus(i)
	return fniu
}

// SetFlowInstance sets the "flow_instance" edge to the FlowInstance entity.
func (fniu *FlowNodeInstanceUpdate) SetFlowInstance(f *FlowInstance) *FlowNodeInstanceUpdate {
	return fniu.SetFlowInstanceID(f.ID)
}

// Mutation returns the FlowNodeInstanceMutation object of the builder.
func (fniu *FlowNodeInstanceUpdate) Mutation() *FlowNodeInstanceMutation {
	return fniu.mutation
}

// ClearFlowInstance clears the "flow_instance" edge to the FlowInstance entity.
func (fniu *FlowNodeInstanceUpdate) ClearFlowInstance() *FlowNodeInstanceUpdate {
	fniu.mutation.ClearFlowInstance()
	return fniu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fniu *FlowNodeInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fniu.defaults()
	if len(fniu.hooks) == 0 {
		if err = fniu.check(); err != nil {
			return 0, err
		}
		affected, err = fniu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fniu.check(); err != nil {
				return 0, err
			}
			fniu.mutation = mutation
			affected, err = fniu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fniu.hooks) - 1; i >= 0; i-- {
			if fniu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fniu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fniu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fniu *FlowNodeInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := fniu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fniu *FlowNodeInstanceUpdate) Exec(ctx context.Context) error {
	_, err := fniu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fniu *FlowNodeInstanceUpdate) ExecX(ctx context.Context) {
	if err := fniu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fniu *FlowNodeInstanceUpdate) defaults() {
	if _, ok := fniu.mutation.UpdatedAt(); !ok {
		v := flownodeinstance.UpdateDefaultUpdatedAt()
		fniu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fniu *FlowNodeInstanceUpdate) check() error {
	if v, ok := fniu.mutation.FlowInstanceID(); ok {
		if err := flownodeinstance.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.flow_instance_id": %w`, err)}
		}
	}
	if v, ok := fniu.mutation.NodeKey(); ok {
		if err := flownodeinstance.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.node_key": %w`, err)}
		}
	}
	if _, ok := fniu.mutation.FlowInstanceID(); fniu.mutation.FlowInstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FlowNodeInstance.flow_instance"`)
	}
	return nil
}

func (fniu *FlowNodeInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flownodeinstance.Table,
			Columns: flownodeinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstance.FieldID,
			},
		},
	}
	if ps := fniu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fniu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fniu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fniu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if value, ok := fniu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if fniu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if value, ok := fniu.mutation.SourceFlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceFlowNodeInstanceID,
		})
	}
	if fniu.mutation.SourceFlowNodeInstanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldSourceFlowNodeInstanceID,
		})
	}
	if value, ok := fniu.mutation.FlowInstanceDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldFlowInstanceDataID,
		})
	}
	if fniu.mutation.FlowInstanceDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldFlowInstanceDataID,
		})
	}
	if value, ok := fniu.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldNodeKey,
		})
	}
	if value, ok := fniu.mutation.SourceNodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceNodeKey,
		})
	}
	if fniu.mutation.SourceNodeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldSourceNodeKey,
		})
	}
	if value, ok := fniu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstance.FieldStatus,
		})
	}
	if value, ok := fniu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstance.FieldStatus,
		})
	}
	if fniu.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flownodeinstance.FlowInstanceTable,
			Columns: []string{flownodeinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fniu.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flownodeinstance.FlowInstanceTable,
			Columns: []string{flownodeinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fniu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flownodeinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlowNodeInstanceUpdateOne is the builder for updating a single FlowNodeInstance entity.
type FlowNodeInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlowNodeInstanceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetUpdatedAt(i int64) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ResetUpdatedAt()
	fniuo.mutation.SetUpdatedAt(i)
	return fniuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fniuo *FlowNodeInstanceUpdateOne) AddUpdatedAt(i int64) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.AddUpdatedAt(i)
	return fniuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetDeletedAt(i int64) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ResetDeletedAt()
	fniuo.mutation.SetDeletedAt(i)
	return fniuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fniuo *FlowNodeInstanceUpdateOne) SetNillableDeletedAt(i *int64) *FlowNodeInstanceUpdateOne {
	if i != nil {
		fniuo.SetDeletedAt(*i)
	}
	return fniuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fniuo *FlowNodeInstanceUpdateOne) AddDeletedAt(i int64) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.AddDeletedAt(i)
	return fniuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fniuo *FlowNodeInstanceUpdateOne) ClearDeletedAt() *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ClearDeletedAt()
	return fniuo
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetFlowInstanceID(s string) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.SetFlowInstanceID(s)
	return fniuo
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetSourceFlowNodeInstanceID(s string) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.SetSourceFlowNodeInstanceID(s)
	return fniuo
}

// SetNillableSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field if the given value is not nil.
func (fniuo *FlowNodeInstanceUpdateOne) SetNillableSourceFlowNodeInstanceID(s *string) *FlowNodeInstanceUpdateOne {
	if s != nil {
		fniuo.SetSourceFlowNodeInstanceID(*s)
	}
	return fniuo
}

// ClearSourceFlowNodeInstanceID clears the value of the "source_flow_node_instance_id" field.
func (fniuo *FlowNodeInstanceUpdateOne) ClearSourceFlowNodeInstanceID() *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ClearSourceFlowNodeInstanceID()
	return fniuo
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetFlowInstanceDataID(s string) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.SetFlowInstanceDataID(s)
	return fniuo
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fniuo *FlowNodeInstanceUpdateOne) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceUpdateOne {
	if s != nil {
		fniuo.SetFlowInstanceDataID(*s)
	}
	return fniuo
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (fniuo *FlowNodeInstanceUpdateOne) ClearFlowInstanceDataID() *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ClearFlowInstanceDataID()
	return fniuo
}

// SetNodeKey sets the "node_key" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetNodeKey(s string) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.SetNodeKey(s)
	return fniuo
}

// SetSourceNodeKey sets the "source_node_key" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetSourceNodeKey(s string) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.SetSourceNodeKey(s)
	return fniuo
}

// SetNillableSourceNodeKey sets the "source_node_key" field if the given value is not nil.
func (fniuo *FlowNodeInstanceUpdateOne) SetNillableSourceNodeKey(s *string) *FlowNodeInstanceUpdateOne {
	if s != nil {
		fniuo.SetSourceNodeKey(*s)
	}
	return fniuo
}

// ClearSourceNodeKey clears the value of the "source_node_key" field.
func (fniuo *FlowNodeInstanceUpdateOne) ClearSourceNodeKey() *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ClearSourceNodeKey()
	return fniuo
}

// SetStatus sets the "status" field.
func (fniuo *FlowNodeInstanceUpdateOne) SetStatus(i int8) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ResetStatus()
	fniuo.mutation.SetStatus(i)
	return fniuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fniuo *FlowNodeInstanceUpdateOne) SetNillableStatus(i *int8) *FlowNodeInstanceUpdateOne {
	if i != nil {
		fniuo.SetStatus(*i)
	}
	return fniuo
}

// AddStatus adds i to the "status" field.
func (fniuo *FlowNodeInstanceUpdateOne) AddStatus(i int8) *FlowNodeInstanceUpdateOne {
	fniuo.mutation.AddStatus(i)
	return fniuo
}

// SetFlowInstance sets the "flow_instance" edge to the FlowInstance entity.
func (fniuo *FlowNodeInstanceUpdateOne) SetFlowInstance(f *FlowInstance) *FlowNodeInstanceUpdateOne {
	return fniuo.SetFlowInstanceID(f.ID)
}

// Mutation returns the FlowNodeInstanceMutation object of the builder.
func (fniuo *FlowNodeInstanceUpdateOne) Mutation() *FlowNodeInstanceMutation {
	return fniuo.mutation
}

// ClearFlowInstance clears the "flow_instance" edge to the FlowInstance entity.
func (fniuo *FlowNodeInstanceUpdateOne) ClearFlowInstance() *FlowNodeInstanceUpdateOne {
	fniuo.mutation.ClearFlowInstance()
	return fniuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fniuo *FlowNodeInstanceUpdateOne) Select(field string, fields ...string) *FlowNodeInstanceUpdateOne {
	fniuo.fields = append([]string{field}, fields...)
	return fniuo
}

// Save executes the query and returns the updated FlowNodeInstance entity.
func (fniuo *FlowNodeInstanceUpdateOne) Save(ctx context.Context) (*FlowNodeInstance, error) {
	var (
		err  error
		node *FlowNodeInstance
	)
	fniuo.defaults()
	if len(fniuo.hooks) == 0 {
		if err = fniuo.check(); err != nil {
			return nil, err
		}
		node, err = fniuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fniuo.check(); err != nil {
				return nil, err
			}
			fniuo.mutation = mutation
			node, err = fniuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fniuo.hooks) - 1; i >= 0; i-- {
			if fniuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fniuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fniuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fniuo *FlowNodeInstanceUpdateOne) SaveX(ctx context.Context) *FlowNodeInstance {
	node, err := fniuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fniuo *FlowNodeInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := fniuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fniuo *FlowNodeInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := fniuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fniuo *FlowNodeInstanceUpdateOne) defaults() {
	if _, ok := fniuo.mutation.UpdatedAt(); !ok {
		v := flownodeinstance.UpdateDefaultUpdatedAt()
		fniuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fniuo *FlowNodeInstanceUpdateOne) check() error {
	if v, ok := fniuo.mutation.FlowInstanceID(); ok {
		if err := flownodeinstance.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.flow_instance_id": %w`, err)}
		}
	}
	if v, ok := fniuo.mutation.NodeKey(); ok {
		if err := flownodeinstance.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.node_key": %w`, err)}
		}
	}
	if _, ok := fniuo.mutation.FlowInstanceID(); fniuo.mutation.FlowInstanceCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FlowNodeInstance.flow_instance"`)
	}
	return nil
}

func (fniuo *FlowNodeInstanceUpdateOne) sqlSave(ctx context.Context) (_node *FlowNodeInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flownodeinstance.Table,
			Columns: flownodeinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstance.FieldID,
			},
		},
	}
	id, ok := fniuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FlowNodeInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fniuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flownodeinstance.FieldID)
		for _, f := range fields {
			if !flownodeinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flownodeinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fniuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fniuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fniuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fniuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if value, ok := fniuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if fniuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flownodeinstance.FieldDeletedAt,
		})
	}
	if value, ok := fniuo.mutation.SourceFlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceFlowNodeInstanceID,
		})
	}
	if fniuo.mutation.SourceFlowNodeInstanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldSourceFlowNodeInstanceID,
		})
	}
	if value, ok := fniuo.mutation.FlowInstanceDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldFlowInstanceDataID,
		})
	}
	if fniuo.mutation.FlowInstanceDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldFlowInstanceDataID,
		})
	}
	if value, ok := fniuo.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldNodeKey,
		})
	}
	if value, ok := fniuo.mutation.SourceNodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceNodeKey,
		})
	}
	if fniuo.mutation.SourceNodeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstance.FieldSourceNodeKey,
		})
	}
	if value, ok := fniuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstance.FieldStatus,
		})
	}
	if value, ok := fniuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstance.FieldStatus,
		})
	}
	if fniuo.mutation.FlowInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flownodeinstance.FlowInstanceTable,
			Columns: []string{flownodeinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fniuo.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flownodeinstance.FlowInstanceTable,
			Columns: []string{flownodeinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FlowNodeInstance{config: fniuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fniuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flownodeinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
