// Code generated by entc, DO NOT EDIT.

package flowinstancedata

import (
	"entgo.io/ent/dialect/sql"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FlowInstanceID applies equality check predicate on the "flow_instance_id" field. It's identical to FlowInstanceIDEQ.
func FlowInstanceID(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceID), v))
	})
}

// FlowNodeInstanceID applies equality check predicate on the "flow_node_instance_id" field. It's identical to FlowNodeInstanceIDEQ.
func FlowNodeInstanceID(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowNodeInstanceID), v))
	})
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeKey), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// FlowInstanceIDEQ applies the EQ predicate on the "flow_instance_id" field.
func FlowInstanceIDEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDNEQ applies the NEQ predicate on the "flow_instance_id" field.
func FlowInstanceIDNEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDIn applies the In predicate on the "flow_instance_id" field.
func FlowInstanceIDIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowInstanceID), v...))
	})
}

// FlowInstanceIDNotIn applies the NotIn predicate on the "flow_instance_id" field.
func FlowInstanceIDNotIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowInstanceID), v...))
	})
}

// FlowInstanceIDGT applies the GT predicate on the "flow_instance_id" field.
func FlowInstanceIDGT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDGTE applies the GTE predicate on the "flow_instance_id" field.
func FlowInstanceIDGTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDLT applies the LT predicate on the "flow_instance_id" field.
func FlowInstanceIDLT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDLTE applies the LTE predicate on the "flow_instance_id" field.
func FlowInstanceIDLTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDContains applies the Contains predicate on the "flow_instance_id" field.
func FlowInstanceIDContains(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDHasPrefix applies the HasPrefix predicate on the "flow_instance_id" field.
func FlowInstanceIDHasPrefix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDHasSuffix applies the HasSuffix predicate on the "flow_instance_id" field.
func FlowInstanceIDHasSuffix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDEqualFold applies the EqualFold predicate on the "flow_instance_id" field.
func FlowInstanceIDEqualFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDContainsFold applies the ContainsFold predicate on the "flow_instance_id" field.
func FlowInstanceIDContainsFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowInstanceID), v))
	})
}

// FlowNodeInstanceIDEQ applies the EQ predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDNEQ applies the NEQ predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDNEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDIn applies the In predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowNodeInstanceID), v...))
	})
}

// FlowNodeInstanceIDNotIn applies the NotIn predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDNotIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowNodeInstanceID), v...))
	})
}

// FlowNodeInstanceIDGT applies the GT predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDGT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDGTE applies the GTE predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDGTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDLT applies the LT predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDLT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDLTE applies the LTE predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDLTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDContains applies the Contains predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDContains(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDHasPrefix applies the HasPrefix predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDHasPrefix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDHasSuffix applies the HasSuffix predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDHasSuffix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDIsNil applies the IsNil predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDIsNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlowNodeInstanceID)))
	})
}

// FlowNodeInstanceIDNotNil applies the NotNil predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDNotNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlowNodeInstanceID)))
	})
}

// FlowNodeInstanceIDEqualFold applies the EqualFold predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDEqualFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowNodeInstanceID), v))
	})
}

// FlowNodeInstanceIDContainsFold applies the ContainsFold predicate on the "flow_node_instance_id" field.
func FlowNodeInstanceIDContainsFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowNodeInstanceID), v))
	})
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeKey), v))
	})
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeKey), v))
	})
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeKey), v...))
	})
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeKey), v...))
	})
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeKey), v))
	})
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeKey), v))
	})
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeKey), v))
	})
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeKey), v))
	})
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeKey), v))
	})
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeKey), v))
	})
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeKey), v))
	})
}

// NodeKeyIsNil applies the IsNil predicate on the "node_key" field.
func NodeKeyIsNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeKey)))
	})
}

// NodeKeyNotNil applies the NotNil predicate on the "node_key" field.
func NodeKeyNotNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeKey)))
	})
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeKey), v))
	})
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeKey), v))
	})
}

// DataIsNil applies the IsNil predicate on the "data" field.
func DataIsNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldData)))
	})
}

// DataNotNil applies the NotNil predicate on the "data" field.
func DataNotNil() predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldData)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int8) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int8) predicate.FlowInstanceData {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int8) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FlowInstanceData) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FlowInstanceData) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FlowInstanceData) predicate.FlowInstanceData {
	return predicate.FlowInstanceData(func(s *sql.Selector) {
		p(s.Not())
	})
}
