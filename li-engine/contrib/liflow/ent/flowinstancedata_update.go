// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstancedata"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// FlowInstanceDataUpdate is the builder for updating FlowInstanceData entities.
type FlowInstanceDataUpdate struct {
	config
	hooks    []Hook
	mutation *FlowInstanceDataMutation
}

// Where appends a list predicates to the FlowInstanceDataUpdate builder.
func (fidu *FlowInstanceDataUpdate) Where(ps ...predicate.FlowInstanceData) *FlowInstanceDataUpdate {
	fidu.mutation.Where(ps...)
	return fidu
}

// SetUpdatedAt sets the "updated_at" field.
func (fidu *FlowInstanceDataUpdate) SetUpdatedAt(i int64) *FlowInstanceDataUpdate {
	fidu.mutation.ResetUpdatedAt()
	fidu.mutation.SetUpdatedAt(i)
	return fidu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fidu *FlowInstanceDataUpdate) AddUpdatedAt(i int64) *FlowInstanceDataUpdate {
	fidu.mutation.AddUpdatedAt(i)
	return fidu
}

// SetDeletedAt sets the "deleted_at" field.
func (fidu *FlowInstanceDataUpdate) SetDeletedAt(i int64) *FlowInstanceDataUpdate {
	fidu.mutation.ResetDeletedAt()
	fidu.mutation.SetDeletedAt(i)
	return fidu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fidu *FlowInstanceDataUpdate) SetNillableDeletedAt(i *int64) *FlowInstanceDataUpdate {
	if i != nil {
		fidu.SetDeletedAt(*i)
	}
	return fidu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fidu *FlowInstanceDataUpdate) AddDeletedAt(i int64) *FlowInstanceDataUpdate {
	fidu.mutation.AddDeletedAt(i)
	return fidu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fidu *FlowInstanceDataUpdate) ClearDeletedAt() *FlowInstanceDataUpdate {
	fidu.mutation.ClearDeletedAt()
	return fidu
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fidu *FlowInstanceDataUpdate) SetFlowInstanceID(s string) *FlowInstanceDataUpdate {
	fidu.mutation.SetFlowInstanceID(s)
	return fidu
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (fidu *FlowInstanceDataUpdate) SetFlowNodeInstanceID(s string) *FlowInstanceDataUpdate {
	fidu.mutation.SetFlowNodeInstanceID(s)
	return fidu
}

// SetNillableFlowNodeInstanceID sets the "flow_node_instance_id" field if the given value is not nil.
func (fidu *FlowInstanceDataUpdate) SetNillableFlowNodeInstanceID(s *string) *FlowInstanceDataUpdate {
	if s != nil {
		fidu.SetFlowNodeInstanceID(*s)
	}
	return fidu
}

// ClearFlowNodeInstanceID clears the value of the "flow_node_instance_id" field.
func (fidu *FlowInstanceDataUpdate) ClearFlowNodeInstanceID() *FlowInstanceDataUpdate {
	fidu.mutation.ClearFlowNodeInstanceID()
	return fidu
}

// SetNodeKey sets the "node_key" field.
func (fidu *FlowInstanceDataUpdate) SetNodeKey(s string) *FlowInstanceDataUpdate {
	fidu.mutation.SetNodeKey(s)
	return fidu
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (fidu *FlowInstanceDataUpdate) SetNillableNodeKey(s *string) *FlowInstanceDataUpdate {
	if s != nil {
		fidu.SetNodeKey(*s)
	}
	return fidu
}

// ClearNodeKey clears the value of the "node_key" field.
func (fidu *FlowInstanceDataUpdate) ClearNodeKey() *FlowInstanceDataUpdate {
	fidu.mutation.ClearNodeKey()
	return fidu
}

// SetData sets the "data" field.
func (fidu *FlowInstanceDataUpdate) SetData(m map[string]interface{}) *FlowInstanceDataUpdate {
	fidu.mutation.SetData(m)
	return fidu
}

// ClearData clears the value of the "data" field.
func (fidu *FlowInstanceDataUpdate) ClearData() *FlowInstanceDataUpdate {
	fidu.mutation.ClearData()
	return fidu
}

// SetType sets the "type" field.
func (fidu *FlowInstanceDataUpdate) SetType(i int8) *FlowInstanceDataUpdate {
	fidu.mutation.ResetType()
	fidu.mutation.SetType(i)
	return fidu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fidu *FlowInstanceDataUpdate) SetNillableType(i *int8) *FlowInstanceDataUpdate {
	if i != nil {
		fidu.SetType(*i)
	}
	return fidu
}

// AddType adds i to the "type" field.
func (fidu *FlowInstanceDataUpdate) AddType(i int8) *FlowInstanceDataUpdate {
	fidu.mutation.AddType(i)
	return fidu
}

// Mutation returns the FlowInstanceDataMutation object of the builder.
func (fidu *FlowInstanceDataUpdate) Mutation() *FlowInstanceDataMutation {
	return fidu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fidu *FlowInstanceDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fidu.defaults()
	if len(fidu.hooks) == 0 {
		if err = fidu.check(); err != nil {
			return 0, err
		}
		affected, err = fidu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowInstanceDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fidu.check(); err != nil {
				return 0, err
			}
			fidu.mutation = mutation
			affected, err = fidu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fidu.hooks) - 1; i >= 0; i-- {
			if fidu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fidu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fidu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fidu *FlowInstanceDataUpdate) SaveX(ctx context.Context) int {
	affected, err := fidu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fidu *FlowInstanceDataUpdate) Exec(ctx context.Context) error {
	_, err := fidu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fidu *FlowInstanceDataUpdate) ExecX(ctx context.Context) {
	if err := fidu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fidu *FlowInstanceDataUpdate) defaults() {
	if _, ok := fidu.mutation.UpdatedAt(); !ok {
		v := flowinstancedata.UpdateDefaultUpdatedAt()
		fidu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fidu *FlowInstanceDataUpdate) check() error {
	if v, ok := fidu.mutation.FlowInstanceID(); ok {
		if err := flowinstancedata.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstanceData.flow_instance_id": %w`, err)}
		}
	}
	return nil
}

func (fidu *FlowInstanceDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flowinstancedata.Table,
			Columns: flowinstancedata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowinstancedata.FieldID,
			},
		},
	}
	if ps := fidu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fidu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldUpdatedAt,
		})
	}
	if value, ok := fidu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldUpdatedAt,
		})
	}
	if value, ok := fidu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if value, ok := fidu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if fidu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if value, ok := fidu.mutation.FlowInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldFlowInstanceID,
		})
	}
	if value, ok := fidu.mutation.FlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldFlowNodeInstanceID,
		})
	}
	if fidu.mutation.FlowNodeInstanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flowinstancedata.FieldFlowNodeInstanceID,
		})
	}
	if value, ok := fidu.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldNodeKey,
		})
	}
	if fidu.mutation.NodeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flowinstancedata.FieldNodeKey,
		})
	}
	if value, ok := fidu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flowinstancedata.FieldData,
		})
	}
	if fidu.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flowinstancedata.FieldData,
		})
	}
	if value, ok := fidu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstancedata.FieldType,
		})
	}
	if value, ok := fidu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstancedata.FieldType,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fidu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstancedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlowInstanceDataUpdateOne is the builder for updating a single FlowInstanceData entity.
type FlowInstanceDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlowInstanceDataMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fiduo *FlowInstanceDataUpdateOne) SetUpdatedAt(i int64) *FlowInstanceDataUpdateOne {
	fiduo.mutation.ResetUpdatedAt()
	fiduo.mutation.SetUpdatedAt(i)
	return fiduo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fiduo *FlowInstanceDataUpdateOne) AddUpdatedAt(i int64) *FlowInstanceDataUpdateOne {
	fiduo.mutation.AddUpdatedAt(i)
	return fiduo
}

// SetDeletedAt sets the "deleted_at" field.
func (fiduo *FlowInstanceDataUpdateOne) SetDeletedAt(i int64) *FlowInstanceDataUpdateOne {
	fiduo.mutation.ResetDeletedAt()
	fiduo.mutation.SetDeletedAt(i)
	return fiduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fiduo *FlowInstanceDataUpdateOne) SetNillableDeletedAt(i *int64) *FlowInstanceDataUpdateOne {
	if i != nil {
		fiduo.SetDeletedAt(*i)
	}
	return fiduo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fiduo *FlowInstanceDataUpdateOne) AddDeletedAt(i int64) *FlowInstanceDataUpdateOne {
	fiduo.mutation.AddDeletedAt(i)
	return fiduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fiduo *FlowInstanceDataUpdateOne) ClearDeletedAt() *FlowInstanceDataUpdateOne {
	fiduo.mutation.ClearDeletedAt()
	return fiduo
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fiduo *FlowInstanceDataUpdateOne) SetFlowInstanceID(s string) *FlowInstanceDataUpdateOne {
	fiduo.mutation.SetFlowInstanceID(s)
	return fiduo
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (fiduo *FlowInstanceDataUpdateOne) SetFlowNodeInstanceID(s string) *FlowInstanceDataUpdateOne {
	fiduo.mutation.SetFlowNodeInstanceID(s)
	return fiduo
}

// SetNillableFlowNodeInstanceID sets the "flow_node_instance_id" field if the given value is not nil.
func (fiduo *FlowInstanceDataUpdateOne) SetNillableFlowNodeInstanceID(s *string) *FlowInstanceDataUpdateOne {
	if s != nil {
		fiduo.SetFlowNodeInstanceID(*s)
	}
	return fiduo
}

// ClearFlowNodeInstanceID clears the value of the "flow_node_instance_id" field.
func (fiduo *FlowInstanceDataUpdateOne) ClearFlowNodeInstanceID() *FlowInstanceDataUpdateOne {
	fiduo.mutation.ClearFlowNodeInstanceID()
	return fiduo
}

// SetNodeKey sets the "node_key" field.
func (fiduo *FlowInstanceDataUpdateOne) SetNodeKey(s string) *FlowInstanceDataUpdateOne {
	fiduo.mutation.SetNodeKey(s)
	return fiduo
}

// SetNillableNodeKey sets the "node_key" field if the given value is not nil.
func (fiduo *FlowInstanceDataUpdateOne) SetNillableNodeKey(s *string) *FlowInstanceDataUpdateOne {
	if s != nil {
		fiduo.SetNodeKey(*s)
	}
	return fiduo
}

// ClearNodeKey clears the value of the "node_key" field.
func (fiduo *FlowInstanceDataUpdateOne) ClearNodeKey() *FlowInstanceDataUpdateOne {
	fiduo.mutation.ClearNodeKey()
	return fiduo
}

// SetData sets the "data" field.
func (fiduo *FlowInstanceDataUpdateOne) SetData(m map[string]interface{}) *FlowInstanceDataUpdateOne {
	fiduo.mutation.SetData(m)
	return fiduo
}

// ClearData clears the value of the "data" field.
func (fiduo *FlowInstanceDataUpdateOne) ClearData() *FlowInstanceDataUpdateOne {
	fiduo.mutation.ClearData()
	return fiduo
}

// SetType sets the "type" field.
func (fiduo *FlowInstanceDataUpdateOne) SetType(i int8) *FlowInstanceDataUpdateOne {
	fiduo.mutation.ResetType()
	fiduo.mutation.SetType(i)
	return fiduo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fiduo *FlowInstanceDataUpdateOne) SetNillableType(i *int8) *FlowInstanceDataUpdateOne {
	if i != nil {
		fiduo.SetType(*i)
	}
	return fiduo
}

// AddType adds i to the "type" field.
func (fiduo *FlowInstanceDataUpdateOne) AddType(i int8) *FlowInstanceDataUpdateOne {
	fiduo.mutation.AddType(i)
	return fiduo
}

// Mutation returns the FlowInstanceDataMutation object of the builder.
func (fiduo *FlowInstanceDataUpdateOne) Mutation() *FlowInstanceDataMutation {
	return fiduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiduo *FlowInstanceDataUpdateOne) Select(field string, fields ...string) *FlowInstanceDataUpdateOne {
	fiduo.fields = append([]string{field}, fields...)
	return fiduo
}

// Save executes the query and returns the updated FlowInstanceData entity.
func (fiduo *FlowInstanceDataUpdateOne) Save(ctx context.Context) (*FlowInstanceData, error) {
	var (
		err  error
		node *FlowInstanceData
	)
	fiduo.defaults()
	if len(fiduo.hooks) == 0 {
		if err = fiduo.check(); err != nil {
			return nil, err
		}
		node, err = fiduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowInstanceDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fiduo.check(); err != nil {
				return nil, err
			}
			fiduo.mutation = mutation
			node, err = fiduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fiduo.hooks) - 1; i >= 0; i-- {
			if fiduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fiduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiduo *FlowInstanceDataUpdateOne) SaveX(ctx context.Context) *FlowInstanceData {
	node, err := fiduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiduo *FlowInstanceDataUpdateOne) Exec(ctx context.Context) error {
	_, err := fiduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiduo *FlowInstanceDataUpdateOne) ExecX(ctx context.Context) {
	if err := fiduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiduo *FlowInstanceDataUpdateOne) defaults() {
	if _, ok := fiduo.mutation.UpdatedAt(); !ok {
		v := flowinstancedata.UpdateDefaultUpdatedAt()
		fiduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiduo *FlowInstanceDataUpdateOne) check() error {
	if v, ok := fiduo.mutation.FlowInstanceID(); ok {
		if err := flowinstancedata.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstanceData.flow_instance_id": %w`, err)}
		}
	}
	return nil
}

func (fiduo *FlowInstanceDataUpdateOne) sqlSave(ctx context.Context) (_node *FlowInstanceData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flowinstancedata.Table,
			Columns: flowinstancedata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowinstancedata.FieldID,
			},
		},
	}
	id, ok := fiduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FlowInstanceData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flowinstancedata.FieldID)
		for _, f := range fields {
			if !flowinstancedata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flowinstancedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldUpdatedAt,
		})
	}
	if value, ok := fiduo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldUpdatedAt,
		})
	}
	if value, ok := fiduo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if value, ok := fiduo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if fiduo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flowinstancedata.FieldDeletedAt,
		})
	}
	if value, ok := fiduo.mutation.FlowInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldFlowInstanceID,
		})
	}
	if value, ok := fiduo.mutation.FlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldFlowNodeInstanceID,
		})
	}
	if fiduo.mutation.FlowNodeInstanceIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flowinstancedata.FieldFlowNodeInstanceID,
		})
	}
	if value, ok := fiduo.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstancedata.FieldNodeKey,
		})
	}
	if fiduo.mutation.NodeKeyCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flowinstancedata.FieldNodeKey,
		})
	}
	if value, ok := fiduo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flowinstancedata.FieldData,
		})
	}
	if fiduo.mutation.DataCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flowinstancedata.FieldData,
		})
	}
	if value, ok := fiduo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstancedata.FieldType,
		})
	}
	if value, ok := fiduo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstancedata.FieldType,
		})
	}
	_node = &FlowInstanceData{config: fiduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstancedata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
