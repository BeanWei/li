// Code generated by entc, DO NOT EDIT.

package flownodeinstance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FlowInstanceID applies equality check predicate on the "flow_instance_id" field. It's identical to FlowInstanceIDEQ.
func FlowInstanceID(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceID), v))
	})
}

// SourceFlowNodeInstanceID applies equality check predicate on the "source_flow_node_instance_id" field. It's identical to SourceFlowNodeInstanceIDEQ.
func SourceFlowNodeInstanceID(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// FlowInstanceDataID applies equality check predicate on the "flow_instance_data_id" field. It's identical to FlowInstanceDataIDEQ.
func FlowInstanceDataID(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceDataID), v))
	})
}

// NodeKey applies equality check predicate on the "node_key" field. It's identical to NodeKeyEQ.
func NodeKey(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeKey), v))
	})
}

// SourceNodeKey applies equality check predicate on the "source_node_key" field. It's identical to SourceNodeKeyEQ.
func SourceNodeKey(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceNodeKey), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// FlowInstanceIDEQ applies the EQ predicate on the "flow_instance_id" field.
func FlowInstanceIDEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDNEQ applies the NEQ predicate on the "flow_instance_id" field.
func FlowInstanceIDNEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDIn applies the In predicate on the "flow_instance_id" field.
func FlowInstanceIDIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowInstanceID), v...))
	})
}

// FlowInstanceIDNotIn applies the NotIn predicate on the "flow_instance_id" field.
func FlowInstanceIDNotIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowInstanceID), v...))
	})
}

// FlowInstanceIDGT applies the GT predicate on the "flow_instance_id" field.
func FlowInstanceIDGT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDGTE applies the GTE predicate on the "flow_instance_id" field.
func FlowInstanceIDGTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDLT applies the LT predicate on the "flow_instance_id" field.
func FlowInstanceIDLT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDLTE applies the LTE predicate on the "flow_instance_id" field.
func FlowInstanceIDLTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDContains applies the Contains predicate on the "flow_instance_id" field.
func FlowInstanceIDContains(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDHasPrefix applies the HasPrefix predicate on the "flow_instance_id" field.
func FlowInstanceIDHasPrefix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDHasSuffix applies the HasSuffix predicate on the "flow_instance_id" field.
func FlowInstanceIDHasSuffix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDEqualFold applies the EqualFold predicate on the "flow_instance_id" field.
func FlowInstanceIDEqualFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowInstanceID), v))
	})
}

// FlowInstanceIDContainsFold applies the ContainsFold predicate on the "flow_instance_id" field.
func FlowInstanceIDContainsFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDEQ applies the EQ predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDNEQ applies the NEQ predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDNEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDIn applies the In predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceFlowNodeInstanceID), v...))
	})
}

// SourceFlowNodeInstanceIDNotIn applies the NotIn predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDNotIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceFlowNodeInstanceID), v...))
	})
}

// SourceFlowNodeInstanceIDGT applies the GT predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDGT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDGTE applies the GTE predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDGTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDLT applies the LT predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDLT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDLTE applies the LTE predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDLTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDContains applies the Contains predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDContains(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDHasPrefix applies the HasPrefix predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDHasPrefix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDHasSuffix applies the HasSuffix predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDHasSuffix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDIsNil applies the IsNil predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDIsNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceFlowNodeInstanceID)))
	})
}

// SourceFlowNodeInstanceIDNotNil applies the NotNil predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDNotNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceFlowNodeInstanceID)))
	})
}

// SourceFlowNodeInstanceIDEqualFold applies the EqualFold predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDEqualFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// SourceFlowNodeInstanceIDContainsFold applies the ContainsFold predicate on the "source_flow_node_instance_id" field.
func SourceFlowNodeInstanceIDContainsFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceFlowNodeInstanceID), v))
	})
}

// FlowInstanceDataIDEQ applies the EQ predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDNEQ applies the NEQ predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDNEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDIn applies the In predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowInstanceDataID), v...))
	})
}

// FlowInstanceDataIDNotIn applies the NotIn predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDNotIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowInstanceDataID), v...))
	})
}

// FlowInstanceDataIDGT applies the GT predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDGT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDGTE applies the GTE predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDGTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDLT applies the LT predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDLT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDLTE applies the LTE predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDLTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDContains applies the Contains predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDContains(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDHasPrefix applies the HasPrefix predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDHasPrefix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDHasSuffix applies the HasSuffix predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDHasSuffix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDIsNil applies the IsNil predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDIsNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlowInstanceDataID)))
	})
}

// FlowInstanceDataIDNotNil applies the NotNil predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDNotNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlowInstanceDataID)))
	})
}

// FlowInstanceDataIDEqualFold applies the EqualFold predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDEqualFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowInstanceDataID), v))
	})
}

// FlowInstanceDataIDContainsFold applies the ContainsFold predicate on the "flow_instance_data_id" field.
func FlowInstanceDataIDContainsFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowInstanceDataID), v))
	})
}

// NodeKeyEQ applies the EQ predicate on the "node_key" field.
func NodeKeyEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeKey), v))
	})
}

// NodeKeyNEQ applies the NEQ predicate on the "node_key" field.
func NodeKeyNEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeKey), v))
	})
}

// NodeKeyIn applies the In predicate on the "node_key" field.
func NodeKeyIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeKey), v...))
	})
}

// NodeKeyNotIn applies the NotIn predicate on the "node_key" field.
func NodeKeyNotIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeKey), v...))
	})
}

// NodeKeyGT applies the GT predicate on the "node_key" field.
func NodeKeyGT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeKey), v))
	})
}

// NodeKeyGTE applies the GTE predicate on the "node_key" field.
func NodeKeyGTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeKey), v))
	})
}

// NodeKeyLT applies the LT predicate on the "node_key" field.
func NodeKeyLT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeKey), v))
	})
}

// NodeKeyLTE applies the LTE predicate on the "node_key" field.
func NodeKeyLTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeKey), v))
	})
}

// NodeKeyContains applies the Contains predicate on the "node_key" field.
func NodeKeyContains(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeKey), v))
	})
}

// NodeKeyHasPrefix applies the HasPrefix predicate on the "node_key" field.
func NodeKeyHasPrefix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeKey), v))
	})
}

// NodeKeyHasSuffix applies the HasSuffix predicate on the "node_key" field.
func NodeKeyHasSuffix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeKey), v))
	})
}

// NodeKeyEqualFold applies the EqualFold predicate on the "node_key" field.
func NodeKeyEqualFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeKey), v))
	})
}

// NodeKeyContainsFold applies the ContainsFold predicate on the "node_key" field.
func NodeKeyContainsFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeKey), v))
	})
}

// SourceNodeKeyEQ applies the EQ predicate on the "source_node_key" field.
func SourceNodeKeyEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyNEQ applies the NEQ predicate on the "source_node_key" field.
func SourceNodeKeyNEQ(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyIn applies the In predicate on the "source_node_key" field.
func SourceNodeKeyIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceNodeKey), v...))
	})
}

// SourceNodeKeyNotIn applies the NotIn predicate on the "source_node_key" field.
func SourceNodeKeyNotIn(vs ...string) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceNodeKey), v...))
	})
}

// SourceNodeKeyGT applies the GT predicate on the "source_node_key" field.
func SourceNodeKeyGT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyGTE applies the GTE predicate on the "source_node_key" field.
func SourceNodeKeyGTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyLT applies the LT predicate on the "source_node_key" field.
func SourceNodeKeyLT(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyLTE applies the LTE predicate on the "source_node_key" field.
func SourceNodeKeyLTE(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyContains applies the Contains predicate on the "source_node_key" field.
func SourceNodeKeyContains(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyHasPrefix applies the HasPrefix predicate on the "source_node_key" field.
func SourceNodeKeyHasPrefix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyHasSuffix applies the HasSuffix predicate on the "source_node_key" field.
func SourceNodeKeyHasSuffix(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyIsNil applies the IsNil predicate on the "source_node_key" field.
func SourceNodeKeyIsNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceNodeKey)))
	})
}

// SourceNodeKeyNotNil applies the NotNil predicate on the "source_node_key" field.
func SourceNodeKeyNotNil() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceNodeKey)))
	})
}

// SourceNodeKeyEqualFold applies the EqualFold predicate on the "source_node_key" field.
func SourceNodeKeyEqualFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceNodeKey), v))
	})
}

// SourceNodeKeyContainsFold applies the ContainsFold predicate on the "source_node_key" field.
func SourceNodeKeyContainsFold(v string) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceNodeKey), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.FlowNodeInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasFlowInstance applies the HasEdge predicate on the "flow_instance" edge.
func HasFlowInstance() predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowInstanceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlowInstanceTable, FlowInstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlowInstanceWith applies the HasEdge predicate on the "flow_instance" edge with a given conditions (other predicates).
func HasFlowInstanceWith(preds ...predicate.FlowInstance) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowInstanceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlowInstanceTable, FlowInstanceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FlowNodeInstance) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FlowNodeInstance) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FlowNodeInstance) predicate.FlowNodeInstance {
	return predicate.FlowNodeInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
