// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdefinition"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdeployment"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// FlowDefinitionQuery is the builder for querying FlowDefinition entities.
type FlowDefinitionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.FlowDefinition
	// eager-loading edges.
	withFlowDeployments *FlowDeploymentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FlowDefinitionQuery builder.
func (fdq *FlowDefinitionQuery) Where(ps ...predicate.FlowDefinition) *FlowDefinitionQuery {
	fdq.predicates = append(fdq.predicates, ps...)
	return fdq
}

// Limit adds a limit step to the query.
func (fdq *FlowDefinitionQuery) Limit(limit int) *FlowDefinitionQuery {
	fdq.limit = &limit
	return fdq
}

// Offset adds an offset step to the query.
func (fdq *FlowDefinitionQuery) Offset(offset int) *FlowDefinitionQuery {
	fdq.offset = &offset
	return fdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fdq *FlowDefinitionQuery) Unique(unique bool) *FlowDefinitionQuery {
	fdq.unique = &unique
	return fdq
}

// Order adds an order step to the query.
func (fdq *FlowDefinitionQuery) Order(o ...OrderFunc) *FlowDefinitionQuery {
	fdq.order = append(fdq.order, o...)
	return fdq
}

// QueryFlowDeployments chains the current query on the "flow_deployments" edge.
func (fdq *FlowDefinitionQuery) QueryFlowDeployments() *FlowDeploymentQuery {
	query := &FlowDeploymentQuery{config: fdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdefinition.Table, flowdefinition.FieldID, selector),
			sqlgraph.To(flowdeployment.Table, flowdeployment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowdefinition.FlowDeploymentsTable, flowdefinition.FlowDeploymentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FlowDefinition entity from the query.
// Returns a *NotFoundError when no FlowDefinition was found.
func (fdq *FlowDefinitionQuery) First(ctx context.Context) (*FlowDefinition, error) {
	nodes, err := fdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{flowdefinition.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) FirstX(ctx context.Context) *FlowDefinition {
	node, err := fdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FlowDefinition ID from the query.
// Returns a *NotFoundError when no FlowDefinition ID was found.
func (fdq *FlowDefinitionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{flowdefinition.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) FirstIDX(ctx context.Context) string {
	id, err := fdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FlowDefinition entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FlowDefinition entity is found.
// Returns a *NotFoundError when no FlowDefinition entities are found.
func (fdq *FlowDefinitionQuery) Only(ctx context.Context) (*FlowDefinition, error) {
	nodes, err := fdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{flowdefinition.Label}
	default:
		return nil, &NotSingularError{flowdefinition.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) OnlyX(ctx context.Context) *FlowDefinition {
	node, err := fdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FlowDefinition ID in the query.
// Returns a *NotSingularError when more than one FlowDefinition ID is found.
// Returns a *NotFoundError when no entities are found.
func (fdq *FlowDefinitionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{flowdefinition.Label}
	default:
		err = &NotSingularError{flowdefinition.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) OnlyIDX(ctx context.Context) string {
	id, err := fdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FlowDefinitions.
func (fdq *FlowDefinitionQuery) All(ctx context.Context) ([]*FlowDefinition, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return fdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) AllX(ctx context.Context) []*FlowDefinition {
	nodes, err := fdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FlowDefinition IDs.
func (fdq *FlowDefinitionQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := fdq.Select(flowdefinition.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) IDsX(ctx context.Context) []string {
	ids, err := fdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fdq *FlowDefinitionQuery) Count(ctx context.Context) (int, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return fdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) CountX(ctx context.Context) int {
	count, err := fdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fdq *FlowDefinitionQuery) Exist(ctx context.Context) (bool, error) {
	if err := fdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return fdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (fdq *FlowDefinitionQuery) ExistX(ctx context.Context) bool {
	exist, err := fdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FlowDefinitionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fdq *FlowDefinitionQuery) Clone() *FlowDefinitionQuery {
	if fdq == nil {
		return nil
	}
	return &FlowDefinitionQuery{
		config:              fdq.config,
		limit:               fdq.limit,
		offset:              fdq.offset,
		order:               append([]OrderFunc{}, fdq.order...),
		predicates:          append([]predicate.FlowDefinition{}, fdq.predicates...),
		withFlowDeployments: fdq.withFlowDeployments.Clone(),
		// clone intermediate query.
		sql:    fdq.sql.Clone(),
		path:   fdq.path,
		unique: fdq.unique,
	}
}

// WithFlowDeployments tells the query-builder to eager-load the nodes that are connected to
// the "flow_deployments" edge. The optional arguments are used to configure the query builder of the edge.
func (fdq *FlowDefinitionQuery) WithFlowDeployments(opts ...func(*FlowDeploymentQuery)) *FlowDefinitionQuery {
	query := &FlowDeploymentQuery{config: fdq.config}
	for _, opt := range opts {
		opt(query)
	}
	fdq.withFlowDeployments = query
	return fdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FlowDefinition.Query().
//		GroupBy(flowdefinition.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (fdq *FlowDefinitionQuery) GroupBy(field string, fields ...string) *FlowDefinitionGroupBy {
	grbuild := &FlowDefinitionGroupBy{config: fdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := fdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return fdq.sqlQuery(ctx), nil
	}
	grbuild.label = flowdefinition.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt int64 `json:"created_at,omitempty"`
//	}
//
//	client.FlowDefinition.Query().
//		Select(flowdefinition.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (fdq *FlowDefinitionQuery) Select(fields ...string) *FlowDefinitionSelect {
	fdq.fields = append(fdq.fields, fields...)
	selbuild := &FlowDefinitionSelect{FlowDefinitionQuery: fdq}
	selbuild.label = flowdefinition.Label
	selbuild.flds, selbuild.scan = &fdq.fields, selbuild.Scan
	return selbuild
}

func (fdq *FlowDefinitionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range fdq.fields {
		if !flowdefinition.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fdq.path != nil {
		prev, err := fdq.path(ctx)
		if err != nil {
			return err
		}
		fdq.sql = prev
	}
	return nil
}

func (fdq *FlowDefinitionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FlowDefinition, error) {
	var (
		nodes       = []*FlowDefinition{}
		_spec       = fdq.querySpec()
		loadedTypes = [1]bool{
			fdq.withFlowDeployments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*FlowDefinition).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &FlowDefinition{config: fdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := fdq.withFlowDeployments; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*FlowDefinition)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.FlowDeployments = []*FlowDeployment{}
		}
		query.Where(predicate.FlowDeployment(func(s *sql.Selector) {
			s.Where(sql.InValues(flowdefinition.FlowDeploymentsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.FlowDefinitionID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_definition_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.FlowDeployments = append(node.Edges.FlowDeployments, n)
		}
	}

	return nodes, nil
}

func (fdq *FlowDefinitionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fdq.querySpec()
	_spec.Node.Columns = fdq.fields
	if len(fdq.fields) > 0 {
		_spec.Unique = fdq.unique != nil && *fdq.unique
	}
	return sqlgraph.CountNodes(ctx, fdq.driver, _spec)
}

func (fdq *FlowDefinitionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := fdq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (fdq *FlowDefinitionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flowdefinition.Table,
			Columns: flowdefinition.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowdefinition.FieldID,
			},
		},
		From:   fdq.sql,
		Unique: true,
	}
	if unique := fdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := fdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flowdefinition.FieldID)
		for i := range fields {
			if fields[i] != flowdefinition.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fdq *FlowDefinitionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fdq.driver.Dialect())
	t1 := builder.Table(flowdefinition.Table)
	columns := fdq.fields
	if len(columns) == 0 {
		columns = flowdefinition.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fdq.sql != nil {
		selector = fdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fdq.unique != nil && *fdq.unique {
		selector.Distinct()
	}
	for _, p := range fdq.predicates {
		p(selector)
	}
	for _, p := range fdq.order {
		p(selector)
	}
	if offset := fdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FlowDefinitionGroupBy is the group-by builder for FlowDefinition entities.
type FlowDefinitionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fdgb *FlowDefinitionGroupBy) Aggregate(fns ...AggregateFunc) *FlowDefinitionGroupBy {
	fdgb.fns = append(fdgb.fns, fns...)
	return fdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (fdgb *FlowDefinitionGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := fdgb.path(ctx)
	if err != nil {
		return err
	}
	fdgb.sql = query
	return fdgb.sqlScan(ctx, v)
}

func (fdgb *FlowDefinitionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range fdgb.fields {
		if !flowdefinition.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := fdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (fdgb *FlowDefinitionGroupBy) sqlQuery() *sql.Selector {
	selector := fdgb.sql.Select()
	aggregation := make([]string, 0, len(fdgb.fns))
	for _, fn := range fdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(fdgb.fields)+len(fdgb.fns))
		for _, f := range fdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(fdgb.fields...)...)
}

// FlowDefinitionSelect is the builder for selecting fields of FlowDefinition entities.
type FlowDefinitionSelect struct {
	*FlowDefinitionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (fds *FlowDefinitionSelect) Scan(ctx context.Context, v interface{}) error {
	if err := fds.prepareQuery(ctx); err != nil {
		return err
	}
	fds.sql = fds.FlowDefinitionQuery.sqlQuery(ctx)
	return fds.sqlScan(ctx, v)
}

func (fds *FlowDefinitionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := fds.sql.Query()
	if err := fds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
