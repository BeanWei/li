// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdefinition"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdeployment"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/schema"
)

// FlowDeploymentCreate is the builder for creating a FlowDeployment entity.
type FlowDeploymentCreate struct {
	config
	mutation *FlowDeploymentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fdc *FlowDeploymentCreate) SetCreatedAt(i int64) *FlowDeploymentCreate {
	fdc.mutation.SetCreatedAt(i)
	return fdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableCreatedAt(i *int64) *FlowDeploymentCreate {
	if i != nil {
		fdc.SetCreatedAt(*i)
	}
	return fdc
}

// SetUpdatedAt sets the "updated_at" field.
func (fdc *FlowDeploymentCreate) SetUpdatedAt(i int64) *FlowDeploymentCreate {
	fdc.mutation.SetUpdatedAt(i)
	return fdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableUpdatedAt(i *int64) *FlowDeploymentCreate {
	if i != nil {
		fdc.SetUpdatedAt(*i)
	}
	return fdc
}

// SetDeletedAt sets the "deleted_at" field.
func (fdc *FlowDeploymentCreate) SetDeletedAt(i int64) *FlowDeploymentCreate {
	fdc.mutation.SetDeletedAt(i)
	return fdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableDeletedAt(i *int64) *FlowDeploymentCreate {
	if i != nil {
		fdc.SetDeletedAt(*i)
	}
	return fdc
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (fdc *FlowDeploymentCreate) SetFlowDefinitionID(s string) *FlowDeploymentCreate {
	fdc.mutation.SetFlowDefinitionID(s)
	return fdc
}

// SetName sets the "name" field.
func (fdc *FlowDeploymentCreate) SetName(s string) *FlowDeploymentCreate {
	fdc.mutation.SetName(s)
	return fdc
}

// SetStatus sets the "status" field.
func (fdc *FlowDeploymentCreate) SetStatus(i int8) *FlowDeploymentCreate {
	fdc.mutation.SetStatus(i)
	return fdc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableStatus(i *int8) *FlowDeploymentCreate {
	if i != nil {
		fdc.SetStatus(*i)
	}
	return fdc
}

// SetModel sets the "model" field.
func (fdc *FlowDeploymentCreate) SetModel(sm schema.FlowModel) *FlowDeploymentCreate {
	fdc.mutation.SetModel(sm)
	return fdc
}

// SetRemark sets the "remark" field.
func (fdc *FlowDeploymentCreate) SetRemark(s string) *FlowDeploymentCreate {
	fdc.mutation.SetRemark(s)
	return fdc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableRemark(s *string) *FlowDeploymentCreate {
	if s != nil {
		fdc.SetRemark(*s)
	}
	return fdc
}

// SetID sets the "id" field.
func (fdc *FlowDeploymentCreate) SetID(s string) *FlowDeploymentCreate {
	fdc.mutation.SetID(s)
	return fdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fdc *FlowDeploymentCreate) SetNillableID(s *string) *FlowDeploymentCreate {
	if s != nil {
		fdc.SetID(*s)
	}
	return fdc
}

// SetFlowDefinition sets the "flow_definition" edge to the FlowDefinition entity.
func (fdc *FlowDeploymentCreate) SetFlowDefinition(f *FlowDefinition) *FlowDeploymentCreate {
	return fdc.SetFlowDefinitionID(f.ID)
}

// AddFlowInstanceIDs adds the "flow_instances" edge to the FlowInstance entity by IDs.
func (fdc *FlowDeploymentCreate) AddFlowInstanceIDs(ids ...string) *FlowDeploymentCreate {
	fdc.mutation.AddFlowInstanceIDs(ids...)
	return fdc
}

// AddFlowInstances adds the "flow_instances" edges to the FlowInstance entity.
func (fdc *FlowDeploymentCreate) AddFlowInstances(f ...*FlowInstance) *FlowDeploymentCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fdc.AddFlowInstanceIDs(ids...)
}

// Mutation returns the FlowDeploymentMutation object of the builder.
func (fdc *FlowDeploymentCreate) Mutation() *FlowDeploymentMutation {
	return fdc.mutation
}

// Save creates the FlowDeployment in the database.
func (fdc *FlowDeploymentCreate) Save(ctx context.Context) (*FlowDeployment, error) {
	var (
		err  error
		node *FlowDeployment
	)
	fdc.defaults()
	if len(fdc.hooks) == 0 {
		if err = fdc.check(); err != nil {
			return nil, err
		}
		node, err = fdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowDeploymentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdc.check(); err != nil {
				return nil, err
			}
			fdc.mutation = mutation
			if node, err = fdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fdc.hooks) - 1; i >= 0; i-- {
			if fdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FlowDeploymentCreate) SaveX(ctx context.Context) *FlowDeployment {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FlowDeploymentCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FlowDeploymentCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fdc *FlowDeploymentCreate) defaults() {
	if _, ok := fdc.mutation.CreatedAt(); !ok {
		v := flowdeployment.DefaultCreatedAt()
		fdc.mutation.SetCreatedAt(v)
	}
	if _, ok := fdc.mutation.UpdatedAt(); !ok {
		v := flowdeployment.DefaultUpdatedAt()
		fdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fdc.mutation.DeletedAt(); !ok {
		v := flowdeployment.DefaultDeletedAt
		fdc.mutation.SetDeletedAt(v)
	}
	if _, ok := fdc.mutation.Status(); !ok {
		v := flowdeployment.DefaultStatus
		fdc.mutation.SetStatus(v)
	}
	if _, ok := fdc.mutation.Remark(); !ok {
		v := flowdeployment.DefaultRemark
		fdc.mutation.SetRemark(v)
	}
	if _, ok := fdc.mutation.ID(); !ok {
		v := flowdeployment.DefaultID()
		fdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FlowDeploymentCreate) check() error {
	if _, ok := fdc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlowDeployment.created_at"`)}
	}
	if _, ok := fdc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlowDeployment.updated_at"`)}
	}
	if _, ok := fdc.mutation.FlowDefinitionID(); !ok {
		return &ValidationError{Name: "flow_definition_id", err: errors.New(`ent: missing required field "FlowDeployment.flow_definition_id"`)}
	}
	if v, ok := fdc.mutation.FlowDefinitionID(); ok {
		if err := flowdeployment.FlowDefinitionIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_definition_id", err: fmt.Errorf(`ent: validator failed for field "FlowDeployment.flow_definition_id": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FlowDeployment.name"`)}
	}
	if v, ok := fdc.mutation.Name(); ok {
		if err := flowdeployment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "FlowDeployment.name": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FlowDeployment.status"`)}
	}
	if _, ok := fdc.mutation.Model(); !ok {
		return &ValidationError{Name: "model", err: errors.New(`ent: missing required field "FlowDeployment.model"`)}
	}
	if v, ok := fdc.mutation.ID(); ok {
		if err := flowdeployment.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FlowDeployment.id": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.FlowDefinitionID(); !ok {
		return &ValidationError{Name: "flow_definition", err: errors.New(`ent: missing required edge "FlowDeployment.flow_definition"`)}
	}
	return nil
}

func (fdc *FlowDeploymentCreate) sqlSave(ctx context.Context) (*FlowDeployment, error) {
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FlowDeployment.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (fdc *FlowDeploymentCreate) createSpec() (*FlowDeployment, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowDeployment{config: fdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flowdeployment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowdeployment.FieldID,
			},
		}
	)
	_spec.OnConflict = fdc.conflict
	if id, ok := fdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fdc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowdeployment.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fdc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowdeployment.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fdc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowdeployment.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fdc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowdeployment.FieldName,
		})
		_node.Name = value
	}
	if value, ok := fdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowdeployment.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := fdc.mutation.Model(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: flowdeployment.FieldModel,
		})
		_node.Model = value
	}
	if value, ok := fdc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowdeployment.FieldRemark,
		})
		_node.Remark = value
	}
	if nodes := fdc.mutation.FlowDefinitionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowdeployment.FlowDefinitionTable,
			Columns: []string{flowdeployment.FlowDefinitionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdefinition.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FlowDefinitionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fdc.mutation.FlowInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowdeployment.FlowInstancesTable,
			Columns: []string{flowdeployment.FlowInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowDeployment.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowDeploymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fdc *FlowDeploymentCreate) OnConflict(opts ...sql.ConflictOption) *FlowDeploymentUpsertOne {
	fdc.conflict = opts
	return &FlowDeploymentUpsertOne{
		create: fdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowDeployment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fdc *FlowDeploymentCreate) OnConflictColumns(columns ...string) *FlowDeploymentUpsertOne {
	fdc.conflict = append(fdc.conflict, sql.ConflictColumns(columns...))
	return &FlowDeploymentUpsertOne{
		create: fdc,
	}
}

type (
	// FlowDeploymentUpsertOne is the builder for "upsert"-ing
	//  one FlowDeployment node.
	FlowDeploymentUpsertOne struct {
		create *FlowDeploymentCreate
	}

	// FlowDeploymentUpsert is the "OnConflict" setter.
	FlowDeploymentUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FlowDeploymentUpsert) SetCreatedAt(v int64) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateCreatedAt() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowDeploymentUpsert) AddCreatedAt(v int64) *FlowDeploymentUpsert {
	u.Add(flowdeployment.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowDeploymentUpsert) SetUpdatedAt(v int64) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateUpdatedAt() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowDeploymentUpsert) AddUpdatedAt(v int64) *FlowDeploymentUpsert {
	u.Add(flowdeployment.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowDeploymentUpsert) SetDeletedAt(v int64) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateDeletedAt() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowDeploymentUpsert) AddDeletedAt(v int64) *FlowDeploymentUpsert {
	u.Add(flowdeployment.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowDeploymentUpsert) ClearDeletedAt() *FlowDeploymentUpsert {
	u.SetNull(flowdeployment.FieldDeletedAt)
	return u
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (u *FlowDeploymentUpsert) SetFlowDefinitionID(v string) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldFlowDefinitionID, v)
	return u
}

// UpdateFlowDefinitionID sets the "flow_definition_id" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateFlowDefinitionID() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldFlowDefinitionID)
	return u
}

// SetName sets the "name" field.
func (u *FlowDeploymentUpsert) SetName(v string) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateName() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *FlowDeploymentUpsert) SetStatus(v int8) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateStatus() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FlowDeploymentUpsert) AddStatus(v int8) *FlowDeploymentUpsert {
	u.Add(flowdeployment.FieldStatus, v)
	return u
}

// SetModel sets the "model" field.
func (u *FlowDeploymentUpsert) SetModel(v schema.FlowModel) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateModel() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldModel)
	return u
}

// SetRemark sets the "remark" field.
func (u *FlowDeploymentUpsert) SetRemark(v string) *FlowDeploymentUpsert {
	u.Set(flowdeployment.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FlowDeploymentUpsert) UpdateRemark() *FlowDeploymentUpsert {
	u.SetExcluded(flowdeployment.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *FlowDeploymentUpsert) ClearRemark() *FlowDeploymentUpsert {
	u.SetNull(flowdeployment.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FlowDeployment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flowdeployment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowDeploymentUpsertOne) UpdateNewValues() *FlowDeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(flowdeployment.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(flowdeployment.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FlowDeployment.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FlowDeploymentUpsertOne) Ignore() *FlowDeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowDeploymentUpsertOne) DoNothing() *FlowDeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowDeploymentCreate.OnConflict
// documentation for more info.
func (u *FlowDeploymentUpsertOne) Update(set func(*FlowDeploymentUpsert)) *FlowDeploymentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowDeploymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowDeploymentUpsertOne) SetCreatedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowDeploymentUpsertOne) AddCreatedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateCreatedAt() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowDeploymentUpsertOne) SetUpdatedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowDeploymentUpsertOne) AddUpdatedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateUpdatedAt() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowDeploymentUpsertOne) SetDeletedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowDeploymentUpsertOne) AddDeletedAt(v int64) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateDeletedAt() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowDeploymentUpsertOne) ClearDeletedAt() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (u *FlowDeploymentUpsertOne) SetFlowDefinitionID(v string) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetFlowDefinitionID(v)
	})
}

// UpdateFlowDefinitionID sets the "flow_definition_id" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateFlowDefinitionID() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateFlowDefinitionID()
	})
}

// SetName sets the "name" field.
func (u *FlowDeploymentUpsertOne) SetName(v string) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateName() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *FlowDeploymentUpsertOne) SetStatus(v int8) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowDeploymentUpsertOne) AddStatus(v int8) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateStatus() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateStatus()
	})
}

// SetModel sets the "model" field.
func (u *FlowDeploymentUpsertOne) SetModel(v schema.FlowModel) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateModel() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateModel()
	})
}

// SetRemark sets the "remark" field.
func (u *FlowDeploymentUpsertOne) SetRemark(v string) *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FlowDeploymentUpsertOne) UpdateRemark() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FlowDeploymentUpsertOne) ClearRemark() *FlowDeploymentUpsertOne {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *FlowDeploymentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowDeploymentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowDeploymentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FlowDeploymentUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FlowDeploymentUpsertOne.ID is not supported by MySQL driver. Use FlowDeploymentUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FlowDeploymentUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FlowDeploymentCreateBulk is the builder for creating many FlowDeployment entities in bulk.
type FlowDeploymentCreateBulk struct {
	config
	builders []*FlowDeploymentCreate
	conflict []sql.ConflictOption
}

// Save creates the FlowDeployment entities in the database.
func (fdcb *FlowDeploymentCreateBulk) Save(ctx context.Context) ([]*FlowDeployment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FlowDeployment, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowDeploymentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FlowDeploymentCreateBulk) SaveX(ctx context.Context) []*FlowDeployment {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FlowDeploymentCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FlowDeploymentCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowDeployment.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowDeploymentUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fdcb *FlowDeploymentCreateBulk) OnConflict(opts ...sql.ConflictOption) *FlowDeploymentUpsertBulk {
	fdcb.conflict = opts
	return &FlowDeploymentUpsertBulk{
		create: fdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowDeployment.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fdcb *FlowDeploymentCreateBulk) OnConflictColumns(columns ...string) *FlowDeploymentUpsertBulk {
	fdcb.conflict = append(fdcb.conflict, sql.ConflictColumns(columns...))
	return &FlowDeploymentUpsertBulk{
		create: fdcb,
	}
}

// FlowDeploymentUpsertBulk is the builder for "upsert"-ing
// a bulk of FlowDeployment nodes.
type FlowDeploymentUpsertBulk struct {
	create *FlowDeploymentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FlowDeployment.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flowdeployment.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowDeploymentUpsertBulk) UpdateNewValues() *FlowDeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(flowdeployment.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(flowdeployment.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FlowDeployment.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FlowDeploymentUpsertBulk) Ignore() *FlowDeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowDeploymentUpsertBulk) DoNothing() *FlowDeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowDeploymentCreateBulk.OnConflict
// documentation for more info.
func (u *FlowDeploymentUpsertBulk) Update(set func(*FlowDeploymentUpsert)) *FlowDeploymentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowDeploymentUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowDeploymentUpsertBulk) SetCreatedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowDeploymentUpsertBulk) AddCreatedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateCreatedAt() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowDeploymentUpsertBulk) SetUpdatedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowDeploymentUpsertBulk) AddUpdatedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateUpdatedAt() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowDeploymentUpsertBulk) SetDeletedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowDeploymentUpsertBulk) AddDeletedAt(v int64) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateDeletedAt() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowDeploymentUpsertBulk) ClearDeletedAt() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowDefinitionID sets the "flow_definition_id" field.
func (u *FlowDeploymentUpsertBulk) SetFlowDefinitionID(v string) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetFlowDefinitionID(v)
	})
}

// UpdateFlowDefinitionID sets the "flow_definition_id" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateFlowDefinitionID() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateFlowDefinitionID()
	})
}

// SetName sets the "name" field.
func (u *FlowDeploymentUpsertBulk) SetName(v string) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateName() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *FlowDeploymentUpsertBulk) SetStatus(v int8) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowDeploymentUpsertBulk) AddStatus(v int8) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateStatus() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateStatus()
	})
}

// SetModel sets the "model" field.
func (u *FlowDeploymentUpsertBulk) SetModel(v schema.FlowModel) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateModel() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateModel()
	})
}

// SetRemark sets the "remark" field.
func (u *FlowDeploymentUpsertBulk) SetRemark(v string) *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *FlowDeploymentUpsertBulk) UpdateRemark() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *FlowDeploymentUpsertBulk) ClearRemark() *FlowDeploymentUpsertBulk {
	return u.Update(func(s *FlowDeploymentUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *FlowDeploymentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FlowDeploymentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowDeploymentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowDeploymentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
