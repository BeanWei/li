// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BeanWei/li/li-engine/ac"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstancelog"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/schema"
	"github.com/BeanWei/li/li-engine/view"
	"github.com/BeanWei/li/li-engine/view/node"
	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/errors/gerror"
)

// FlowNodeInstanceLog is the model entity for the FlowNodeInstanceLog schema.
type FlowNodeInstanceLog struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int64 `json:"-"`
	// FlowInstanceID holds the value of the "flow_instance_id" field.
	// 流程执行实例ID
	FlowInstanceID string `json:"flow_instance_id,omitempty"`
	// FlowNodeInstanceID holds the value of the "flow_node_instance_id" field.
	// 节点执行实例ID
	FlowNodeInstanceID string `json:"flow_node_instance_id,omitempty"`
	// FlowInstanceDataID holds the value of the "flow_instance_data_id" field.
	// 实例数据ID
	FlowInstanceDataID string `json:"flow_instance_data_id,omitempty"`
	// NodeKey holds the value of the "node_key" field.
	// 节点唯一标示
	NodeKey string `json:"node_key,omitempty"`
	// Type holds the value of the "type" field.
	// 操作类型(1.系统执行 2.任务提交 3.任务撤销)
	Type int8 `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	// '状态(1.处理成功 2.处理中 3.处理失败 4.处理已撤销)
	Status int8 `json:"status,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowNodeInstanceLog) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flownodeinstancelog.FieldCreatedAt, flownodeinstancelog.FieldUpdatedAt, flownodeinstancelog.FieldDeletedAt, flownodeinstancelog.FieldType, flownodeinstancelog.FieldStatus:
			values[i] = new(sql.NullInt64)
		case flownodeinstancelog.FieldID, flownodeinstancelog.FieldFlowInstanceID, flownodeinstancelog.FieldFlowNodeInstanceID, flownodeinstancelog.FieldFlowInstanceDataID, flownodeinstancelog.FieldNodeKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlowNodeInstanceLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowNodeInstanceLog fields.
func (fnil *FlowNodeInstanceLog) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flownodeinstancelog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fnil.ID = value.String
			}
		case flownodeinstancelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fnil.CreatedAt = value.Int64
			}
		case flownodeinstancelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fnil.UpdatedAt = value.Int64
			}
		case flownodeinstancelog.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fnil.DeletedAt = value.Int64
			}
		case flownodeinstancelog.FieldFlowInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_instance_id", values[i])
			} else if value.Valid {
				fnil.FlowInstanceID = value.String
			}
		case flownodeinstancelog.FieldFlowNodeInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_node_instance_id", values[i])
			} else if value.Valid {
				fnil.FlowNodeInstanceID = value.String
			}
		case flownodeinstancelog.FieldFlowInstanceDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_instance_data_id", values[i])
			} else if value.Valid {
				fnil.FlowInstanceDataID = value.String
			}
		case flownodeinstancelog.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				fnil.NodeKey = value.String
			}
		case flownodeinstancelog.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fnil.Type = int8(value.Int64)
			}
		case flownodeinstancelog.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fnil.Status = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FlowNodeInstanceLog.
// Note that you need to call FlowNodeInstanceLog.Unwrap() before calling this method if this FlowNodeInstanceLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (fnil *FlowNodeInstanceLog) Update() *FlowNodeInstanceLogUpdateOne {
	return (&FlowNodeInstanceLogClient{config: fnil.config}).UpdateOne(fnil)
}

// Unwrap unwraps the FlowNodeInstanceLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fnil *FlowNodeInstanceLog) Unwrap() *FlowNodeInstanceLog {
	tx, ok := fnil.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowNodeInstanceLog is not a transactional entity")
	}
	fnil.config.driver = tx.drv
	return fnil
}

// String implements the fmt.Stringer.
func (fnil *FlowNodeInstanceLog) String() string {
	var builder strings.Builder
	builder.WriteString("FlowNodeInstanceLog(")
	builder.WriteString(fmt.Sprintf("id=%v", fnil.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", fnil.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fnil.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fnil.DeletedAt))
	builder.WriteString(", flow_instance_id=")
	builder.WriteString(fnil.FlowInstanceID)
	builder.WriteString(", flow_node_instance_id=")
	builder.WriteString(fnil.FlowNodeInstanceID)
	builder.WriteString(", flow_instance_data_id=")
	builder.WriteString(fnil.FlowInstanceDataID)
	builder.WriteString(", node_key=")
	builder.WriteString(fnil.NodeKey)
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", fnil.Type))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", fnil.Status))
	builder.WriteByte(')')
	return builder.String()
}

type (
	IFlowNodeInstanceLog struct {
		ID                 string `json:"id,omitempty"`
		CreatedAt          int64  `json:"created_at,omitempty"`
		UpdatedAt          int64  `json:"updated_at,omitempty"`
		DeletedAt          int64  `json:"-"`
		FlowInstanceID     string `json:"flow_instance_id,omitempty"`
		FlowNodeInstanceID string `json:"flow_node_instance_id,omitempty"`
		FlowInstanceDataID string `json:"flow_instance_data_id,omitempty"`
		NodeKey            string `json:"node_key,omitempty"`
		Type               int8   `json:"type,omitempty"`
		Status             int8   `json:"status,omitempty"`
	}
	ListFlowNodeInstanceLogReq struct {
		Page   int                            `json:"page" d:"1" v:"min:1"`
		Limit  int                            `json:"limit" d:"20" v:"min:1|max:500"`
		Query  string                         `json:"query"`
		Filter *ListFlowNodeInstanceLogFilter `json:"filter"`
		Sorter *ListFlowNodeInstanceLogSorter `json:"sorter"`
	}
	ListFlowNodeInstanceLogFilter struct {
	}
	ListFlowNodeInstanceLogSorter struct {
	}
	ListFlowNodeInstanceLogRes struct {
		List  []*IFlowNodeInstanceLog `json:"list"`
		Total int                     `json:"total"`
	}
	CreateFlowNodeInstanceLogReq struct {
	}
	GetFlowNodeInstanceLogReq struct {
		ID string `json:"id" v:"required"`
	}
	UpdateFlowNodeInstanceLogReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteFlowNodeInstanceLogReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteManyFlowNodeInstanceLogReq struct {
		IDs []string `json:"ids" v:"required"`
	}
)

func NewIFlowNodeInstanceLog(e *FlowNodeInstanceLog) *IFlowNodeInstanceLog {
	if e == nil {
		return nil
	}
	return &IFlowNodeInstanceLog{
		ID:                 e.ID,
		CreatedAt:          e.CreatedAt,
		UpdatedAt:          e.UpdatedAt,
		DeletedAt:          e.DeletedAt,
		FlowInstanceID:     e.FlowInstanceID,
		FlowNodeInstanceID: e.FlowNodeInstanceID,
		FlowInstanceDataID: e.FlowInstanceDataID,
		NodeKey:            e.NodeKey,
		Type:               e.Type,
		Status:             e.Status,
	}
}

func NewIFlowNodeInstanceLogArray(es []*FlowNodeInstanceLog) []*IFlowNodeInstanceLog {
	if len(es) == 0 {
		return nil
	}
	r := make([]*IFlowNodeInstanceLog, len(es))
	for i, e := range es {
		r[i] = NewIFlowNodeInstanceLog(e)
	}
	return r
}

func ListFlowNodeInstanceLogController(ctx context.Context, req *ListFlowNodeInstanceLogReq) (res *ListFlowNodeInstanceLogRes, err error) {
	q := DB().FlowNodeInstanceLog.Query()
	if req.Filter != nil {
	}
	res = &ListFlowNodeInstanceLogRes{}
	res.Total, err = q.Count(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	ret, err := q.Limit(req.Limit).Offset((req.Page - 1) * req.Limit).All(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	res.List = NewIFlowNodeInstanceLogArray(ret)
	return res, nil
}

func CreateFlowNodeInstanceLogController(ctx context.Context, req *CreateFlowNodeInstanceLogReq) (err error) {
	b := DB().FlowNodeInstanceLog.Create()
	err = b.Exec(ctx)
	if err != nil {
		if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func GetFlowNodeInstanceLogController(ctx context.Context, req *GetFlowNodeInstanceLogReq) (res *IFlowNodeInstanceLog, err error) {
	ret, err := DB().FlowNodeInstanceLog.
		Query().
		Where(flownodeinstancelog.IDEQ(req.ID)).
		Only(ctx)
	if err != nil {
		if IsNotFound(err) {
			return nil, gerror.WrapCode(gcode.CodeNotFound, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewIFlowNodeInstanceLog(ret), nil
}

func UpdateFlowNodeInstanceLogController(ctx context.Context, req *UpdateFlowNodeInstanceLogReq) (err error) {
	b := DB().FlowNodeInstanceLog.UpdateOneID(req.ID)
	err = b.Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteFlowNodeInstanceLogController(ctx context.Context, req *DeleteFlowNodeInstanceLogReq) (err error) {
	err = DB().FlowNodeInstanceLog.DeleteOneID(req.ID).Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteManyFlowNodeInstanceLogController(ctx context.Context, req *DeleteManyFlowNodeInstanceLogReq) (err error) {
	_, err = DB().FlowNodeInstanceLog.Delete().Where(flownodeinstancelog.IDIn(req.IDs...)).Exec(ctx)
	if err != nil {
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func CreateFlowNodeInstanceLogFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ReadFlowNodeInstanceLogFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func UpdateFlowNodeInstanceLogFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ListFlowNodeInstanceLogTableColumns() []view.Node {
	return []view.Node{}
}

func ListFlowNodeInstanceLogView() view.Node {
	return node.List("flownodeinstancelogList").
		AC(flownodeinstancelogViewACL["list:FlowNodeInstanceLog"]).
		ForInit("@listFlowNodeInstanceLog", ListFlowNodeInstanceLogController).
		DecoratorCard().
		EnableFilter().
		SelectionMultiple(true).
		Children(
			node.ListTable("flownodeinstancelogListTable").
				ActionBar(
					node.ListAction("flownodeinstancelogListActions").Children(
						node.ListActionRecordFormDrawer("addFlowNodeInstanceLog").
							Title("addNew").
							AC(flownodeinstancelogViewACL["create:FlowNodeInstanceLog"]).
							ButtonType("primary").
							ButtonIcon("IconPlus").
							ButtonPosition("left").
							Body(CreateFlowNodeInstanceLogFormView()).
							Footer(
								node.ActionFormDrawerCancel("cancel"),
								node.ActionFormDrawerSubmit("submit").ForSubmit("@addFlowNodeInstanceLog", CreateFlowNodeInstanceLogController),
							),
						node.ListActionRowSelection("deleteManyFlowNodeInstanceLog").
							Title("bulkDelete").
							AC(flownodeinstancelogViewACL["deleteMany:FlowNodeInstanceLog"]).
							ForSubmit("@deleteManyFlowNodeInstanceLog", DeleteManyFlowNodeInstanceLogController).
							AfterReload(true).
							ConfirmTitle("confirmDelete").
							ButtonStatus("danger").
							ButtonIcon("IconDelete").
							ButtonPosition("left"),
					),
				).
				Columns(
					append(
						ListFlowNodeInstanceLogTableColumns(),
						node.ListTableColumn("columnAction").
							Title("columnAction").
							DataIndex("__action").
							Width(150).
							Render(
								node.Space("actions").Size(0).SplitByDivider().Children(
									node.ListActionRecordFormDrawer("view").
										AC(flownodeinstancelogViewACL["get:FlowNodeInstanceLog"]).
										ForInit("@getFlowNodeInstanceLog", GetFlowNodeInstanceLogController).
										DrawerTitle("viewDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEye").
										Body(ReadFlowNodeInstanceLogFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
										),
									node.ListActionRecordFormDrawer("edit").
										AC(flownodeinstancelogViewACL["update:FlowNodeInstanceLog"]).
										ForInit("@getFlowNodeInstanceLog", GetFlowNodeInstanceLogController).
										DrawerTitle("editDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEdit").
										Body(UpdateFlowNodeInstanceLogFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
											node.ActionFormDrawerSubmit("submit").
												ForSubmit("@updateFlowNodeInstanceLog", UpdateFlowNodeInstanceLogController),
										),
									node.ListActionRecordDelete("delete").
										AC(flownodeinstancelogViewACL["delete:FlowNodeInstanceLog"]).
										ForSubmit("@deleteFlowNodeInstanceLog", DeleteFlowNodeInstanceLogController).
										ButtonType("text").
										ButtonIcon("IconDelete"),
								),
							),
					)...,
				),
		)
}

var flownodeinstancelogViewACL = map[string]ac.AC{}

func init() {
	rf := reflect.ValueOf(schema.FlowNodeInstanceLog{}).MethodByName("ACL")
	if rf.IsValid() {
		flownodeinstancelogViewACL, _ = rf.Call([]reflect.Value{})[0].Interface().(map[string]ac.AC)
	}
}

// FlowNodeInstanceLogs is a parsable slice of FlowNodeInstanceLog.
type FlowNodeInstanceLogs []*FlowNodeInstanceLog

func (fnil FlowNodeInstanceLogs) config(cfg config) {
	for _i := range fnil {
		fnil[_i].config = cfg
	}
}
