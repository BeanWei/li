// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdeployment"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
)

// FlowInstanceCreate is the builder for creating a FlowInstance entity.
type FlowInstanceCreate struct {
	config
	mutation *FlowInstanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fic *FlowInstanceCreate) SetCreatedAt(i int64) *FlowInstanceCreate {
	fic.mutation.SetCreatedAt(i)
	return fic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableCreatedAt(i *int64) *FlowInstanceCreate {
	if i != nil {
		fic.SetCreatedAt(*i)
	}
	return fic
}

// SetUpdatedAt sets the "updated_at" field.
func (fic *FlowInstanceCreate) SetUpdatedAt(i int64) *FlowInstanceCreate {
	fic.mutation.SetUpdatedAt(i)
	return fic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableUpdatedAt(i *int64) *FlowInstanceCreate {
	if i != nil {
		fic.SetUpdatedAt(*i)
	}
	return fic
}

// SetDeletedAt sets the "deleted_at" field.
func (fic *FlowInstanceCreate) SetDeletedAt(i int64) *FlowInstanceCreate {
	fic.mutation.SetDeletedAt(i)
	return fic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableDeletedAt(i *int64) *FlowInstanceCreate {
	if i != nil {
		fic.SetDeletedAt(*i)
	}
	return fic
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (fic *FlowInstanceCreate) SetFlowDeploymentID(s string) *FlowInstanceCreate {
	fic.mutation.SetFlowDeploymentID(s)
	return fic
}

// SetRefID sets the "ref_id" field.
func (fic *FlowInstanceCreate) SetRefID(s string) *FlowInstanceCreate {
	fic.mutation.SetRefID(s)
	return fic
}

// SetStatus sets the "status" field.
func (fic *FlowInstanceCreate) SetStatus(i int8) *FlowInstanceCreate {
	fic.mutation.SetStatus(i)
	return fic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableStatus(i *int8) *FlowInstanceCreate {
	if i != nil {
		fic.SetStatus(*i)
	}
	return fic
}

// SetID sets the "id" field.
func (fic *FlowInstanceCreate) SetID(s string) *FlowInstanceCreate {
	fic.mutation.SetID(s)
	return fic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fic *FlowInstanceCreate) SetNillableID(s *string) *FlowInstanceCreate {
	if s != nil {
		fic.SetID(*s)
	}
	return fic
}

// SetFlowDeployment sets the "flow_deployment" edge to the FlowDeployment entity.
func (fic *FlowInstanceCreate) SetFlowDeployment(f *FlowDeployment) *FlowInstanceCreate {
	return fic.SetFlowDeploymentID(f.ID)
}

// AddFlowNodeInstanceIDs adds the "flow_node_instances" edge to the FlowNodeInstance entity by IDs.
func (fic *FlowInstanceCreate) AddFlowNodeInstanceIDs(ids ...string) *FlowInstanceCreate {
	fic.mutation.AddFlowNodeInstanceIDs(ids...)
	return fic
}

// AddFlowNodeInstances adds the "flow_node_instances" edges to the FlowNodeInstance entity.
func (fic *FlowInstanceCreate) AddFlowNodeInstances(f ...*FlowNodeInstance) *FlowInstanceCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fic.AddFlowNodeInstanceIDs(ids...)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fic *FlowInstanceCreate) Mutation() *FlowInstanceMutation {
	return fic.mutation
}

// Save creates the FlowInstance in the database.
func (fic *FlowInstanceCreate) Save(ctx context.Context) (*FlowInstance, error) {
	var (
		err  error
		node *FlowInstance
	)
	fic.defaults()
	if len(fic.hooks) == 0 {
		if err = fic.check(); err != nil {
			return nil, err
		}
		node, err = fic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fic.check(); err != nil {
				return nil, err
			}
			fic.mutation = mutation
			if node, err = fic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fic.hooks) - 1; i >= 0; i-- {
			if fic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FlowInstanceCreate) SaveX(ctx context.Context) *FlowInstance {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FlowInstanceCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FlowInstanceCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FlowInstanceCreate) defaults() {
	if _, ok := fic.mutation.CreatedAt(); !ok {
		v := flowinstance.DefaultCreatedAt()
		fic.mutation.SetCreatedAt(v)
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		v := flowinstance.DefaultUpdatedAt()
		fic.mutation.SetUpdatedAt(v)
	}
	if _, ok := fic.mutation.DeletedAt(); !ok {
		v := flowinstance.DefaultDeletedAt
		fic.mutation.SetDeletedAt(v)
	}
	if _, ok := fic.mutation.Status(); !ok {
		v := flowinstance.DefaultStatus
		fic.mutation.SetStatus(v)
	}
	if _, ok := fic.mutation.ID(); !ok {
		v := flowinstance.DefaultID()
		fic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FlowInstanceCreate) check() error {
	if _, ok := fic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlowInstance.created_at"`)}
	}
	if _, ok := fic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlowInstance.updated_at"`)}
	}
	if _, ok := fic.mutation.FlowDeploymentID(); !ok {
		return &ValidationError{Name: "flow_deployment_id", err: errors.New(`ent: missing required field "FlowInstance.flow_deployment_id"`)}
	}
	if v, ok := fic.mutation.FlowDeploymentID(); ok {
		if err := flowinstance.FlowDeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_deployment_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_deployment_id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.RefID(); !ok {
		return &ValidationError{Name: "ref_id", err: errors.New(`ent: missing required field "FlowInstance.ref_id"`)}
	}
	if v, ok := fic.mutation.RefID(); ok {
		if err := flowinstance.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ref_id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FlowInstance.status"`)}
	}
	if v, ok := fic.mutation.ID(); ok {
		if err := flowinstance.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.id": %w`, err)}
		}
	}
	if _, ok := fic.mutation.FlowDeploymentID(); !ok {
		return &ValidationError{Name: "flow_deployment", err: errors.New(`ent: missing required edge "FlowInstance.flow_deployment"`)}
	}
	return nil
}

func (fic *FlowInstanceCreate) sqlSave(ctx context.Context) (*FlowInstance, error) {
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FlowInstance.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (fic *FlowInstanceCreate) createSpec() (*FlowInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowInstance{config: fic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flowinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowinstance.FieldID,
			},
		}
	)
	_spec.OnConflict = fic.conflict
	if id, ok := fic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fic.mutation.RefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstance.FieldRefID,
		})
		_node.RefID = value
	}
	if value, ok := fic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstance.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := fic.mutation.FlowDeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowinstance.FlowDeploymentTable,
			Columns: []string{flowinstance.FlowDeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdeployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FlowDeploymentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.FlowNodeInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowInstance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowInstanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fic *FlowInstanceCreate) OnConflict(opts ...sql.ConflictOption) *FlowInstanceUpsertOne {
	fic.conflict = opts
	return &FlowInstanceUpsertOne{
		create: fic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fic *FlowInstanceCreate) OnConflictColumns(columns ...string) *FlowInstanceUpsertOne {
	fic.conflict = append(fic.conflict, sql.ConflictColumns(columns...))
	return &FlowInstanceUpsertOne{
		create: fic,
	}
}

type (
	// FlowInstanceUpsertOne is the builder for "upsert"-ing
	//  one FlowInstance node.
	FlowInstanceUpsertOne struct {
		create *FlowInstanceCreate
	}

	// FlowInstanceUpsert is the "OnConflict" setter.
	FlowInstanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FlowInstanceUpsert) SetCreatedAt(v int64) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateCreatedAt() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowInstanceUpsert) AddCreatedAt(v int64) *FlowInstanceUpsert {
	u.Add(flowinstance.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowInstanceUpsert) SetUpdatedAt(v int64) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateUpdatedAt() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowInstanceUpsert) AddUpdatedAt(v int64) *FlowInstanceUpsert {
	u.Add(flowinstance.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowInstanceUpsert) SetDeletedAt(v int64) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateDeletedAt() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowInstanceUpsert) AddDeletedAt(v int64) *FlowInstanceUpsert {
	u.Add(flowinstance.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowInstanceUpsert) ClearDeletedAt() *FlowInstanceUpsert {
	u.SetNull(flowinstance.FieldDeletedAt)
	return u
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (u *FlowInstanceUpsert) SetFlowDeploymentID(v string) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldFlowDeploymentID, v)
	return u
}

// UpdateFlowDeploymentID sets the "flow_deployment_id" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateFlowDeploymentID() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldFlowDeploymentID)
	return u
}

// SetRefID sets the "ref_id" field.
func (u *FlowInstanceUpsert) SetRefID(v string) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldRefID, v)
	return u
}

// UpdateRefID sets the "ref_id" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateRefID() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldRefID)
	return u
}

// SetStatus sets the "status" field.
func (u *FlowInstanceUpsert) SetStatus(v int8) *FlowInstanceUpsert {
	u.Set(flowinstance.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowInstanceUpsert) UpdateStatus() *FlowInstanceUpsert {
	u.SetExcluded(flowinstance.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FlowInstanceUpsert) AddStatus(v int8) *FlowInstanceUpsert {
	u.Add(flowinstance.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FlowInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flowinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowInstanceUpsertOne) UpdateNewValues() *FlowInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(flowinstance.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(flowinstance.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FlowInstance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FlowInstanceUpsertOne) Ignore() *FlowInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowInstanceUpsertOne) DoNothing() *FlowInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowInstanceCreate.OnConflict
// documentation for more info.
func (u *FlowInstanceUpsertOne) Update(set func(*FlowInstanceUpsert)) *FlowInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowInstanceUpsertOne) SetCreatedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowInstanceUpsertOne) AddCreatedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateCreatedAt() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowInstanceUpsertOne) SetUpdatedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowInstanceUpsertOne) AddUpdatedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateUpdatedAt() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowInstanceUpsertOne) SetDeletedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowInstanceUpsertOne) AddDeletedAt(v int64) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateDeletedAt() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowInstanceUpsertOne) ClearDeletedAt() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (u *FlowInstanceUpsertOne) SetFlowDeploymentID(v string) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetFlowDeploymentID(v)
	})
}

// UpdateFlowDeploymentID sets the "flow_deployment_id" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateFlowDeploymentID() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateFlowDeploymentID()
	})
}

// SetRefID sets the "ref_id" field.
func (u *FlowInstanceUpsertOne) SetRefID(v string) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetRefID(v)
	})
}

// UpdateRefID sets the "ref_id" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateRefID() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateRefID()
	})
}

// SetStatus sets the "status" field.
func (u *FlowInstanceUpsertOne) SetStatus(v int8) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowInstanceUpsertOne) AddStatus(v int8) *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowInstanceUpsertOne) UpdateStatus() *FlowInstanceUpsertOne {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowInstanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowInstanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowInstanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FlowInstanceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FlowInstanceUpsertOne.ID is not supported by MySQL driver. Use FlowInstanceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FlowInstanceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FlowInstanceCreateBulk is the builder for creating many FlowInstance entities in bulk.
type FlowInstanceCreateBulk struct {
	config
	builders []*FlowInstanceCreate
	conflict []sql.ConflictOption
}

// Save creates the FlowInstance entities in the database.
func (ficb *FlowInstanceCreateBulk) Save(ctx context.Context) ([]*FlowInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FlowInstance, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ficb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FlowInstanceCreateBulk) SaveX(ctx context.Context) []*FlowInstance {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FlowInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FlowInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowInstance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowInstanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (ficb *FlowInstanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *FlowInstanceUpsertBulk {
	ficb.conflict = opts
	return &FlowInstanceUpsertBulk{
		create: ficb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ficb *FlowInstanceCreateBulk) OnConflictColumns(columns ...string) *FlowInstanceUpsertBulk {
	ficb.conflict = append(ficb.conflict, sql.ConflictColumns(columns...))
	return &FlowInstanceUpsertBulk{
		create: ficb,
	}
}

// FlowInstanceUpsertBulk is the builder for "upsert"-ing
// a bulk of FlowInstance nodes.
type FlowInstanceUpsertBulk struct {
	create *FlowInstanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FlowInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flowinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowInstanceUpsertBulk) UpdateNewValues() *FlowInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(flowinstance.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(flowinstance.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FlowInstance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FlowInstanceUpsertBulk) Ignore() *FlowInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowInstanceUpsertBulk) DoNothing() *FlowInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowInstanceCreateBulk.OnConflict
// documentation for more info.
func (u *FlowInstanceUpsertBulk) Update(set func(*FlowInstanceUpsert)) *FlowInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowInstanceUpsertBulk) SetCreatedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowInstanceUpsertBulk) AddCreatedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateCreatedAt() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowInstanceUpsertBulk) SetUpdatedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowInstanceUpsertBulk) AddUpdatedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateUpdatedAt() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowInstanceUpsertBulk) SetDeletedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowInstanceUpsertBulk) AddDeletedAt(v int64) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateDeletedAt() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowInstanceUpsertBulk) ClearDeletedAt() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (u *FlowInstanceUpsertBulk) SetFlowDeploymentID(v string) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetFlowDeploymentID(v)
	})
}

// UpdateFlowDeploymentID sets the "flow_deployment_id" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateFlowDeploymentID() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateFlowDeploymentID()
	})
}

// SetRefID sets the "ref_id" field.
func (u *FlowInstanceUpsertBulk) SetRefID(v string) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetRefID(v)
	})
}

// UpdateRefID sets the "ref_id" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateRefID() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateRefID()
	})
}

// SetStatus sets the "status" field.
func (u *FlowInstanceUpsertBulk) SetStatus(v int8) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowInstanceUpsertBulk) AddStatus(v int8) *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowInstanceUpsertBulk) UpdateStatus() *FlowInstanceUpsertBulk {
	return u.Update(func(s *FlowInstanceUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowInstanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FlowInstanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowInstanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowInstanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
