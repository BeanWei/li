// Code generated by entc, DO NOT EDIT.

package flowinstance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// FlowDeploymentID applies equality check predicate on the "flow_deployment_id" field. It's identical to FlowDeploymentIDEQ.
func FlowDeploymentID(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowDeploymentID), v))
	})
}

// RefID applies equality check predicate on the "ref_id" field. It's identical to RefIDEQ.
func RefID(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...int64) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v int64) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// FlowDeploymentIDEQ applies the EQ predicate on the "flow_deployment_id" field.
func FlowDeploymentIDEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDNEQ applies the NEQ predicate on the "flow_deployment_id" field.
func FlowDeploymentIDNEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDIn applies the In predicate on the "flow_deployment_id" field.
func FlowDeploymentIDIn(vs ...string) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowDeploymentID), v...))
	})
}

// FlowDeploymentIDNotIn applies the NotIn predicate on the "flow_deployment_id" field.
func FlowDeploymentIDNotIn(vs ...string) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowDeploymentID), v...))
	})
}

// FlowDeploymentIDGT applies the GT predicate on the "flow_deployment_id" field.
func FlowDeploymentIDGT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDGTE applies the GTE predicate on the "flow_deployment_id" field.
func FlowDeploymentIDGTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDLT applies the LT predicate on the "flow_deployment_id" field.
func FlowDeploymentIDLT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDLTE applies the LTE predicate on the "flow_deployment_id" field.
func FlowDeploymentIDLTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDContains applies the Contains predicate on the "flow_deployment_id" field.
func FlowDeploymentIDContains(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDHasPrefix applies the HasPrefix predicate on the "flow_deployment_id" field.
func FlowDeploymentIDHasPrefix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDHasSuffix applies the HasSuffix predicate on the "flow_deployment_id" field.
func FlowDeploymentIDHasSuffix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDEqualFold applies the EqualFold predicate on the "flow_deployment_id" field.
func FlowDeploymentIDEqualFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFlowDeploymentID), v))
	})
}

// FlowDeploymentIDContainsFold applies the ContainsFold predicate on the "flow_deployment_id" field.
func FlowDeploymentIDContainsFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFlowDeploymentID), v))
	})
}

// RefIDEQ applies the EQ predicate on the "ref_id" field.
func RefIDEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// RefIDNEQ applies the NEQ predicate on the "ref_id" field.
func RefIDNEQ(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefID), v))
	})
}

// RefIDIn applies the In predicate on the "ref_id" field.
func RefIDIn(vs ...string) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefID), v...))
	})
}

// RefIDNotIn applies the NotIn predicate on the "ref_id" field.
func RefIDNotIn(vs ...string) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefID), v...))
	})
}

// RefIDGT applies the GT predicate on the "ref_id" field.
func RefIDGT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefID), v))
	})
}

// RefIDGTE applies the GTE predicate on the "ref_id" field.
func RefIDGTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefID), v))
	})
}

// RefIDLT applies the LT predicate on the "ref_id" field.
func RefIDLT(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefID), v))
	})
}

// RefIDLTE applies the LTE predicate on the "ref_id" field.
func RefIDLTE(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefID), v))
	})
}

// RefIDContains applies the Contains predicate on the "ref_id" field.
func RefIDContains(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefID), v))
	})
}

// RefIDHasPrefix applies the HasPrefix predicate on the "ref_id" field.
func RefIDHasPrefix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefID), v))
	})
}

// RefIDHasSuffix applies the HasSuffix predicate on the "ref_id" field.
func RefIDHasSuffix(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefID), v))
	})
}

// RefIDEqualFold applies the EqualFold predicate on the "ref_id" field.
func RefIDEqualFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefID), v))
	})
}

// RefIDContainsFold applies the ContainsFold predicate on the "ref_id" field.
func RefIDContainsFold(v string) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefID), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.FlowInstance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FlowInstance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasFlowDeployment applies the HasEdge predicate on the "flow_deployment" edge.
func HasFlowDeployment() predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowDeploymentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlowDeploymentTable, FlowDeploymentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlowDeploymentWith applies the HasEdge predicate on the "flow_deployment" edge with a given conditions (other predicates).
func HasFlowDeploymentWith(preds ...predicate.FlowDeployment) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowDeploymentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FlowDeploymentTable, FlowDeploymentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFlowNodeInstances applies the HasEdge predicate on the "flow_node_instances" edge.
func HasFlowNodeInstances() predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowNodeInstancesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlowNodeInstancesTable, FlowNodeInstancesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFlowNodeInstancesWith applies the HasEdge predicate on the "flow_node_instances" edge with a given conditions (other predicates).
func HasFlowNodeInstancesWith(preds ...predicate.FlowNodeInstance) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FlowNodeInstancesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FlowNodeInstancesTable, FlowNodeInstancesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FlowInstance) predicate.FlowInstance {
	return predicate.FlowInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
