// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/migrate"

	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdefinition"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdeployment"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstancedata"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstancelog"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FlowDefinition is the client for interacting with the FlowDefinition builders.
	FlowDefinition *FlowDefinitionClient
	// FlowDeployment is the client for interacting with the FlowDeployment builders.
	FlowDeployment *FlowDeploymentClient
	// FlowInstance is the client for interacting with the FlowInstance builders.
	FlowInstance *FlowInstanceClient
	// FlowInstanceData is the client for interacting with the FlowInstanceData builders.
	FlowInstanceData *FlowInstanceDataClient
	// FlowNodeInstance is the client for interacting with the FlowNodeInstance builders.
	FlowNodeInstance *FlowNodeInstanceClient
	// FlowNodeInstanceLog is the client for interacting with the FlowNodeInstanceLog builders.
	FlowNodeInstanceLog *FlowNodeInstanceLogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FlowDefinition = NewFlowDefinitionClient(c.config)
	c.FlowDeployment = NewFlowDeploymentClient(c.config)
	c.FlowInstance = NewFlowInstanceClient(c.config)
	c.FlowInstanceData = NewFlowInstanceDataClient(c.config)
	c.FlowNodeInstance = NewFlowNodeInstanceClient(c.config)
	c.FlowNodeInstanceLog = NewFlowNodeInstanceLogClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		FlowDefinition:      NewFlowDefinitionClient(cfg),
		FlowDeployment:      NewFlowDeploymentClient(cfg),
		FlowInstance:        NewFlowInstanceClient(cfg),
		FlowInstanceData:    NewFlowInstanceDataClient(cfg),
		FlowNodeInstance:    NewFlowNodeInstanceClient(cfg),
		FlowNodeInstanceLog: NewFlowNodeInstanceLogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		FlowDefinition:      NewFlowDefinitionClient(cfg),
		FlowDeployment:      NewFlowDeploymentClient(cfg),
		FlowInstance:        NewFlowInstanceClient(cfg),
		FlowInstanceData:    NewFlowInstanceDataClient(cfg),
		FlowNodeInstance:    NewFlowNodeInstanceClient(cfg),
		FlowNodeInstanceLog: NewFlowNodeInstanceLogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FlowDefinition.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FlowDefinition.Use(hooks...)
	c.FlowDeployment.Use(hooks...)
	c.FlowInstance.Use(hooks...)
	c.FlowInstanceData.Use(hooks...)
	c.FlowNodeInstance.Use(hooks...)
	c.FlowNodeInstanceLog.Use(hooks...)
}

// FlowDefinitionClient is a client for the FlowDefinition schema.
type FlowDefinitionClient struct {
	config
}

// NewFlowDefinitionClient returns a client for the FlowDefinition from the given config.
func NewFlowDefinitionClient(c config) *FlowDefinitionClient {
	return &FlowDefinitionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowdefinition.Hooks(f(g(h())))`.
func (c *FlowDefinitionClient) Use(hooks ...Hook) {
	c.hooks.FlowDefinition = append(c.hooks.FlowDefinition, hooks...)
}

// Create returns a create builder for FlowDefinition.
func (c *FlowDefinitionClient) Create() *FlowDefinitionCreate {
	mutation := newFlowDefinitionMutation(c.config, OpCreate)
	return &FlowDefinitionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowDefinition entities.
func (c *FlowDefinitionClient) CreateBulk(builders ...*FlowDefinitionCreate) *FlowDefinitionCreateBulk {
	return &FlowDefinitionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowDefinition.
func (c *FlowDefinitionClient) Update() *FlowDefinitionUpdate {
	mutation := newFlowDefinitionMutation(c.config, OpUpdate)
	return &FlowDefinitionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowDefinitionClient) UpdateOne(fd *FlowDefinition) *FlowDefinitionUpdateOne {
	mutation := newFlowDefinitionMutation(c.config, OpUpdateOne, withFlowDefinition(fd))
	return &FlowDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowDefinitionClient) UpdateOneID(id string) *FlowDefinitionUpdateOne {
	mutation := newFlowDefinitionMutation(c.config, OpUpdateOne, withFlowDefinitionID(id))
	return &FlowDefinitionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowDefinition.
func (c *FlowDefinitionClient) Delete() *FlowDefinitionDelete {
	mutation := newFlowDefinitionMutation(c.config, OpDelete)
	return &FlowDefinitionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowDefinitionClient) DeleteOne(fd *FlowDefinition) *FlowDefinitionDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowDefinitionClient) DeleteOneID(id string) *FlowDefinitionDeleteOne {
	builder := c.Delete().Where(flowdefinition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowDefinitionDeleteOne{builder}
}

// Query returns a query builder for FlowDefinition.
func (c *FlowDefinitionClient) Query() *FlowDefinitionQuery {
	return &FlowDefinitionQuery{
		config: c.config,
	}
}

// Get returns a FlowDefinition entity by its id.
func (c *FlowDefinitionClient) Get(ctx context.Context, id string) (*FlowDefinition, error) {
	return c.Query().Where(flowdefinition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowDefinitionClient) GetX(ctx context.Context, id string) *FlowDefinition {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlowDeployments queries the flow_deployments edge of a FlowDefinition.
func (c *FlowDefinitionClient) QueryFlowDeployments(fd *FlowDefinition) *FlowDeploymentQuery {
	query := &FlowDeploymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdefinition.Table, flowdefinition.FieldID, id),
			sqlgraph.To(flowdeployment.Table, flowdeployment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowdefinition.FlowDeploymentsTable, flowdefinition.FlowDeploymentsColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowDefinitionClient) Hooks() []Hook {
	return c.hooks.FlowDefinition
}

// FlowDeploymentClient is a client for the FlowDeployment schema.
type FlowDeploymentClient struct {
	config
}

// NewFlowDeploymentClient returns a client for the FlowDeployment from the given config.
func NewFlowDeploymentClient(c config) *FlowDeploymentClient {
	return &FlowDeploymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowdeployment.Hooks(f(g(h())))`.
func (c *FlowDeploymentClient) Use(hooks ...Hook) {
	c.hooks.FlowDeployment = append(c.hooks.FlowDeployment, hooks...)
}

// Create returns a create builder for FlowDeployment.
func (c *FlowDeploymentClient) Create() *FlowDeploymentCreate {
	mutation := newFlowDeploymentMutation(c.config, OpCreate)
	return &FlowDeploymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowDeployment entities.
func (c *FlowDeploymentClient) CreateBulk(builders ...*FlowDeploymentCreate) *FlowDeploymentCreateBulk {
	return &FlowDeploymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowDeployment.
func (c *FlowDeploymentClient) Update() *FlowDeploymentUpdate {
	mutation := newFlowDeploymentMutation(c.config, OpUpdate)
	return &FlowDeploymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowDeploymentClient) UpdateOne(fd *FlowDeployment) *FlowDeploymentUpdateOne {
	mutation := newFlowDeploymentMutation(c.config, OpUpdateOne, withFlowDeployment(fd))
	return &FlowDeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowDeploymentClient) UpdateOneID(id string) *FlowDeploymentUpdateOne {
	mutation := newFlowDeploymentMutation(c.config, OpUpdateOne, withFlowDeploymentID(id))
	return &FlowDeploymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowDeployment.
func (c *FlowDeploymentClient) Delete() *FlowDeploymentDelete {
	mutation := newFlowDeploymentMutation(c.config, OpDelete)
	return &FlowDeploymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowDeploymentClient) DeleteOne(fd *FlowDeployment) *FlowDeploymentDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowDeploymentClient) DeleteOneID(id string) *FlowDeploymentDeleteOne {
	builder := c.Delete().Where(flowdeployment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowDeploymentDeleteOne{builder}
}

// Query returns a query builder for FlowDeployment.
func (c *FlowDeploymentClient) Query() *FlowDeploymentQuery {
	return &FlowDeploymentQuery{
		config: c.config,
	}
}

// Get returns a FlowDeployment entity by its id.
func (c *FlowDeploymentClient) Get(ctx context.Context, id string) (*FlowDeployment, error) {
	return c.Query().Where(flowdeployment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowDeploymentClient) GetX(ctx context.Context, id string) *FlowDeployment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlowDefinition queries the flow_definition edge of a FlowDeployment.
func (c *FlowDeploymentClient) QueryFlowDefinition(fd *FlowDeployment) *FlowDefinitionQuery {
	query := &FlowDefinitionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdeployment.Table, flowdeployment.FieldID, id),
			sqlgraph.To(flowdefinition.Table, flowdefinition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, flowdeployment.FlowDefinitionTable, flowdeployment.FlowDefinitionColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowInstances queries the flow_instances edge of a FlowDeployment.
func (c *FlowDeploymentClient) QueryFlowInstances(fd *FlowDeployment) *FlowInstanceQuery {
	query := &FlowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowdeployment.Table, flowdeployment.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowdeployment.FlowInstancesTable, flowdeployment.FlowInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowDeploymentClient) Hooks() []Hook {
	return c.hooks.FlowDeployment
}

// FlowInstanceClient is a client for the FlowInstance schema.
type FlowInstanceClient struct {
	config
}

// NewFlowInstanceClient returns a client for the FlowInstance from the given config.
func NewFlowInstanceClient(c config) *FlowInstanceClient {
	return &FlowInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowinstance.Hooks(f(g(h())))`.
func (c *FlowInstanceClient) Use(hooks ...Hook) {
	c.hooks.FlowInstance = append(c.hooks.FlowInstance, hooks...)
}

// Create returns a create builder for FlowInstance.
func (c *FlowInstanceClient) Create() *FlowInstanceCreate {
	mutation := newFlowInstanceMutation(c.config, OpCreate)
	return &FlowInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowInstance entities.
func (c *FlowInstanceClient) CreateBulk(builders ...*FlowInstanceCreate) *FlowInstanceCreateBulk {
	return &FlowInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowInstance.
func (c *FlowInstanceClient) Update() *FlowInstanceUpdate {
	mutation := newFlowInstanceMutation(c.config, OpUpdate)
	return &FlowInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowInstanceClient) UpdateOne(fi *FlowInstance) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstance(fi))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowInstanceClient) UpdateOneID(id string) *FlowInstanceUpdateOne {
	mutation := newFlowInstanceMutation(c.config, OpUpdateOne, withFlowInstanceID(id))
	return &FlowInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowInstance.
func (c *FlowInstanceClient) Delete() *FlowInstanceDelete {
	mutation := newFlowInstanceMutation(c.config, OpDelete)
	return &FlowInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowInstanceClient) DeleteOne(fi *FlowInstance) *FlowInstanceDeleteOne {
	return c.DeleteOneID(fi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowInstanceClient) DeleteOneID(id string) *FlowInstanceDeleteOne {
	builder := c.Delete().Where(flowinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowInstanceDeleteOne{builder}
}

// Query returns a query builder for FlowInstance.
func (c *FlowInstanceClient) Query() *FlowInstanceQuery {
	return &FlowInstanceQuery{
		config: c.config,
	}
}

// Get returns a FlowInstance entity by its id.
func (c *FlowInstanceClient) Get(ctx context.Context, id string) (*FlowInstance, error) {
	return c.Query().Where(flowinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowInstanceClient) GetX(ctx context.Context, id string) *FlowInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlowDeployment queries the flow_deployment edge of a FlowInstance.
func (c *FlowInstanceClient) QueryFlowDeployment(fi *FlowInstance) *FlowDeploymentQuery {
	query := &FlowDeploymentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(flowdeployment.Table, flowdeployment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, flowinstance.FlowDeploymentTable, flowinstance.FlowDeploymentColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFlowNodeInstances queries the flow_node_instances edge of a FlowInstance.
func (c *FlowInstanceClient) QueryFlowNodeInstances(fi *FlowInstance) *FlowNodeInstanceQuery {
	query := &FlowNodeInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flowinstance.Table, flowinstance.FieldID, id),
			sqlgraph.To(flownodeinstance.Table, flownodeinstance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, flowinstance.FlowNodeInstancesTable, flowinstance.FlowNodeInstancesColumn),
		)
		fromV = sqlgraph.Neighbors(fi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowInstanceClient) Hooks() []Hook {
	return c.hooks.FlowInstance
}

// FlowInstanceDataClient is a client for the FlowInstanceData schema.
type FlowInstanceDataClient struct {
	config
}

// NewFlowInstanceDataClient returns a client for the FlowInstanceData from the given config.
func NewFlowInstanceDataClient(c config) *FlowInstanceDataClient {
	return &FlowInstanceDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flowinstancedata.Hooks(f(g(h())))`.
func (c *FlowInstanceDataClient) Use(hooks ...Hook) {
	c.hooks.FlowInstanceData = append(c.hooks.FlowInstanceData, hooks...)
}

// Create returns a create builder for FlowInstanceData.
func (c *FlowInstanceDataClient) Create() *FlowInstanceDataCreate {
	mutation := newFlowInstanceDataMutation(c.config, OpCreate)
	return &FlowInstanceDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowInstanceData entities.
func (c *FlowInstanceDataClient) CreateBulk(builders ...*FlowInstanceDataCreate) *FlowInstanceDataCreateBulk {
	return &FlowInstanceDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowInstanceData.
func (c *FlowInstanceDataClient) Update() *FlowInstanceDataUpdate {
	mutation := newFlowInstanceDataMutation(c.config, OpUpdate)
	return &FlowInstanceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowInstanceDataClient) UpdateOne(fid *FlowInstanceData) *FlowInstanceDataUpdateOne {
	mutation := newFlowInstanceDataMutation(c.config, OpUpdateOne, withFlowInstanceData(fid))
	return &FlowInstanceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowInstanceDataClient) UpdateOneID(id string) *FlowInstanceDataUpdateOne {
	mutation := newFlowInstanceDataMutation(c.config, OpUpdateOne, withFlowInstanceDataID(id))
	return &FlowInstanceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowInstanceData.
func (c *FlowInstanceDataClient) Delete() *FlowInstanceDataDelete {
	mutation := newFlowInstanceDataMutation(c.config, OpDelete)
	return &FlowInstanceDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowInstanceDataClient) DeleteOne(fid *FlowInstanceData) *FlowInstanceDataDeleteOne {
	return c.DeleteOneID(fid.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowInstanceDataClient) DeleteOneID(id string) *FlowInstanceDataDeleteOne {
	builder := c.Delete().Where(flowinstancedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowInstanceDataDeleteOne{builder}
}

// Query returns a query builder for FlowInstanceData.
func (c *FlowInstanceDataClient) Query() *FlowInstanceDataQuery {
	return &FlowInstanceDataQuery{
		config: c.config,
	}
}

// Get returns a FlowInstanceData entity by its id.
func (c *FlowInstanceDataClient) Get(ctx context.Context, id string) (*FlowInstanceData, error) {
	return c.Query().Where(flowinstancedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowInstanceDataClient) GetX(ctx context.Context, id string) *FlowInstanceData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FlowInstanceDataClient) Hooks() []Hook {
	return c.hooks.FlowInstanceData
}

// FlowNodeInstanceClient is a client for the FlowNodeInstance schema.
type FlowNodeInstanceClient struct {
	config
}

// NewFlowNodeInstanceClient returns a client for the FlowNodeInstance from the given config.
func NewFlowNodeInstanceClient(c config) *FlowNodeInstanceClient {
	return &FlowNodeInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flownodeinstance.Hooks(f(g(h())))`.
func (c *FlowNodeInstanceClient) Use(hooks ...Hook) {
	c.hooks.FlowNodeInstance = append(c.hooks.FlowNodeInstance, hooks...)
}

// Create returns a create builder for FlowNodeInstance.
func (c *FlowNodeInstanceClient) Create() *FlowNodeInstanceCreate {
	mutation := newFlowNodeInstanceMutation(c.config, OpCreate)
	return &FlowNodeInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowNodeInstance entities.
func (c *FlowNodeInstanceClient) CreateBulk(builders ...*FlowNodeInstanceCreate) *FlowNodeInstanceCreateBulk {
	return &FlowNodeInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowNodeInstance.
func (c *FlowNodeInstanceClient) Update() *FlowNodeInstanceUpdate {
	mutation := newFlowNodeInstanceMutation(c.config, OpUpdate)
	return &FlowNodeInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowNodeInstanceClient) UpdateOne(fni *FlowNodeInstance) *FlowNodeInstanceUpdateOne {
	mutation := newFlowNodeInstanceMutation(c.config, OpUpdateOne, withFlowNodeInstance(fni))
	return &FlowNodeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowNodeInstanceClient) UpdateOneID(id string) *FlowNodeInstanceUpdateOne {
	mutation := newFlowNodeInstanceMutation(c.config, OpUpdateOne, withFlowNodeInstanceID(id))
	return &FlowNodeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowNodeInstance.
func (c *FlowNodeInstanceClient) Delete() *FlowNodeInstanceDelete {
	mutation := newFlowNodeInstanceMutation(c.config, OpDelete)
	return &FlowNodeInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowNodeInstanceClient) DeleteOne(fni *FlowNodeInstance) *FlowNodeInstanceDeleteOne {
	return c.DeleteOneID(fni.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowNodeInstanceClient) DeleteOneID(id string) *FlowNodeInstanceDeleteOne {
	builder := c.Delete().Where(flownodeinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowNodeInstanceDeleteOne{builder}
}

// Query returns a query builder for FlowNodeInstance.
func (c *FlowNodeInstanceClient) Query() *FlowNodeInstanceQuery {
	return &FlowNodeInstanceQuery{
		config: c.config,
	}
}

// Get returns a FlowNodeInstance entity by its id.
func (c *FlowNodeInstanceClient) Get(ctx context.Context, id string) (*FlowNodeInstance, error) {
	return c.Query().Where(flownodeinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowNodeInstanceClient) GetX(ctx context.Context, id string) *FlowNodeInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFlowInstance queries the flow_instance edge of a FlowNodeInstance.
func (c *FlowNodeInstanceClient) QueryFlowInstance(fni *FlowNodeInstance) *FlowInstanceQuery {
	query := &FlowInstanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := fni.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(flownodeinstance.Table, flownodeinstance.FieldID, id),
			sqlgraph.To(flowinstance.Table, flowinstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, flownodeinstance.FlowInstanceTable, flownodeinstance.FlowInstanceColumn),
		)
		fromV = sqlgraph.Neighbors(fni.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FlowNodeInstanceClient) Hooks() []Hook {
	return c.hooks.FlowNodeInstance
}

// FlowNodeInstanceLogClient is a client for the FlowNodeInstanceLog schema.
type FlowNodeInstanceLogClient struct {
	config
}

// NewFlowNodeInstanceLogClient returns a client for the FlowNodeInstanceLog from the given config.
func NewFlowNodeInstanceLogClient(c config) *FlowNodeInstanceLogClient {
	return &FlowNodeInstanceLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `flownodeinstancelog.Hooks(f(g(h())))`.
func (c *FlowNodeInstanceLogClient) Use(hooks ...Hook) {
	c.hooks.FlowNodeInstanceLog = append(c.hooks.FlowNodeInstanceLog, hooks...)
}

// Create returns a create builder for FlowNodeInstanceLog.
func (c *FlowNodeInstanceLogClient) Create() *FlowNodeInstanceLogCreate {
	mutation := newFlowNodeInstanceLogMutation(c.config, OpCreate)
	return &FlowNodeInstanceLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FlowNodeInstanceLog entities.
func (c *FlowNodeInstanceLogClient) CreateBulk(builders ...*FlowNodeInstanceLogCreate) *FlowNodeInstanceLogCreateBulk {
	return &FlowNodeInstanceLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FlowNodeInstanceLog.
func (c *FlowNodeInstanceLogClient) Update() *FlowNodeInstanceLogUpdate {
	mutation := newFlowNodeInstanceLogMutation(c.config, OpUpdate)
	return &FlowNodeInstanceLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FlowNodeInstanceLogClient) UpdateOne(fnil *FlowNodeInstanceLog) *FlowNodeInstanceLogUpdateOne {
	mutation := newFlowNodeInstanceLogMutation(c.config, OpUpdateOne, withFlowNodeInstanceLog(fnil))
	return &FlowNodeInstanceLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FlowNodeInstanceLogClient) UpdateOneID(id string) *FlowNodeInstanceLogUpdateOne {
	mutation := newFlowNodeInstanceLogMutation(c.config, OpUpdateOne, withFlowNodeInstanceLogID(id))
	return &FlowNodeInstanceLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FlowNodeInstanceLog.
func (c *FlowNodeInstanceLogClient) Delete() *FlowNodeInstanceLogDelete {
	mutation := newFlowNodeInstanceLogMutation(c.config, OpDelete)
	return &FlowNodeInstanceLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FlowNodeInstanceLogClient) DeleteOne(fnil *FlowNodeInstanceLog) *FlowNodeInstanceLogDeleteOne {
	return c.DeleteOneID(fnil.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FlowNodeInstanceLogClient) DeleteOneID(id string) *FlowNodeInstanceLogDeleteOne {
	builder := c.Delete().Where(flownodeinstancelog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FlowNodeInstanceLogDeleteOne{builder}
}

// Query returns a query builder for FlowNodeInstanceLog.
func (c *FlowNodeInstanceLogClient) Query() *FlowNodeInstanceLogQuery {
	return &FlowNodeInstanceLogQuery{
		config: c.config,
	}
}

// Get returns a FlowNodeInstanceLog entity by its id.
func (c *FlowNodeInstanceLogClient) Get(ctx context.Context, id string) (*FlowNodeInstanceLog, error) {
	return c.Query().Where(flownodeinstancelog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FlowNodeInstanceLogClient) GetX(ctx context.Context, id string) *FlowNodeInstanceLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *FlowNodeInstanceLogClient) Hooks() []Hook {
	return c.hooks.FlowNodeInstanceLog
}
