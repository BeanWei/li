// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstancelog"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// FlowNodeInstanceLogUpdate is the builder for updating FlowNodeInstanceLog entities.
type FlowNodeInstanceLogUpdate struct {
	config
	hooks    []Hook
	mutation *FlowNodeInstanceLogMutation
}

// Where appends a list predicates to the FlowNodeInstanceLogUpdate builder.
func (fnilu *FlowNodeInstanceLogUpdate) Where(ps ...predicate.FlowNodeInstanceLog) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.Where(ps...)
	return fnilu
}

// SetUpdatedAt sets the "updated_at" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetUpdatedAt(i int64) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ResetUpdatedAt()
	fnilu.mutation.SetUpdatedAt(i)
	return fnilu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fnilu *FlowNodeInstanceLogUpdate) AddUpdatedAt(i int64) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.AddUpdatedAt(i)
	return fnilu
}

// SetDeletedAt sets the "deleted_at" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetDeletedAt(i int64) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ResetDeletedAt()
	fnilu.mutation.SetDeletedAt(i)
	return fnilu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fnilu *FlowNodeInstanceLogUpdate) SetNillableDeletedAt(i *int64) *FlowNodeInstanceLogUpdate {
	if i != nil {
		fnilu.SetDeletedAt(*i)
	}
	return fnilu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fnilu *FlowNodeInstanceLogUpdate) AddDeletedAt(i int64) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.AddDeletedAt(i)
	return fnilu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fnilu *FlowNodeInstanceLogUpdate) ClearDeletedAt() *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ClearDeletedAt()
	return fnilu
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetFlowInstanceID(s string) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.SetFlowInstanceID(s)
	return fnilu
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetFlowNodeInstanceID(s string) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.SetFlowNodeInstanceID(s)
	return fnilu
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetFlowInstanceDataID(s string) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.SetFlowInstanceDataID(s)
	return fnilu
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fnilu *FlowNodeInstanceLogUpdate) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceLogUpdate {
	if s != nil {
		fnilu.SetFlowInstanceDataID(*s)
	}
	return fnilu
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (fnilu *FlowNodeInstanceLogUpdate) ClearFlowInstanceDataID() *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ClearFlowInstanceDataID()
	return fnilu
}

// SetNodeKey sets the "node_key" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetNodeKey(s string) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.SetNodeKey(s)
	return fnilu
}

// SetType sets the "type" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetType(i int8) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ResetType()
	fnilu.mutation.SetType(i)
	return fnilu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fnilu *FlowNodeInstanceLogUpdate) SetNillableType(i *int8) *FlowNodeInstanceLogUpdate {
	if i != nil {
		fnilu.SetType(*i)
	}
	return fnilu
}

// AddType adds i to the "type" field.
func (fnilu *FlowNodeInstanceLogUpdate) AddType(i int8) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.AddType(i)
	return fnilu
}

// SetStatus sets the "status" field.
func (fnilu *FlowNodeInstanceLogUpdate) SetStatus(i int8) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.ResetStatus()
	fnilu.mutation.SetStatus(i)
	return fnilu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fnilu *FlowNodeInstanceLogUpdate) SetNillableStatus(i *int8) *FlowNodeInstanceLogUpdate {
	if i != nil {
		fnilu.SetStatus(*i)
	}
	return fnilu
}

// AddStatus adds i to the "status" field.
func (fnilu *FlowNodeInstanceLogUpdate) AddStatus(i int8) *FlowNodeInstanceLogUpdate {
	fnilu.mutation.AddStatus(i)
	return fnilu
}

// Mutation returns the FlowNodeInstanceLogMutation object of the builder.
func (fnilu *FlowNodeInstanceLogUpdate) Mutation() *FlowNodeInstanceLogMutation {
	return fnilu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fnilu *FlowNodeInstanceLogUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fnilu.defaults()
	if len(fnilu.hooks) == 0 {
		if err = fnilu.check(); err != nil {
			return 0, err
		}
		affected, err = fnilu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fnilu.check(); err != nil {
				return 0, err
			}
			fnilu.mutation = mutation
			affected, err = fnilu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fnilu.hooks) - 1; i >= 0; i-- {
			if fnilu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fnilu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fnilu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fnilu *FlowNodeInstanceLogUpdate) SaveX(ctx context.Context) int {
	affected, err := fnilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fnilu *FlowNodeInstanceLogUpdate) Exec(ctx context.Context) error {
	_, err := fnilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnilu *FlowNodeInstanceLogUpdate) ExecX(ctx context.Context) {
	if err := fnilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fnilu *FlowNodeInstanceLogUpdate) defaults() {
	if _, ok := fnilu.mutation.UpdatedAt(); !ok {
		v := flownodeinstancelog.UpdateDefaultUpdatedAt()
		fnilu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnilu *FlowNodeInstanceLogUpdate) check() error {
	if v, ok := fnilu.mutation.FlowInstanceID(); ok {
		if err := flownodeinstancelog.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_instance_id": %w`, err)}
		}
	}
	if v, ok := fnilu.mutation.FlowNodeInstanceID(); ok {
		if err := flownodeinstancelog.FlowNodeInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_node_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_node_instance_id": %w`, err)}
		}
	}
	if v, ok := fnilu.mutation.NodeKey(); ok {
		if err := flownodeinstancelog.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.node_key": %w`, err)}
		}
	}
	return nil
}

func (fnilu *FlowNodeInstanceLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flownodeinstancelog.Table,
			Columns: flownodeinstancelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstancelog.FieldID,
			},
		},
	}
	if ps := fnilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fnilu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldUpdatedAt,
		})
	}
	if value, ok := fnilu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldUpdatedAt,
		})
	}
	if value, ok := fnilu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if value, ok := fnilu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if fnilu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if value, ok := fnilu.mutation.FlowInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceID,
		})
	}
	if value, ok := fnilu.mutation.FlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowNodeInstanceID,
		})
	}
	if value, ok := fnilu.mutation.FlowInstanceDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceDataID,
		})
	}
	if fnilu.mutation.FlowInstanceDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstancelog.FieldFlowInstanceDataID,
		})
	}
	if value, ok := fnilu.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldNodeKey,
		})
	}
	if value, ok := fnilu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldType,
		})
	}
	if value, ok := fnilu.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldType,
		})
	}
	if value, ok := fnilu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldStatus,
		})
	}
	if value, ok := fnilu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fnilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flownodeinstancelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlowNodeInstanceLogUpdateOne is the builder for updating a single FlowNodeInstanceLog entity.
type FlowNodeInstanceLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlowNodeInstanceLogMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetUpdatedAt(i int64) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ResetUpdatedAt()
	fniluo.mutation.SetUpdatedAt(i)
	return fniluo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) AddUpdatedAt(i int64) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.AddUpdatedAt(i)
	return fniluo
}

// SetDeletedAt sets the "deleted_at" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetDeletedAt(i int64) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ResetDeletedAt()
	fniluo.mutation.SetDeletedAt(i)
	return fniluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetNillableDeletedAt(i *int64) *FlowNodeInstanceLogUpdateOne {
	if i != nil {
		fniluo.SetDeletedAt(*i)
	}
	return fniluo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) AddDeletedAt(i int64) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.AddDeletedAt(i)
	return fniluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) ClearDeletedAt() *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ClearDeletedAt()
	return fniluo
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetFlowInstanceID(s string) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.SetFlowInstanceID(s)
	return fniluo
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetFlowNodeInstanceID(s string) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.SetFlowNodeInstanceID(s)
	return fniluo
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetFlowInstanceDataID(s string) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.SetFlowInstanceDataID(s)
	return fniluo
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceLogUpdateOne {
	if s != nil {
		fniluo.SetFlowInstanceDataID(*s)
	}
	return fniluo
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) ClearFlowInstanceDataID() *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ClearFlowInstanceDataID()
	return fniluo
}

// SetNodeKey sets the "node_key" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetNodeKey(s string) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.SetNodeKey(s)
	return fniluo
}

// SetType sets the "type" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetType(i int8) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ResetType()
	fniluo.mutation.SetType(i)
	return fniluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetNillableType(i *int8) *FlowNodeInstanceLogUpdateOne {
	if i != nil {
		fniluo.SetType(*i)
	}
	return fniluo
}

// AddType adds i to the "type" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) AddType(i int8) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.AddType(i)
	return fniluo
}

// SetStatus sets the "status" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetStatus(i int8) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.ResetStatus()
	fniluo.mutation.SetStatus(i)
	return fniluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fniluo *FlowNodeInstanceLogUpdateOne) SetNillableStatus(i *int8) *FlowNodeInstanceLogUpdateOne {
	if i != nil {
		fniluo.SetStatus(*i)
	}
	return fniluo
}

// AddStatus adds i to the "status" field.
func (fniluo *FlowNodeInstanceLogUpdateOne) AddStatus(i int8) *FlowNodeInstanceLogUpdateOne {
	fniluo.mutation.AddStatus(i)
	return fniluo
}

// Mutation returns the FlowNodeInstanceLogMutation object of the builder.
func (fniluo *FlowNodeInstanceLogUpdateOne) Mutation() *FlowNodeInstanceLogMutation {
	return fniluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fniluo *FlowNodeInstanceLogUpdateOne) Select(field string, fields ...string) *FlowNodeInstanceLogUpdateOne {
	fniluo.fields = append([]string{field}, fields...)
	return fniluo
}

// Save executes the query and returns the updated FlowNodeInstanceLog entity.
func (fniluo *FlowNodeInstanceLogUpdateOne) Save(ctx context.Context) (*FlowNodeInstanceLog, error) {
	var (
		err  error
		node *FlowNodeInstanceLog
	)
	fniluo.defaults()
	if len(fniluo.hooks) == 0 {
		if err = fniluo.check(); err != nil {
			return nil, err
		}
		node, err = fniluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fniluo.check(); err != nil {
				return nil, err
			}
			fniluo.mutation = mutation
			node, err = fniluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fniluo.hooks) - 1; i >= 0; i-- {
			if fniluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fniluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fniluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fniluo *FlowNodeInstanceLogUpdateOne) SaveX(ctx context.Context) *FlowNodeInstanceLog {
	node, err := fniluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fniluo *FlowNodeInstanceLogUpdateOne) Exec(ctx context.Context) error {
	_, err := fniluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fniluo *FlowNodeInstanceLogUpdateOne) ExecX(ctx context.Context) {
	if err := fniluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fniluo *FlowNodeInstanceLogUpdateOne) defaults() {
	if _, ok := fniluo.mutation.UpdatedAt(); !ok {
		v := flownodeinstancelog.UpdateDefaultUpdatedAt()
		fniluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fniluo *FlowNodeInstanceLogUpdateOne) check() error {
	if v, ok := fniluo.mutation.FlowInstanceID(); ok {
		if err := flownodeinstancelog.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_instance_id": %w`, err)}
		}
	}
	if v, ok := fniluo.mutation.FlowNodeInstanceID(); ok {
		if err := flownodeinstancelog.FlowNodeInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_node_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_node_instance_id": %w`, err)}
		}
	}
	if v, ok := fniluo.mutation.NodeKey(); ok {
		if err := flownodeinstancelog.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.node_key": %w`, err)}
		}
	}
	return nil
}

func (fniluo *FlowNodeInstanceLogUpdateOne) sqlSave(ctx context.Context) (_node *FlowNodeInstanceLog, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flownodeinstancelog.Table,
			Columns: flownodeinstancelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstancelog.FieldID,
			},
		},
	}
	id, ok := fniluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FlowNodeInstanceLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fniluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flownodeinstancelog.FieldID)
		for _, f := range fields {
			if !flownodeinstancelog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flownodeinstancelog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fniluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fniluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldUpdatedAt,
		})
	}
	if value, ok := fniluo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldUpdatedAt,
		})
	}
	if value, ok := fniluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if value, ok := fniluo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if fniluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
	}
	if value, ok := fniluo.mutation.FlowInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceID,
		})
	}
	if value, ok := fniluo.mutation.FlowNodeInstanceID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowNodeInstanceID,
		})
	}
	if value, ok := fniluo.mutation.FlowInstanceDataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceDataID,
		})
	}
	if fniluo.mutation.FlowInstanceDataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: flownodeinstancelog.FieldFlowInstanceDataID,
		})
	}
	if value, ok := fniluo.mutation.NodeKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldNodeKey,
		})
	}
	if value, ok := fniluo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldType,
		})
	}
	if value, ok := fniluo.mutation.AddedType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldType,
		})
	}
	if value, ok := fniluo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldStatus,
		})
	}
	if value, ok := fniluo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldStatus,
		})
	}
	_node = &FlowNodeInstanceLog{config: fniluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fniluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flownodeinstancelog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
