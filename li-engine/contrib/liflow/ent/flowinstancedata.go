// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"
	"reflect"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BeanWei/li/li-engine/ac"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstancedata"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/schema"
	"github.com/BeanWei/li/li-engine/view"
	"github.com/BeanWei/li/li-engine/view/node"
	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/errors/gerror"
)

// FlowInstanceData is the model entity for the FlowInstanceData schema.
type FlowInstanceData struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int64 `json:"-"`
	// FlowInstanceID holds the value of the "flow_instance_id" field.
	// 流程执行实例ID
	FlowInstanceID string `json:"flow_instance_id,omitempty"`
	// FlowNodeInstanceID holds the value of the "flow_node_instance_id" field.
	// 节点执行实例ID
	FlowNodeInstanceID string `json:"flow_node_instance_id,omitempty"`
	// NodeKey holds the value of the "node_key" field.
	// 节点唯一标示
	NodeKey string `json:"node_key,omitempty"`
	// Data holds the value of the "data" field.
	// 数据列表json
	Data map[string]interface{} `json:"data,omitempty"`
	// Type holds the value of the "type" field.
	// 操作类型(1.实例初始化 2.系统执行 3.系统主动获取 4.上游更新 5.任务提交 6.任务撤回)
	Type int8 `json:"type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowInstanceData) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flowinstancedata.FieldData:
			values[i] = new([]byte)
		case flowinstancedata.FieldCreatedAt, flowinstancedata.FieldUpdatedAt, flowinstancedata.FieldDeletedAt, flowinstancedata.FieldType:
			values[i] = new(sql.NullInt64)
		case flowinstancedata.FieldID, flowinstancedata.FieldFlowInstanceID, flowinstancedata.FieldFlowNodeInstanceID, flowinstancedata.FieldNodeKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlowInstanceData", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowInstanceData fields.
func (fid *FlowInstanceData) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flowinstancedata.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fid.ID = value.String
			}
		case flowinstancedata.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fid.CreatedAt = value.Int64
			}
		case flowinstancedata.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fid.UpdatedAt = value.Int64
			}
		case flowinstancedata.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fid.DeletedAt = value.Int64
			}
		case flowinstancedata.FieldFlowInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_instance_id", values[i])
			} else if value.Valid {
				fid.FlowInstanceID = value.String
			}
		case flowinstancedata.FieldFlowNodeInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_node_instance_id", values[i])
			} else if value.Valid {
				fid.FlowNodeInstanceID = value.String
			}
		case flowinstancedata.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				fid.NodeKey = value.String
			}
		case flowinstancedata.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fid.Data); err != nil {
					return fmt.Errorf("unmarshal field data: %w", err)
				}
			}
		case flowinstancedata.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				fid.Type = int8(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FlowInstanceData.
// Note that you need to call FlowInstanceData.Unwrap() before calling this method if this FlowInstanceData
// was returned from a transaction, and the transaction was committed or rolled back.
func (fid *FlowInstanceData) Update() *FlowInstanceDataUpdateOne {
	return (&FlowInstanceDataClient{config: fid.config}).UpdateOne(fid)
}

// Unwrap unwraps the FlowInstanceData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fid *FlowInstanceData) Unwrap() *FlowInstanceData {
	tx, ok := fid.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowInstanceData is not a transactional entity")
	}
	fid.config.driver = tx.drv
	return fid
}

// String implements the fmt.Stringer.
func (fid *FlowInstanceData) String() string {
	var builder strings.Builder
	builder.WriteString("FlowInstanceData(")
	builder.WriteString(fmt.Sprintf("id=%v", fid.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", fid.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fid.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fid.DeletedAt))
	builder.WriteString(", flow_instance_id=")
	builder.WriteString(fid.FlowInstanceID)
	builder.WriteString(", flow_node_instance_id=")
	builder.WriteString(fid.FlowNodeInstanceID)
	builder.WriteString(", node_key=")
	builder.WriteString(fid.NodeKey)
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", fid.Data))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", fid.Type))
	builder.WriteByte(')')
	return builder.String()
}

type (
	IFlowInstanceData struct {
		ID                 string                 `json:"id,omitempty"`
		CreatedAt          int64                  `json:"created_at,omitempty"`
		UpdatedAt          int64                  `json:"updated_at,omitempty"`
		DeletedAt          int64                  `json:"-"`
		FlowInstanceID     string                 `json:"flow_instance_id,omitempty"`
		FlowNodeInstanceID string                 `json:"flow_node_instance_id,omitempty"`
		NodeKey            string                 `json:"node_key,omitempty"`
		Data               map[string]interface{} `json:"data,omitempty"`
		Type               int8                   `json:"type,omitempty"`
	}
	ListFlowInstanceDataReq struct {
		Page   int                         `json:"page" d:"1" v:"min:1"`
		Limit  int                         `json:"limit" d:"20" v:"min:1|max:500"`
		Query  string                      `json:"query"`
		Filter *ListFlowInstanceDataFilter `json:"filter"`
		Sorter *ListFlowInstanceDataSorter `json:"sorter"`
	}
	ListFlowInstanceDataFilter struct {
	}
	ListFlowInstanceDataSorter struct {
	}
	ListFlowInstanceDataRes struct {
		List  []*IFlowInstanceData `json:"list"`
		Total int                  `json:"total"`
	}
	CreateFlowInstanceDataReq struct {
	}
	GetFlowInstanceDataReq struct {
		ID string `json:"id" v:"required"`
	}
	UpdateFlowInstanceDataReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteFlowInstanceDataReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteManyFlowInstanceDataReq struct {
		IDs []string `json:"ids" v:"required"`
	}
)

func NewIFlowInstanceData(e *FlowInstanceData) *IFlowInstanceData {
	if e == nil {
		return nil
	}
	return &IFlowInstanceData{
		ID:                 e.ID,
		CreatedAt:          e.CreatedAt,
		UpdatedAt:          e.UpdatedAt,
		DeletedAt:          e.DeletedAt,
		FlowInstanceID:     e.FlowInstanceID,
		FlowNodeInstanceID: e.FlowNodeInstanceID,
		NodeKey:            e.NodeKey,
		Data:               e.Data,
		Type:               e.Type,
	}
}

func NewIFlowInstanceDataArray(es []*FlowInstanceData) []*IFlowInstanceData {
	if len(es) == 0 {
		return nil
	}
	r := make([]*IFlowInstanceData, len(es))
	for i, e := range es {
		r[i] = NewIFlowInstanceData(e)
	}
	return r
}

func ListFlowInstanceDataController(ctx context.Context, req *ListFlowInstanceDataReq) (res *ListFlowInstanceDataRes, err error) {
	q := DB().FlowInstanceData.Query()
	if req.Filter != nil {
	}
	res = &ListFlowInstanceDataRes{}
	res.Total, err = q.Count(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	ret, err := q.Limit(req.Limit).Offset((req.Page - 1) * req.Limit).All(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	res.List = NewIFlowInstanceDataArray(ret)
	return res, nil
}

func CreateFlowInstanceDataController(ctx context.Context, req *CreateFlowInstanceDataReq) (err error) {
	b := DB().FlowInstanceData.Create()
	err = b.Exec(ctx)
	if err != nil {
		if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func GetFlowInstanceDataController(ctx context.Context, req *GetFlowInstanceDataReq) (res *IFlowInstanceData, err error) {
	ret, err := DB().FlowInstanceData.
		Query().
		Where(flowinstancedata.IDEQ(req.ID)).
		Only(ctx)
	if err != nil {
		if IsNotFound(err) {
			return nil, gerror.WrapCode(gcode.CodeNotFound, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewIFlowInstanceData(ret), nil
}

func UpdateFlowInstanceDataController(ctx context.Context, req *UpdateFlowInstanceDataReq) (err error) {
	b := DB().FlowInstanceData.UpdateOneID(req.ID)
	err = b.Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteFlowInstanceDataController(ctx context.Context, req *DeleteFlowInstanceDataReq) (err error) {
	err = DB().FlowInstanceData.DeleteOneID(req.ID).Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteManyFlowInstanceDataController(ctx context.Context, req *DeleteManyFlowInstanceDataReq) (err error) {
	_, err = DB().FlowInstanceData.Delete().Where(flowinstancedata.IDIn(req.IDs...)).Exec(ctx)
	if err != nil {
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func CreateFlowInstanceDataFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ReadFlowInstanceDataFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func UpdateFlowInstanceDataFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ListFlowInstanceDataTableColumns() []view.Node {
	return []view.Node{}
}

func ListFlowInstanceDataView() view.Node {
	return node.List("flowinstancedataList").
		AC(flowinstancedataViewACL["list:FlowInstanceData"]).
		ForInit("@listFlowInstanceData", ListFlowInstanceDataController).
		DecoratorCard().
		EnableFilter().
		SelectionMultiple(true).
		Children(
			node.ListTable("flowinstancedataListTable").
				ActionBar(
					node.ListAction("flowinstancedataListActions").Children(
						node.ListActionRecordFormDrawer("addFlowInstanceData").
							Title("addNew").
							AC(flowinstancedataViewACL["create:FlowInstanceData"]).
							ButtonType("primary").
							ButtonIcon("IconPlus").
							ButtonPosition("left").
							Body(CreateFlowInstanceDataFormView()).
							Footer(
								node.ActionFormDrawerCancel("cancel"),
								node.ActionFormDrawerSubmit("submit").ForSubmit("@addFlowInstanceData", CreateFlowInstanceDataController),
							),
						node.ListActionRowSelection("deleteManyFlowInstanceData").
							Title("bulkDelete").
							AC(flowinstancedataViewACL["deleteMany:FlowInstanceData"]).
							ForSubmit("@deleteManyFlowInstanceData", DeleteManyFlowInstanceDataController).
							AfterReload(true).
							ConfirmTitle("confirmDelete").
							ButtonStatus("danger").
							ButtonIcon("IconDelete").
							ButtonPosition("left"),
					),
				).
				Columns(
					append(
						ListFlowInstanceDataTableColumns(),
						node.ListTableColumn("columnAction").
							Title("columnAction").
							DataIndex("__action").
							Width(150).
							Render(
								node.Space("actions").Size(0).SplitByDivider().Children(
									node.ListActionRecordFormDrawer("view").
										AC(flowinstancedataViewACL["get:FlowInstanceData"]).
										ForInit("@getFlowInstanceData", GetFlowInstanceDataController).
										DrawerTitle("viewDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEye").
										Body(ReadFlowInstanceDataFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
										),
									node.ListActionRecordFormDrawer("edit").
										AC(flowinstancedataViewACL["update:FlowInstanceData"]).
										ForInit("@getFlowInstanceData", GetFlowInstanceDataController).
										DrawerTitle("editDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEdit").
										Body(UpdateFlowInstanceDataFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
											node.ActionFormDrawerSubmit("submit").
												ForSubmit("@updateFlowInstanceData", UpdateFlowInstanceDataController),
										),
									node.ListActionRecordDelete("delete").
										AC(flowinstancedataViewACL["delete:FlowInstanceData"]).
										ForSubmit("@deleteFlowInstanceData", DeleteFlowInstanceDataController).
										ButtonType("text").
										ButtonIcon("IconDelete"),
								),
							),
					)...,
				),
		)
}

var flowinstancedataViewACL = map[string]ac.AC{}

func init() {
	rf := reflect.ValueOf(schema.FlowInstanceData{}).MethodByName("ACL")
	if rf.IsValid() {
		flowinstancedataViewACL, _ = rf.Call([]reflect.Value{})[0].Interface().(map[string]ac.AC)
	}
}

// FlowInstanceDataSlice is a parsable slice of FlowInstanceData.
type FlowInstanceDataSlice []*FlowInstanceData

func (fid FlowInstanceDataSlice) config(cfg config) {
	for _i := range fid {
		fid[_i].config = cfg
	}
}
