// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
)

// FlowNodeInstanceCreate is the builder for creating a FlowNodeInstance entity.
type FlowNodeInstanceCreate struct {
	config
	mutation *FlowNodeInstanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fnic *FlowNodeInstanceCreate) SetCreatedAt(i int64) *FlowNodeInstanceCreate {
	fnic.mutation.SetCreatedAt(i)
	return fnic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableCreatedAt(i *int64) *FlowNodeInstanceCreate {
	if i != nil {
		fnic.SetCreatedAt(*i)
	}
	return fnic
}

// SetUpdatedAt sets the "updated_at" field.
func (fnic *FlowNodeInstanceCreate) SetUpdatedAt(i int64) *FlowNodeInstanceCreate {
	fnic.mutation.SetUpdatedAt(i)
	return fnic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableUpdatedAt(i *int64) *FlowNodeInstanceCreate {
	if i != nil {
		fnic.SetUpdatedAt(*i)
	}
	return fnic
}

// SetDeletedAt sets the "deleted_at" field.
func (fnic *FlowNodeInstanceCreate) SetDeletedAt(i int64) *FlowNodeInstanceCreate {
	fnic.mutation.SetDeletedAt(i)
	return fnic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableDeletedAt(i *int64) *FlowNodeInstanceCreate {
	if i != nil {
		fnic.SetDeletedAt(*i)
	}
	return fnic
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fnic *FlowNodeInstanceCreate) SetFlowInstanceID(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetFlowInstanceID(s)
	return fnic
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (fnic *FlowNodeInstanceCreate) SetSourceFlowNodeInstanceID(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetSourceFlowNodeInstanceID(s)
	return fnic
}

// SetNillableSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableSourceFlowNodeInstanceID(s *string) *FlowNodeInstanceCreate {
	if s != nil {
		fnic.SetSourceFlowNodeInstanceID(*s)
	}
	return fnic
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fnic *FlowNodeInstanceCreate) SetFlowInstanceDataID(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetFlowInstanceDataID(s)
	return fnic
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceCreate {
	if s != nil {
		fnic.SetFlowInstanceDataID(*s)
	}
	return fnic
}

// SetNodeKey sets the "node_key" field.
func (fnic *FlowNodeInstanceCreate) SetNodeKey(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetNodeKey(s)
	return fnic
}

// SetSourceNodeKey sets the "source_node_key" field.
func (fnic *FlowNodeInstanceCreate) SetSourceNodeKey(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetSourceNodeKey(s)
	return fnic
}

// SetNillableSourceNodeKey sets the "source_node_key" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableSourceNodeKey(s *string) *FlowNodeInstanceCreate {
	if s != nil {
		fnic.SetSourceNodeKey(*s)
	}
	return fnic
}

// SetStatus sets the "status" field.
func (fnic *FlowNodeInstanceCreate) SetStatus(i int8) *FlowNodeInstanceCreate {
	fnic.mutation.SetStatus(i)
	return fnic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableStatus(i *int8) *FlowNodeInstanceCreate {
	if i != nil {
		fnic.SetStatus(*i)
	}
	return fnic
}

// SetID sets the "id" field.
func (fnic *FlowNodeInstanceCreate) SetID(s string) *FlowNodeInstanceCreate {
	fnic.mutation.SetID(s)
	return fnic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fnic *FlowNodeInstanceCreate) SetNillableID(s *string) *FlowNodeInstanceCreate {
	if s != nil {
		fnic.SetID(*s)
	}
	return fnic
}

// SetFlowInstance sets the "flow_instance" edge to the FlowInstance entity.
func (fnic *FlowNodeInstanceCreate) SetFlowInstance(f *FlowInstance) *FlowNodeInstanceCreate {
	return fnic.SetFlowInstanceID(f.ID)
}

// Mutation returns the FlowNodeInstanceMutation object of the builder.
func (fnic *FlowNodeInstanceCreate) Mutation() *FlowNodeInstanceMutation {
	return fnic.mutation
}

// Save creates the FlowNodeInstance in the database.
func (fnic *FlowNodeInstanceCreate) Save(ctx context.Context) (*FlowNodeInstance, error) {
	var (
		err  error
		node *FlowNodeInstance
	)
	fnic.defaults()
	if len(fnic.hooks) == 0 {
		if err = fnic.check(); err != nil {
			return nil, err
		}
		node, err = fnic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fnic.check(); err != nil {
				return nil, err
			}
			fnic.mutation = mutation
			if node, err = fnic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fnic.hooks) - 1; i >= 0; i-- {
			if fnic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fnic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fnic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fnic *FlowNodeInstanceCreate) SaveX(ctx context.Context) *FlowNodeInstance {
	v, err := fnic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnic *FlowNodeInstanceCreate) Exec(ctx context.Context) error {
	_, err := fnic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnic *FlowNodeInstanceCreate) ExecX(ctx context.Context) {
	if err := fnic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fnic *FlowNodeInstanceCreate) defaults() {
	if _, ok := fnic.mutation.CreatedAt(); !ok {
		v := flownodeinstance.DefaultCreatedAt()
		fnic.mutation.SetCreatedAt(v)
	}
	if _, ok := fnic.mutation.UpdatedAt(); !ok {
		v := flownodeinstance.DefaultUpdatedAt()
		fnic.mutation.SetUpdatedAt(v)
	}
	if _, ok := fnic.mutation.DeletedAt(); !ok {
		v := flownodeinstance.DefaultDeletedAt
		fnic.mutation.SetDeletedAt(v)
	}
	if _, ok := fnic.mutation.SourceFlowNodeInstanceID(); !ok {
		v := flownodeinstance.DefaultSourceFlowNodeInstanceID
		fnic.mutation.SetSourceFlowNodeInstanceID(v)
	}
	if _, ok := fnic.mutation.FlowInstanceDataID(); !ok {
		v := flownodeinstance.DefaultFlowInstanceDataID
		fnic.mutation.SetFlowInstanceDataID(v)
	}
	if _, ok := fnic.mutation.SourceNodeKey(); !ok {
		v := flownodeinstance.DefaultSourceNodeKey
		fnic.mutation.SetSourceNodeKey(v)
	}
	if _, ok := fnic.mutation.Status(); !ok {
		v := flownodeinstance.DefaultStatus
		fnic.mutation.SetStatus(v)
	}
	if _, ok := fnic.mutation.ID(); !ok {
		v := flownodeinstance.DefaultID()
		fnic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnic *FlowNodeInstanceCreate) check() error {
	if _, ok := fnic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlowNodeInstance.created_at"`)}
	}
	if _, ok := fnic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlowNodeInstance.updated_at"`)}
	}
	if _, ok := fnic.mutation.FlowInstanceID(); !ok {
		return &ValidationError{Name: "flow_instance_id", err: errors.New(`ent: missing required field "FlowNodeInstance.flow_instance_id"`)}
	}
	if v, ok := fnic.mutation.FlowInstanceID(); ok {
		if err := flownodeinstance.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.flow_instance_id": %w`, err)}
		}
	}
	if _, ok := fnic.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "FlowNodeInstance.node_key"`)}
	}
	if v, ok := fnic.mutation.NodeKey(); ok {
		if err := flownodeinstance.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.node_key": %w`, err)}
		}
	}
	if _, ok := fnic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FlowNodeInstance.status"`)}
	}
	if v, ok := fnic.mutation.ID(); ok {
		if err := flownodeinstance.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstance.id": %w`, err)}
		}
	}
	if _, ok := fnic.mutation.FlowInstanceID(); !ok {
		return &ValidationError{Name: "flow_instance", err: errors.New(`ent: missing required edge "FlowNodeInstance.flow_instance"`)}
	}
	return nil
}

func (fnic *FlowNodeInstanceCreate) sqlSave(ctx context.Context) (*FlowNodeInstance, error) {
	_node, _spec := fnic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fnic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FlowNodeInstance.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (fnic *FlowNodeInstanceCreate) createSpec() (*FlowNodeInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowNodeInstance{config: fnic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flownodeinstance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstance.FieldID,
			},
		}
	)
	_spec.OnConflict = fnic.conflict
	if id, ok := fnic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fnic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fnic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fnic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstance.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fnic.mutation.SourceFlowNodeInstanceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceFlowNodeInstanceID,
		})
		_node.SourceFlowNodeInstanceID = value
	}
	if value, ok := fnic.mutation.FlowInstanceDataID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldFlowInstanceDataID,
		})
		_node.FlowInstanceDataID = value
	}
	if value, ok := fnic.mutation.NodeKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldNodeKey,
		})
		_node.NodeKey = value
	}
	if value, ok := fnic.mutation.SourceNodeKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstance.FieldSourceNodeKey,
		})
		_node.SourceNodeKey = value
	}
	if value, ok := fnic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstance.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := fnic.mutation.FlowInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flownodeinstance.FlowInstanceTable,
			Columns: []string{flownodeinstance.FlowInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FlowInstanceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowNodeInstance.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowNodeInstanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fnic *FlowNodeInstanceCreate) OnConflict(opts ...sql.ConflictOption) *FlowNodeInstanceUpsertOne {
	fnic.conflict = opts
	return &FlowNodeInstanceUpsertOne{
		create: fnic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowNodeInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fnic *FlowNodeInstanceCreate) OnConflictColumns(columns ...string) *FlowNodeInstanceUpsertOne {
	fnic.conflict = append(fnic.conflict, sql.ConflictColumns(columns...))
	return &FlowNodeInstanceUpsertOne{
		create: fnic,
	}
}

type (
	// FlowNodeInstanceUpsertOne is the builder for "upsert"-ing
	//  one FlowNodeInstance node.
	FlowNodeInstanceUpsertOne struct {
		create *FlowNodeInstanceCreate
	}

	// FlowNodeInstanceUpsert is the "OnConflict" setter.
	FlowNodeInstanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceUpsert) SetCreatedAt(v int64) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateCreatedAt() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceUpsert) AddCreatedAt(v int64) *FlowNodeInstanceUpsert {
	u.Add(flownodeinstance.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceUpsert) SetUpdatedAt(v int64) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateUpdatedAt() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceUpsert) AddUpdatedAt(v int64) *FlowNodeInstanceUpsert {
	u.Add(flownodeinstance.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceUpsert) SetDeletedAt(v int64) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateDeletedAt() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceUpsert) AddDeletedAt(v int64) *FlowNodeInstanceUpsert {
	u.Add(flownodeinstance.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceUpsert) ClearDeletedAt() *FlowNodeInstanceUpsert {
	u.SetNull(flownodeinstance.FieldDeletedAt)
	return u
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceUpsert) SetFlowInstanceID(v string) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldFlowInstanceID, v)
	return u
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateFlowInstanceID() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldFlowInstanceID)
	return u
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsert) SetSourceFlowNodeInstanceID(v string) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldSourceFlowNodeInstanceID, v)
	return u
}

// UpdateSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateSourceFlowNodeInstanceID() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldSourceFlowNodeInstanceID)
	return u
}

// ClearSourceFlowNodeInstanceID clears the value of the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsert) ClearSourceFlowNodeInstanceID() *FlowNodeInstanceUpsert {
	u.SetNull(flownodeinstance.FieldSourceFlowNodeInstanceID)
	return u
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsert) SetFlowInstanceDataID(v string) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldFlowInstanceDataID, v)
	return u
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateFlowInstanceDataID() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldFlowInstanceDataID)
	return u
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsert) ClearFlowInstanceDataID() *FlowNodeInstanceUpsert {
	u.SetNull(flownodeinstance.FieldFlowInstanceDataID)
	return u
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceUpsert) SetNodeKey(v string) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldNodeKey, v)
	return u
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateNodeKey() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldNodeKey)
	return u
}

// SetSourceNodeKey sets the "source_node_key" field.
func (u *FlowNodeInstanceUpsert) SetSourceNodeKey(v string) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldSourceNodeKey, v)
	return u
}

// UpdateSourceNodeKey sets the "source_node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateSourceNodeKey() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldSourceNodeKey)
	return u
}

// ClearSourceNodeKey clears the value of the "source_node_key" field.
func (u *FlowNodeInstanceUpsert) ClearSourceNodeKey() *FlowNodeInstanceUpsert {
	u.SetNull(flownodeinstance.FieldSourceNodeKey)
	return u
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceUpsert) SetStatus(v int8) *FlowNodeInstanceUpsert {
	u.Set(flownodeinstance.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsert) UpdateStatus() *FlowNodeInstanceUpsert {
	u.SetExcluded(flownodeinstance.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceUpsert) AddStatus(v int8) *FlowNodeInstanceUpsert {
	u.Add(flownodeinstance.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FlowNodeInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flownodeinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowNodeInstanceUpsertOne) UpdateNewValues() *FlowNodeInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(flownodeinstance.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(flownodeinstance.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FlowNodeInstance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FlowNodeInstanceUpsertOne) Ignore() *FlowNodeInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowNodeInstanceUpsertOne) DoNothing() *FlowNodeInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowNodeInstanceCreate.OnConflict
// documentation for more info.
func (u *FlowNodeInstanceUpsertOne) Update(set func(*FlowNodeInstanceUpsert)) *FlowNodeInstanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowNodeInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceUpsertOne) SetCreatedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceUpsertOne) AddCreatedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateCreatedAt() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceUpsertOne) SetUpdatedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceUpsertOne) AddUpdatedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateUpdatedAt() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceUpsertOne) SetDeletedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceUpsertOne) AddDeletedAt(v int64) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateDeletedAt() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceUpsertOne) ClearDeletedAt() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceUpsertOne) SetFlowInstanceID(v string) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetFlowInstanceID(v)
	})
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateFlowInstanceID() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateFlowInstanceID()
	})
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsertOne) SetSourceFlowNodeInstanceID(v string) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetSourceFlowNodeInstanceID(v)
	})
}

// UpdateSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateSourceFlowNodeInstanceID() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateSourceFlowNodeInstanceID()
	})
}

// ClearSourceFlowNodeInstanceID clears the value of the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsertOne) ClearSourceFlowNodeInstanceID() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearSourceFlowNodeInstanceID()
	})
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsertOne) SetFlowInstanceDataID(v string) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetFlowInstanceDataID(v)
	})
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateFlowInstanceDataID() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateFlowInstanceDataID()
	})
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsertOne) ClearFlowInstanceDataID() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearFlowInstanceDataID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceUpsertOne) SetNodeKey(v string) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateNodeKey() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateNodeKey()
	})
}

// SetSourceNodeKey sets the "source_node_key" field.
func (u *FlowNodeInstanceUpsertOne) SetSourceNodeKey(v string) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetSourceNodeKey(v)
	})
}

// UpdateSourceNodeKey sets the "source_node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateSourceNodeKey() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateSourceNodeKey()
	})
}

// ClearSourceNodeKey clears the value of the "source_node_key" field.
func (u *FlowNodeInstanceUpsertOne) ClearSourceNodeKey() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearSourceNodeKey()
	})
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceUpsertOne) SetStatus(v int8) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceUpsertOne) AddStatus(v int8) *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertOne) UpdateStatus() *FlowNodeInstanceUpsertOne {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowNodeInstanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowNodeInstanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowNodeInstanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FlowNodeInstanceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FlowNodeInstanceUpsertOne.ID is not supported by MySQL driver. Use FlowNodeInstanceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FlowNodeInstanceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FlowNodeInstanceCreateBulk is the builder for creating many FlowNodeInstance entities in bulk.
type FlowNodeInstanceCreateBulk struct {
	config
	builders []*FlowNodeInstanceCreate
	conflict []sql.ConflictOption
}

// Save creates the FlowNodeInstance entities in the database.
func (fnicb *FlowNodeInstanceCreateBulk) Save(ctx context.Context) ([]*FlowNodeInstance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fnicb.builders))
	nodes := make([]*FlowNodeInstance, len(fnicb.builders))
	mutators := make([]Mutator, len(fnicb.builders))
	for i := range fnicb.builders {
		func(i int, root context.Context) {
			builder := fnicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowNodeInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fnicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fnicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fnicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fnicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fnicb *FlowNodeInstanceCreateBulk) SaveX(ctx context.Context) []*FlowNodeInstance {
	v, err := fnicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnicb *FlowNodeInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := fnicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnicb *FlowNodeInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := fnicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowNodeInstance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowNodeInstanceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fnicb *FlowNodeInstanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *FlowNodeInstanceUpsertBulk {
	fnicb.conflict = opts
	return &FlowNodeInstanceUpsertBulk{
		create: fnicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowNodeInstance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fnicb *FlowNodeInstanceCreateBulk) OnConflictColumns(columns ...string) *FlowNodeInstanceUpsertBulk {
	fnicb.conflict = append(fnicb.conflict, sql.ConflictColumns(columns...))
	return &FlowNodeInstanceUpsertBulk{
		create: fnicb,
	}
}

// FlowNodeInstanceUpsertBulk is the builder for "upsert"-ing
// a bulk of FlowNodeInstance nodes.
type FlowNodeInstanceUpsertBulk struct {
	create *FlowNodeInstanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FlowNodeInstance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flownodeinstance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowNodeInstanceUpsertBulk) UpdateNewValues() *FlowNodeInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(flownodeinstance.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(flownodeinstance.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FlowNodeInstance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FlowNodeInstanceUpsertBulk) Ignore() *FlowNodeInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowNodeInstanceUpsertBulk) DoNothing() *FlowNodeInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowNodeInstanceCreateBulk.OnConflict
// documentation for more info.
func (u *FlowNodeInstanceUpsertBulk) Update(set func(*FlowNodeInstanceUpsert)) *FlowNodeInstanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowNodeInstanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceUpsertBulk) SetCreatedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceUpsertBulk) AddCreatedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateCreatedAt() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceUpsertBulk) SetUpdatedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceUpsertBulk) AddUpdatedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateUpdatedAt() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceUpsertBulk) SetDeletedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceUpsertBulk) AddDeletedAt(v int64) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateDeletedAt() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceUpsertBulk) ClearDeletedAt() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceUpsertBulk) SetFlowInstanceID(v string) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetFlowInstanceID(v)
	})
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateFlowInstanceID() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateFlowInstanceID()
	})
}

// SetSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsertBulk) SetSourceFlowNodeInstanceID(v string) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetSourceFlowNodeInstanceID(v)
	})
}

// UpdateSourceFlowNodeInstanceID sets the "source_flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateSourceFlowNodeInstanceID() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateSourceFlowNodeInstanceID()
	})
}

// ClearSourceFlowNodeInstanceID clears the value of the "source_flow_node_instance_id" field.
func (u *FlowNodeInstanceUpsertBulk) ClearSourceFlowNodeInstanceID() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearSourceFlowNodeInstanceID()
	})
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsertBulk) SetFlowInstanceDataID(v string) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetFlowInstanceDataID(v)
	})
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateFlowInstanceDataID() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateFlowInstanceDataID()
	})
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceUpsertBulk) ClearFlowInstanceDataID() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearFlowInstanceDataID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceUpsertBulk) SetNodeKey(v string) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateNodeKey() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateNodeKey()
	})
}

// SetSourceNodeKey sets the "source_node_key" field.
func (u *FlowNodeInstanceUpsertBulk) SetSourceNodeKey(v string) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetSourceNodeKey(v)
	})
}

// UpdateSourceNodeKey sets the "source_node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateSourceNodeKey() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateSourceNodeKey()
	})
}

// ClearSourceNodeKey clears the value of the "source_node_key" field.
func (u *FlowNodeInstanceUpsertBulk) ClearSourceNodeKey() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.ClearSourceNodeKey()
	})
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceUpsertBulk) SetStatus(v int8) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceUpsertBulk) AddStatus(v int8) *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceUpsertBulk) UpdateStatus() *FlowNodeInstanceUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowNodeInstanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FlowNodeInstanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowNodeInstanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowNodeInstanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
