// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowdeployment"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/predicate"
)

// FlowInstanceUpdate is the builder for updating FlowInstance entities.
type FlowInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *FlowInstanceMutation
}

// Where appends a list predicates to the FlowInstanceUpdate builder.
func (fiu *FlowInstanceUpdate) Where(ps ...predicate.FlowInstance) *FlowInstanceUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetUpdatedAt sets the "updated_at" field.
func (fiu *FlowInstanceUpdate) SetUpdatedAt(i int64) *FlowInstanceUpdate {
	fiu.mutation.ResetUpdatedAt()
	fiu.mutation.SetUpdatedAt(i)
	return fiu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fiu *FlowInstanceUpdate) AddUpdatedAt(i int64) *FlowInstanceUpdate {
	fiu.mutation.AddUpdatedAt(i)
	return fiu
}

// SetDeletedAt sets the "deleted_at" field.
func (fiu *FlowInstanceUpdate) SetDeletedAt(i int64) *FlowInstanceUpdate {
	fiu.mutation.ResetDeletedAt()
	fiu.mutation.SetDeletedAt(i)
	return fiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableDeletedAt(i *int64) *FlowInstanceUpdate {
	if i != nil {
		fiu.SetDeletedAt(*i)
	}
	return fiu
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fiu *FlowInstanceUpdate) AddDeletedAt(i int64) *FlowInstanceUpdate {
	fiu.mutation.AddDeletedAt(i)
	return fiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fiu *FlowInstanceUpdate) ClearDeletedAt() *FlowInstanceUpdate {
	fiu.mutation.ClearDeletedAt()
	return fiu
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (fiu *FlowInstanceUpdate) SetFlowDeploymentID(s string) *FlowInstanceUpdate {
	fiu.mutation.SetFlowDeploymentID(s)
	return fiu
}

// SetRefID sets the "ref_id" field.
func (fiu *FlowInstanceUpdate) SetRefID(s string) *FlowInstanceUpdate {
	fiu.mutation.SetRefID(s)
	return fiu
}

// SetStatus sets the "status" field.
func (fiu *FlowInstanceUpdate) SetStatus(i int8) *FlowInstanceUpdate {
	fiu.mutation.ResetStatus()
	fiu.mutation.SetStatus(i)
	return fiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiu *FlowInstanceUpdate) SetNillableStatus(i *int8) *FlowInstanceUpdate {
	if i != nil {
		fiu.SetStatus(*i)
	}
	return fiu
}

// AddStatus adds i to the "status" field.
func (fiu *FlowInstanceUpdate) AddStatus(i int8) *FlowInstanceUpdate {
	fiu.mutation.AddStatus(i)
	return fiu
}

// SetFlowDeployment sets the "flow_deployment" edge to the FlowDeployment entity.
func (fiu *FlowInstanceUpdate) SetFlowDeployment(f *FlowDeployment) *FlowInstanceUpdate {
	return fiu.SetFlowDeploymentID(f.ID)
}

// AddFlowNodeInstanceIDs adds the "flow_node_instances" edge to the FlowNodeInstance entity by IDs.
func (fiu *FlowInstanceUpdate) AddFlowNodeInstanceIDs(ids ...string) *FlowInstanceUpdate {
	fiu.mutation.AddFlowNodeInstanceIDs(ids...)
	return fiu
}

// AddFlowNodeInstances adds the "flow_node_instances" edges to the FlowNodeInstance entity.
func (fiu *FlowInstanceUpdate) AddFlowNodeInstances(f ...*FlowNodeInstance) *FlowInstanceUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.AddFlowNodeInstanceIDs(ids...)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fiu *FlowInstanceUpdate) Mutation() *FlowInstanceMutation {
	return fiu.mutation
}

// ClearFlowDeployment clears the "flow_deployment" edge to the FlowDeployment entity.
func (fiu *FlowInstanceUpdate) ClearFlowDeployment() *FlowInstanceUpdate {
	fiu.mutation.ClearFlowDeployment()
	return fiu
}

// ClearFlowNodeInstances clears all "flow_node_instances" edges to the FlowNodeInstance entity.
func (fiu *FlowInstanceUpdate) ClearFlowNodeInstances() *FlowInstanceUpdate {
	fiu.mutation.ClearFlowNodeInstances()
	return fiu
}

// RemoveFlowNodeInstanceIDs removes the "flow_node_instances" edge to FlowNodeInstance entities by IDs.
func (fiu *FlowInstanceUpdate) RemoveFlowNodeInstanceIDs(ids ...string) *FlowInstanceUpdate {
	fiu.mutation.RemoveFlowNodeInstanceIDs(ids...)
	return fiu
}

// RemoveFlowNodeInstances removes "flow_node_instances" edges to FlowNodeInstance entities.
func (fiu *FlowInstanceUpdate) RemoveFlowNodeInstances(f ...*FlowNodeInstance) *FlowInstanceUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiu.RemoveFlowNodeInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FlowInstanceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	fiu.defaults()
	if len(fiu.hooks) == 0 {
		if err = fiu.check(); err != nil {
			return 0, err
		}
		affected, err = fiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fiu.check(); err != nil {
				return 0, err
			}
			fiu.mutation = mutation
			affected, err = fiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fiu.hooks) - 1; i >= 0; i-- {
			if fiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FlowInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FlowInstanceUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FlowInstanceUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiu *FlowInstanceUpdate) defaults() {
	if _, ok := fiu.mutation.UpdatedAt(); !ok {
		v := flowinstance.UpdateDefaultUpdatedAt()
		fiu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FlowInstanceUpdate) check() error {
	if v, ok := fiu.mutation.FlowDeploymentID(); ok {
		if err := flowinstance.FlowDeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_deployment_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_deployment_id": %w`, err)}
		}
	}
	if v, ok := fiu.mutation.RefID(); ok {
		if err := flowinstance.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ref_id": %w`, err)}
		}
	}
	if _, ok := fiu.mutation.FlowDeploymentID(); fiu.mutation.FlowDeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FlowInstance.flow_deployment"`)
	}
	return nil
}

func (fiu *FlowInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flowinstance.Table,
			Columns: flowinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowinstance.FieldID,
			},
		},
	}
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fiu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if value, ok := fiu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if fiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if value, ok := fiu.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstance.FieldRefID,
		})
	}
	if value, ok := fiu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstance.FieldStatus,
		})
	}
	if value, ok := fiu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstance.FieldStatus,
		})
	}
	if fiu.mutation.FlowDeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowinstance.FlowDeploymentTable,
			Columns: []string{flowinstance.FlowDeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdeployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FlowDeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowinstance.FlowDeploymentTable,
			Columns: []string{flowinstance.FlowDeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdeployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.FlowNodeInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedFlowNodeInstancesIDs(); len(nodes) > 0 && !fiu.mutation.FlowNodeInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FlowNodeInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FlowInstanceUpdateOne is the builder for updating a single FlowInstance entity.
type FlowInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FlowInstanceMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fiuo *FlowInstanceUpdateOne) SetUpdatedAt(i int64) *FlowInstanceUpdateOne {
	fiuo.mutation.ResetUpdatedAt()
	fiuo.mutation.SetUpdatedAt(i)
	return fiuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (fiuo *FlowInstanceUpdateOne) AddUpdatedAt(i int64) *FlowInstanceUpdateOne {
	fiuo.mutation.AddUpdatedAt(i)
	return fiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fiuo *FlowInstanceUpdateOne) SetDeletedAt(i int64) *FlowInstanceUpdateOne {
	fiuo.mutation.ResetDeletedAt()
	fiuo.mutation.SetDeletedAt(i)
	return fiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableDeletedAt(i *int64) *FlowInstanceUpdateOne {
	if i != nil {
		fiuo.SetDeletedAt(*i)
	}
	return fiuo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (fiuo *FlowInstanceUpdateOne) AddDeletedAt(i int64) *FlowInstanceUpdateOne {
	fiuo.mutation.AddDeletedAt(i)
	return fiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fiuo *FlowInstanceUpdateOne) ClearDeletedAt() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearDeletedAt()
	return fiuo
}

// SetFlowDeploymentID sets the "flow_deployment_id" field.
func (fiuo *FlowInstanceUpdateOne) SetFlowDeploymentID(s string) *FlowInstanceUpdateOne {
	fiuo.mutation.SetFlowDeploymentID(s)
	return fiuo
}

// SetRefID sets the "ref_id" field.
func (fiuo *FlowInstanceUpdateOne) SetRefID(s string) *FlowInstanceUpdateOne {
	fiuo.mutation.SetRefID(s)
	return fiuo
}

// SetStatus sets the "status" field.
func (fiuo *FlowInstanceUpdateOne) SetStatus(i int8) *FlowInstanceUpdateOne {
	fiuo.mutation.ResetStatus()
	fiuo.mutation.SetStatus(i)
	return fiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiuo *FlowInstanceUpdateOne) SetNillableStatus(i *int8) *FlowInstanceUpdateOne {
	if i != nil {
		fiuo.SetStatus(*i)
	}
	return fiuo
}

// AddStatus adds i to the "status" field.
func (fiuo *FlowInstanceUpdateOne) AddStatus(i int8) *FlowInstanceUpdateOne {
	fiuo.mutation.AddStatus(i)
	return fiuo
}

// SetFlowDeployment sets the "flow_deployment" edge to the FlowDeployment entity.
func (fiuo *FlowInstanceUpdateOne) SetFlowDeployment(f *FlowDeployment) *FlowInstanceUpdateOne {
	return fiuo.SetFlowDeploymentID(f.ID)
}

// AddFlowNodeInstanceIDs adds the "flow_node_instances" edge to the FlowNodeInstance entity by IDs.
func (fiuo *FlowInstanceUpdateOne) AddFlowNodeInstanceIDs(ids ...string) *FlowInstanceUpdateOne {
	fiuo.mutation.AddFlowNodeInstanceIDs(ids...)
	return fiuo
}

// AddFlowNodeInstances adds the "flow_node_instances" edges to the FlowNodeInstance entity.
func (fiuo *FlowInstanceUpdateOne) AddFlowNodeInstances(f ...*FlowNodeInstance) *FlowInstanceUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.AddFlowNodeInstanceIDs(ids...)
}

// Mutation returns the FlowInstanceMutation object of the builder.
func (fiuo *FlowInstanceUpdateOne) Mutation() *FlowInstanceMutation {
	return fiuo.mutation
}

// ClearFlowDeployment clears the "flow_deployment" edge to the FlowDeployment entity.
func (fiuo *FlowInstanceUpdateOne) ClearFlowDeployment() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearFlowDeployment()
	return fiuo
}

// ClearFlowNodeInstances clears all "flow_node_instances" edges to the FlowNodeInstance entity.
func (fiuo *FlowInstanceUpdateOne) ClearFlowNodeInstances() *FlowInstanceUpdateOne {
	fiuo.mutation.ClearFlowNodeInstances()
	return fiuo
}

// RemoveFlowNodeInstanceIDs removes the "flow_node_instances" edge to FlowNodeInstance entities by IDs.
func (fiuo *FlowInstanceUpdateOne) RemoveFlowNodeInstanceIDs(ids ...string) *FlowInstanceUpdateOne {
	fiuo.mutation.RemoveFlowNodeInstanceIDs(ids...)
	return fiuo
}

// RemoveFlowNodeInstances removes "flow_node_instances" edges to FlowNodeInstance entities.
func (fiuo *FlowInstanceUpdateOne) RemoveFlowNodeInstances(f ...*FlowNodeInstance) *FlowInstanceUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fiuo.RemoveFlowNodeInstanceIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FlowInstanceUpdateOne) Select(field string, fields ...string) *FlowInstanceUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FlowInstance entity.
func (fiuo *FlowInstanceUpdateOne) Save(ctx context.Context) (*FlowInstance, error) {
	var (
		err  error
		node *FlowInstance
	)
	fiuo.defaults()
	if len(fiuo.hooks) == 0 {
		if err = fiuo.check(); err != nil {
			return nil, err
		}
		node, err = fiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowInstanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fiuo.check(); err != nil {
				return nil, err
			}
			fiuo.mutation = mutation
			node, err = fiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fiuo.hooks) - 1; i >= 0; i-- {
			if fiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FlowInstanceUpdateOne) SaveX(ctx context.Context) *FlowInstance {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FlowInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FlowInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fiuo *FlowInstanceUpdateOne) defaults() {
	if _, ok := fiuo.mutation.UpdatedAt(); !ok {
		v := flowinstance.UpdateDefaultUpdatedAt()
		fiuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FlowInstanceUpdateOne) check() error {
	if v, ok := fiuo.mutation.FlowDeploymentID(); ok {
		if err := flowinstance.FlowDeploymentIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_deployment_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.flow_deployment_id": %w`, err)}
		}
	}
	if v, ok := fiuo.mutation.RefID(); ok {
		if err := flowinstance.RefIDValidator(v); err != nil {
			return &ValidationError{Name: "ref_id", err: fmt.Errorf(`ent: validator failed for field "FlowInstance.ref_id": %w`, err)}
		}
	}
	if _, ok := fiuo.mutation.FlowDeploymentID(); fiuo.mutation.FlowDeploymentCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "FlowInstance.flow_deployment"`)
	}
	return nil
}

func (fiuo *FlowInstanceUpdateOne) sqlSave(ctx context.Context) (_node *FlowInstance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flowinstance.Table,
			Columns: flowinstance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flowinstance.FieldID,
			},
		},
	}
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FlowInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, flowinstance.FieldID)
		for _, f := range fields {
			if !flowinstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != flowinstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fiuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldUpdatedAt,
		})
	}
	if value, ok := fiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if value, ok := fiuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if fiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: flowinstance.FieldDeletedAt,
		})
	}
	if value, ok := fiuo.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flowinstance.FieldRefID,
		})
	}
	if value, ok := fiuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstance.FieldStatus,
		})
	}
	if value, ok := fiuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flowinstance.FieldStatus,
		})
	}
	if fiuo.mutation.FlowDeploymentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowinstance.FlowDeploymentTable,
			Columns: []string{flowinstance.FlowDeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdeployment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FlowDeploymentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   flowinstance.FlowDeploymentTable,
			Columns: []string{flowinstance.FlowDeploymentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flowdeployment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.FlowNodeInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedFlowNodeInstancesIDs(); len(nodes) > 0 && !fiuo.mutation.FlowNodeInstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FlowNodeInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flowinstance.FlowNodeInstancesTable,
			Columns: []string{flowinstance.FlowNodeInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: flownodeinstance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FlowInstance{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flowinstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
