// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"reflect"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/BeanWei/li/li-engine/ac"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flowinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstance"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/schema"
	"github.com/BeanWei/li/li-engine/view"
	"github.com/BeanWei/li/li-engine/view/node"
	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/errors/gerror"
)

// FlowNodeInstance is the model entity for the FlowNodeInstance schema.
type FlowNodeInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt int64 `json:"-"`
	// FlowInstanceID holds the value of the "flow_instance_id" field.
	// 流程执行实例ID
	FlowInstanceID string `json:"flow_instance_id,omitempty"`
	// SourceFlowNodeInstanceID holds the value of the "source_flow_node_instance_id" field.
	// 上一个节点执行实例ID
	SourceFlowNodeInstanceID string `json:"source_flow_node_instance_id,omitempty"`
	// FlowInstanceDataID holds the value of the "flow_instance_data_id" field.
	// 实例数据ID
	FlowInstanceDataID string `json:"flow_instance_data_id,omitempty"`
	// NodeKey holds the value of the "node_key" field.
	// 节点唯一标示
	NodeKey string `json:"node_key,omitempty"`
	// SourceNodeKey holds the value of the "source_node_key" field.
	// 上一节点唯一标示
	SourceNodeKey string `json:"source_node_key,omitempty"`
	// Status holds the value of the "status" field.
	// 状态(1.处理成功 2.处理中 3.处理失败 4.处理已撤销)
	Status int8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FlowNodeInstanceQuery when eager-loading is set.
	Edges FlowNodeInstanceEdges `json:"edges"`
}

// FlowNodeInstanceEdges holds the relations/edges for other nodes in the graph.
type FlowNodeInstanceEdges struct {
	// FlowInstance holds the value of the flow_instance edge.
	FlowInstance *FlowInstance `json:"flow_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FlowInstanceOrErr returns the FlowInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FlowNodeInstanceEdges) FlowInstanceOrErr() (*FlowInstance, error) {
	if e.loadedTypes[0] {
		if e.FlowInstance == nil {
			// The edge flow_instance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: flowinstance.Label}
		}
		return e.FlowInstance, nil
	}
	return nil, &NotLoadedError{edge: "flow_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FlowNodeInstance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case flownodeinstance.FieldCreatedAt, flownodeinstance.FieldUpdatedAt, flownodeinstance.FieldDeletedAt, flownodeinstance.FieldStatus:
			values[i] = new(sql.NullInt64)
		case flownodeinstance.FieldID, flownodeinstance.FieldFlowInstanceID, flownodeinstance.FieldSourceFlowNodeInstanceID, flownodeinstance.FieldFlowInstanceDataID, flownodeinstance.FieldNodeKey, flownodeinstance.FieldSourceNodeKey:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FlowNodeInstance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FlowNodeInstance fields.
func (fni *FlowNodeInstance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case flownodeinstance.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				fni.ID = value.String
			}
		case flownodeinstance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fni.CreatedAt = value.Int64
			}
		case flownodeinstance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fni.UpdatedAt = value.Int64
			}
		case flownodeinstance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				fni.DeletedAt = value.Int64
			}
		case flownodeinstance.FieldFlowInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_instance_id", values[i])
			} else if value.Valid {
				fni.FlowInstanceID = value.String
			}
		case flownodeinstance.FieldSourceFlowNodeInstanceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_flow_node_instance_id", values[i])
			} else if value.Valid {
				fni.SourceFlowNodeInstanceID = value.String
			}
		case flownodeinstance.FieldFlowInstanceDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field flow_instance_data_id", values[i])
			} else if value.Valid {
				fni.FlowInstanceDataID = value.String
			}
		case flownodeinstance.FieldNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_key", values[i])
			} else if value.Valid {
				fni.NodeKey = value.String
			}
		case flownodeinstance.FieldSourceNodeKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source_node_key", values[i])
			} else if value.Valid {
				fni.SourceNodeKey = value.String
			}
		case flownodeinstance.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fni.Status = int8(value.Int64)
			}
		}
	}
	return nil
}

// QueryFlowInstance queries the "flow_instance" edge of the FlowNodeInstance entity.
func (fni *FlowNodeInstance) QueryFlowInstance() *FlowInstanceQuery {
	return (&FlowNodeInstanceClient{config: fni.config}).QueryFlowInstance(fni)
}

// Update returns a builder for updating this FlowNodeInstance.
// Note that you need to call FlowNodeInstance.Unwrap() before calling this method if this FlowNodeInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (fni *FlowNodeInstance) Update() *FlowNodeInstanceUpdateOne {
	return (&FlowNodeInstanceClient{config: fni.config}).UpdateOne(fni)
}

// Unwrap unwraps the FlowNodeInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fni *FlowNodeInstance) Unwrap() *FlowNodeInstance {
	tx, ok := fni.config.driver.(*txDriver)
	if !ok {
		panic("ent: FlowNodeInstance is not a transactional entity")
	}
	fni.config.driver = tx.drv
	return fni
}

// String implements the fmt.Stringer.
func (fni *FlowNodeInstance) String() string {
	var builder strings.Builder
	builder.WriteString("FlowNodeInstance(")
	builder.WriteString(fmt.Sprintf("id=%v", fni.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(fmt.Sprintf("%v", fni.CreatedAt))
	builder.WriteString(", updated_at=")
	builder.WriteString(fmt.Sprintf("%v", fni.UpdatedAt))
	builder.WriteString(", deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", fni.DeletedAt))
	builder.WriteString(", flow_instance_id=")
	builder.WriteString(fni.FlowInstanceID)
	builder.WriteString(", source_flow_node_instance_id=")
	builder.WriteString(fni.SourceFlowNodeInstanceID)
	builder.WriteString(", flow_instance_data_id=")
	builder.WriteString(fni.FlowInstanceDataID)
	builder.WriteString(", node_key=")
	builder.WriteString(fni.NodeKey)
	builder.WriteString(", source_node_key=")
	builder.WriteString(fni.SourceNodeKey)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", fni.Status))
	builder.WriteByte(')')
	return builder.String()
}

type (
	IFlowNodeInstance struct {
		ID                       string         `json:"id,omitempty"`
		CreatedAt                int64          `json:"created_at,omitempty"`
		UpdatedAt                int64          `json:"updated_at,omitempty"`
		DeletedAt                int64          `json:"-"`
		FlowInstanceID           string         `json:"flow_instance_id,omitempty"`
		SourceFlowNodeInstanceID string         `json:"source_flow_node_instance_id,omitempty"`
		FlowInstanceDataID       string         `json:"flow_instance_data_id,omitempty"`
		NodeKey                  string         `json:"node_key,omitempty"`
		SourceNodeKey            string         `json:"source_node_key,omitempty"`
		Status                   int8           `json:"status,omitempty"`
		FlowInstance             *IFlowInstance `json:"flow_instance,omitempty"`
	}
	ListFlowNodeInstanceReq struct {
		Page   int                         `json:"page" d:"1" v:"min:1"`
		Limit  int                         `json:"limit" d:"20" v:"min:1|max:500"`
		Query  string                      `json:"query"`
		Filter *ListFlowNodeInstanceFilter `json:"filter"`
		Sorter *ListFlowNodeInstanceSorter `json:"sorter"`
	}
	ListFlowNodeInstanceFilter struct {
	}
	ListFlowNodeInstanceSorter struct {
	}
	ListFlowNodeInstanceRes struct {
		List  []*IFlowNodeInstance `json:"list"`
		Total int                  `json:"total"`
	}
	CreateFlowNodeInstanceReq struct {
	}
	GetFlowNodeInstanceReq struct {
		ID string `json:"id" v:"required"`
	}
	UpdateFlowNodeInstanceReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteFlowNodeInstanceReq struct {
		ID string `json:"id" v:"required"`
	}
	DeleteManyFlowNodeInstanceReq struct {
		IDs []string `json:"ids" v:"required"`
	}
)

func NewIFlowNodeInstance(e *FlowNodeInstance) *IFlowNodeInstance {
	if e == nil {
		return nil
	}
	return &IFlowNodeInstance{
		ID:                       e.ID,
		CreatedAt:                e.CreatedAt,
		UpdatedAt:                e.UpdatedAt,
		DeletedAt:                e.DeletedAt,
		FlowInstanceID:           e.FlowInstanceID,
		SourceFlowNodeInstanceID: e.SourceFlowNodeInstanceID,
		FlowInstanceDataID:       e.FlowInstanceDataID,
		NodeKey:                  e.NodeKey,
		SourceNodeKey:            e.SourceNodeKey,
		Status:                   e.Status,
		FlowInstance:             NewIFlowInstance(e.Edges.FlowInstance),
	}
}

func NewIFlowNodeInstanceArray(es []*FlowNodeInstance) []*IFlowNodeInstance {
	if len(es) == 0 {
		return nil
	}
	r := make([]*IFlowNodeInstance, len(es))
	for i, e := range es {
		r[i] = NewIFlowNodeInstance(e)
	}
	return r
}

func ListFlowNodeInstanceController(ctx context.Context, req *ListFlowNodeInstanceReq) (res *ListFlowNodeInstanceRes, err error) {
	q := DB().FlowNodeInstance.Query()
	if req.Filter != nil {
	}
	res = &ListFlowNodeInstanceRes{}
	res.Total, err = q.Count(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	ret, err := q.Limit(req.Limit).Offset((req.Page - 1) * req.Limit).All(ctx)
	if err != nil {
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	res.List = NewIFlowNodeInstanceArray(ret)
	return res, nil
}

func CreateFlowNodeInstanceController(ctx context.Context, req *CreateFlowNodeInstanceReq) (err error) {
	b := DB().FlowNodeInstance.Create()
	err = b.Exec(ctx)
	if err != nil {
		if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func GetFlowNodeInstanceController(ctx context.Context, req *GetFlowNodeInstanceReq) (res *IFlowNodeInstance, err error) {
	ret, err := DB().FlowNodeInstance.
		Query().
		Where(flownodeinstance.IDEQ(req.ID)).
		Only(ctx)
	if err != nil {
		if IsNotFound(err) {
			return nil, gerror.WrapCode(gcode.CodeNotFound, err)
		}
		return nil, gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return NewIFlowNodeInstance(ret), nil
}

func UpdateFlowNodeInstanceController(ctx context.Context, req *UpdateFlowNodeInstanceReq) (err error) {
	b := DB().FlowNodeInstance.UpdateOneID(req.ID)
	err = b.Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteFlowNodeInstanceController(ctx context.Context, req *DeleteFlowNodeInstanceReq) (err error) {
	err = DB().FlowNodeInstance.DeleteOneID(req.ID).Exec(ctx)
	if err != nil {
		if IsNotFound(err) {
			return gerror.WrapCode(gcode.CodeNotFound, err)
		} else if IsConstraintError(err) {
			return gerror.WrapCode(gcode.CodeOperationFailed, err)
		}
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func DeleteManyFlowNodeInstanceController(ctx context.Context, req *DeleteManyFlowNodeInstanceReq) (err error) {
	_, err = DB().FlowNodeInstance.Delete().Where(flownodeinstance.IDIn(req.IDs...)).Exec(ctx)
	if err != nil {
		return gerror.WrapCode(gcode.CodeDbOperationError, err)
	}
	return
}

func CreateFlowNodeInstanceFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ReadFlowNodeInstanceFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func UpdateFlowNodeInstanceFormView() view.Node {
	return node.FormGrid("grid").MaxColumns(2).Children()
}

func ListFlowNodeInstanceTableColumns() []view.Node {
	return []view.Node{}
}

func ListFlowNodeInstanceView() view.Node {
	return node.List("flownodeinstanceList").
		AC(flownodeinstanceViewACL["list:FlowNodeInstance"]).
		ForInit("@listFlowNodeInstance", ListFlowNodeInstanceController).
		DecoratorCard().
		EnableFilter().
		SelectionMultiple(true).
		Children(
			node.ListTable("flownodeinstanceListTable").
				ActionBar(
					node.ListAction("flownodeinstanceListActions").Children(
						node.ListActionRecordFormDrawer("addFlowNodeInstance").
							Title("addNew").
							AC(flownodeinstanceViewACL["create:FlowNodeInstance"]).
							ButtonType("primary").
							ButtonIcon("IconPlus").
							ButtonPosition("left").
							Body(CreateFlowNodeInstanceFormView()).
							Footer(
								node.ActionFormDrawerCancel("cancel"),
								node.ActionFormDrawerSubmit("submit").ForSubmit("@addFlowNodeInstance", CreateFlowNodeInstanceController),
							),
						node.ListActionRowSelection("deleteManyFlowNodeInstance").
							Title("bulkDelete").
							AC(flownodeinstanceViewACL["deleteMany:FlowNodeInstance"]).
							ForSubmit("@deleteManyFlowNodeInstance", DeleteManyFlowNodeInstanceController).
							AfterReload(true).
							ConfirmTitle("confirmDelete").
							ButtonStatus("danger").
							ButtonIcon("IconDelete").
							ButtonPosition("left"),
					),
				).
				Columns(
					append(
						ListFlowNodeInstanceTableColumns(),
						node.ListTableColumn("columnAction").
							Title("columnAction").
							DataIndex("__action").
							Width(150).
							Render(
								node.Space("actions").Size(0).SplitByDivider().Children(
									node.ListActionRecordFormDrawer("view").
										AC(flownodeinstanceViewACL["get:FlowNodeInstance"]).
										ForInit("@getFlowNodeInstance", GetFlowNodeInstanceController).
										DrawerTitle("viewDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEye").
										Body(ReadFlowNodeInstanceFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
										),
									node.ListActionRecordFormDrawer("edit").
										AC(flownodeinstanceViewACL["update:FlowNodeInstance"]).
										ForInit("@getFlowNodeInstance", GetFlowNodeInstanceController).
										DrawerTitle("editDrawerTitle").
										ButtonType("text").
										ButtonIcon("IconEdit").
										Body(UpdateFlowNodeInstanceFormView()).
										Footer(
											node.ActionFormDrawerCancel("cancel"),
											node.ActionFormDrawerSubmit("submit").
												ForSubmit("@updateFlowNodeInstance", UpdateFlowNodeInstanceController),
										),
									node.ListActionRecordDelete("delete").
										AC(flownodeinstanceViewACL["delete:FlowNodeInstance"]).
										ForSubmit("@deleteFlowNodeInstance", DeleteFlowNodeInstanceController).
										ButtonType("text").
										ButtonIcon("IconDelete"),
								),
							),
					)...,
				),
		)
}

var flownodeinstanceViewACL = map[string]ac.AC{}

func init() {
	rf := reflect.ValueOf(schema.FlowNodeInstance{}).MethodByName("ACL")
	if rf.IsValid() {
		flownodeinstanceViewACL, _ = rf.Call([]reflect.Value{})[0].Interface().(map[string]ac.AC)
	}
}

// FlowNodeInstances is a parsable slice of FlowNodeInstance.
type FlowNodeInstances []*FlowNodeInstance

func (fni FlowNodeInstances) config(cfg config) {
	for _i := range fni {
		fni[_i].config = cfg
	}
}
