// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/BeanWei/li/li-engine/contrib/liflow/ent/flownodeinstancelog"
)

// FlowNodeInstanceLogCreate is the builder for creating a FlowNodeInstanceLog entity.
type FlowNodeInstanceLogCreate struct {
	config
	mutation *FlowNodeInstanceLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (fnilc *FlowNodeInstanceLogCreate) SetCreatedAt(i int64) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetCreatedAt(i)
	return fnilc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableCreatedAt(i *int64) *FlowNodeInstanceLogCreate {
	if i != nil {
		fnilc.SetCreatedAt(*i)
	}
	return fnilc
}

// SetUpdatedAt sets the "updated_at" field.
func (fnilc *FlowNodeInstanceLogCreate) SetUpdatedAt(i int64) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetUpdatedAt(i)
	return fnilc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableUpdatedAt(i *int64) *FlowNodeInstanceLogCreate {
	if i != nil {
		fnilc.SetUpdatedAt(*i)
	}
	return fnilc
}

// SetDeletedAt sets the "deleted_at" field.
func (fnilc *FlowNodeInstanceLogCreate) SetDeletedAt(i int64) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetDeletedAt(i)
	return fnilc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableDeletedAt(i *int64) *FlowNodeInstanceLogCreate {
	if i != nil {
		fnilc.SetDeletedAt(*i)
	}
	return fnilc
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (fnilc *FlowNodeInstanceLogCreate) SetFlowInstanceID(s string) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetFlowInstanceID(s)
	return fnilc
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (fnilc *FlowNodeInstanceLogCreate) SetFlowNodeInstanceID(s string) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetFlowNodeInstanceID(s)
	return fnilc
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (fnilc *FlowNodeInstanceLogCreate) SetFlowInstanceDataID(s string) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetFlowInstanceDataID(s)
	return fnilc
}

// SetNillableFlowInstanceDataID sets the "flow_instance_data_id" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableFlowInstanceDataID(s *string) *FlowNodeInstanceLogCreate {
	if s != nil {
		fnilc.SetFlowInstanceDataID(*s)
	}
	return fnilc
}

// SetNodeKey sets the "node_key" field.
func (fnilc *FlowNodeInstanceLogCreate) SetNodeKey(s string) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetNodeKey(s)
	return fnilc
}

// SetType sets the "type" field.
func (fnilc *FlowNodeInstanceLogCreate) SetType(i int8) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetType(i)
	return fnilc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableType(i *int8) *FlowNodeInstanceLogCreate {
	if i != nil {
		fnilc.SetType(*i)
	}
	return fnilc
}

// SetStatus sets the "status" field.
func (fnilc *FlowNodeInstanceLogCreate) SetStatus(i int8) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetStatus(i)
	return fnilc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableStatus(i *int8) *FlowNodeInstanceLogCreate {
	if i != nil {
		fnilc.SetStatus(*i)
	}
	return fnilc
}

// SetID sets the "id" field.
func (fnilc *FlowNodeInstanceLogCreate) SetID(s string) *FlowNodeInstanceLogCreate {
	fnilc.mutation.SetID(s)
	return fnilc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fnilc *FlowNodeInstanceLogCreate) SetNillableID(s *string) *FlowNodeInstanceLogCreate {
	if s != nil {
		fnilc.SetID(*s)
	}
	return fnilc
}

// Mutation returns the FlowNodeInstanceLogMutation object of the builder.
func (fnilc *FlowNodeInstanceLogCreate) Mutation() *FlowNodeInstanceLogMutation {
	return fnilc.mutation
}

// Save creates the FlowNodeInstanceLog in the database.
func (fnilc *FlowNodeInstanceLogCreate) Save(ctx context.Context) (*FlowNodeInstanceLog, error) {
	var (
		err  error
		node *FlowNodeInstanceLog
	)
	fnilc.defaults()
	if len(fnilc.hooks) == 0 {
		if err = fnilc.check(); err != nil {
			return nil, err
		}
		node, err = fnilc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowNodeInstanceLogMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fnilc.check(); err != nil {
				return nil, err
			}
			fnilc.mutation = mutation
			if node, err = fnilc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fnilc.hooks) - 1; i >= 0; i-- {
			if fnilc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fnilc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fnilc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fnilc *FlowNodeInstanceLogCreate) SaveX(ctx context.Context) *FlowNodeInstanceLog {
	v, err := fnilc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnilc *FlowNodeInstanceLogCreate) Exec(ctx context.Context) error {
	_, err := fnilc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnilc *FlowNodeInstanceLogCreate) ExecX(ctx context.Context) {
	if err := fnilc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fnilc *FlowNodeInstanceLogCreate) defaults() {
	if _, ok := fnilc.mutation.CreatedAt(); !ok {
		v := flownodeinstancelog.DefaultCreatedAt()
		fnilc.mutation.SetCreatedAt(v)
	}
	if _, ok := fnilc.mutation.UpdatedAt(); !ok {
		v := flownodeinstancelog.DefaultUpdatedAt()
		fnilc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fnilc.mutation.DeletedAt(); !ok {
		v := flownodeinstancelog.DefaultDeletedAt
		fnilc.mutation.SetDeletedAt(v)
	}
	if _, ok := fnilc.mutation.FlowInstanceDataID(); !ok {
		v := flownodeinstancelog.DefaultFlowInstanceDataID
		fnilc.mutation.SetFlowInstanceDataID(v)
	}
	if _, ok := fnilc.mutation.GetType(); !ok {
		v := flownodeinstancelog.DefaultType
		fnilc.mutation.SetType(v)
	}
	if _, ok := fnilc.mutation.Status(); !ok {
		v := flownodeinstancelog.DefaultStatus
		fnilc.mutation.SetStatus(v)
	}
	if _, ok := fnilc.mutation.ID(); !ok {
		v := flownodeinstancelog.DefaultID()
		fnilc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fnilc *FlowNodeInstanceLogCreate) check() error {
	if _, ok := fnilc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.created_at"`)}
	}
	if _, ok := fnilc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.updated_at"`)}
	}
	if _, ok := fnilc.mutation.FlowInstanceID(); !ok {
		return &ValidationError{Name: "flow_instance_id", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.flow_instance_id"`)}
	}
	if v, ok := fnilc.mutation.FlowInstanceID(); ok {
		if err := flownodeinstancelog.FlowInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_instance_id": %w`, err)}
		}
	}
	if _, ok := fnilc.mutation.FlowNodeInstanceID(); !ok {
		return &ValidationError{Name: "flow_node_instance_id", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.flow_node_instance_id"`)}
	}
	if v, ok := fnilc.mutation.FlowNodeInstanceID(); ok {
		if err := flownodeinstancelog.FlowNodeInstanceIDValidator(v); err != nil {
			return &ValidationError{Name: "flow_node_instance_id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.flow_node_instance_id": %w`, err)}
		}
	}
	if _, ok := fnilc.mutation.NodeKey(); !ok {
		return &ValidationError{Name: "node_key", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.node_key"`)}
	}
	if v, ok := fnilc.mutation.NodeKey(); ok {
		if err := flownodeinstancelog.NodeKeyValidator(v); err != nil {
			return &ValidationError{Name: "node_key", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.node_key": %w`, err)}
		}
	}
	if _, ok := fnilc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.type"`)}
	}
	if _, ok := fnilc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FlowNodeInstanceLog.status"`)}
	}
	if v, ok := fnilc.mutation.ID(); ok {
		if err := flownodeinstancelog.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "FlowNodeInstanceLog.id": %w`, err)}
		}
	}
	return nil
}

func (fnilc *FlowNodeInstanceLogCreate) sqlSave(ctx context.Context) (*FlowNodeInstanceLog, error) {
	_node, _spec := fnilc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fnilc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FlowNodeInstanceLog.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (fnilc *FlowNodeInstanceLogCreate) createSpec() (*FlowNodeInstanceLog, *sqlgraph.CreateSpec) {
	var (
		_node = &FlowNodeInstanceLog{config: fnilc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: flownodeinstancelog.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: flownodeinstancelog.FieldID,
			},
		}
	)
	_spec.OnConflict = fnilc.conflict
	if id, ok := fnilc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fnilc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := fnilc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := fnilc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: flownodeinstancelog.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	if value, ok := fnilc.mutation.FlowInstanceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceID,
		})
		_node.FlowInstanceID = value
	}
	if value, ok := fnilc.mutation.FlowNodeInstanceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowNodeInstanceID,
		})
		_node.FlowNodeInstanceID = value
	}
	if value, ok := fnilc.mutation.FlowInstanceDataID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldFlowInstanceDataID,
		})
		_node.FlowInstanceDataID = value
	}
	if value, ok := fnilc.mutation.NodeKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flownodeinstancelog.FieldNodeKey,
		})
		_node.NodeKey = value
	}
	if value, ok := fnilc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldType,
		})
		_node.Type = value
	}
	if value, ok := fnilc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: flownodeinstancelog.FieldStatus,
		})
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowNodeInstanceLog.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowNodeInstanceLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fnilc *FlowNodeInstanceLogCreate) OnConflict(opts ...sql.ConflictOption) *FlowNodeInstanceLogUpsertOne {
	fnilc.conflict = opts
	return &FlowNodeInstanceLogUpsertOne{
		create: fnilc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowNodeInstanceLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fnilc *FlowNodeInstanceLogCreate) OnConflictColumns(columns ...string) *FlowNodeInstanceLogUpsertOne {
	fnilc.conflict = append(fnilc.conflict, sql.ConflictColumns(columns...))
	return &FlowNodeInstanceLogUpsertOne{
		create: fnilc,
	}
}

type (
	// FlowNodeInstanceLogUpsertOne is the builder for "upsert"-ing
	//  one FlowNodeInstanceLog node.
	FlowNodeInstanceLogUpsertOne struct {
		create *FlowNodeInstanceLogCreate
	}

	// FlowNodeInstanceLogUpsert is the "OnConflict" setter.
	FlowNodeInstanceLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceLogUpsert) SetCreatedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateCreatedAt() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceLogUpsert) AddCreatedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Add(flownodeinstancelog.FieldCreatedAt, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceLogUpsert) SetUpdatedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateUpdatedAt() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceLogUpsert) AddUpdatedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Add(flownodeinstancelog.FieldUpdatedAt, v)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsert) SetDeletedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateDeletedAt() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsert) AddDeletedAt(v int64) *FlowNodeInstanceLogUpsert {
	u.Add(flownodeinstancelog.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsert) ClearDeletedAt() *FlowNodeInstanceLogUpsert {
	u.SetNull(flownodeinstancelog.FieldDeletedAt)
	return u
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceLogUpsert) SetFlowInstanceID(v string) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldFlowInstanceID, v)
	return u
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateFlowInstanceID() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldFlowInstanceID)
	return u
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (u *FlowNodeInstanceLogUpsert) SetFlowNodeInstanceID(v string) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldFlowNodeInstanceID, v)
	return u
}

// UpdateFlowNodeInstanceID sets the "flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateFlowNodeInstanceID() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldFlowNodeInstanceID)
	return u
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsert) SetFlowInstanceDataID(v string) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldFlowInstanceDataID, v)
	return u
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateFlowInstanceDataID() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldFlowInstanceDataID)
	return u
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsert) ClearFlowInstanceDataID() *FlowNodeInstanceLogUpsert {
	u.SetNull(flownodeinstancelog.FieldFlowInstanceDataID)
	return u
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceLogUpsert) SetNodeKey(v string) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldNodeKey, v)
	return u
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateNodeKey() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldNodeKey)
	return u
}

// SetType sets the "type" field.
func (u *FlowNodeInstanceLogUpsert) SetType(v int8) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateType() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldType)
	return u
}

// AddType adds v to the "type" field.
func (u *FlowNodeInstanceLogUpsert) AddType(v int8) *FlowNodeInstanceLogUpsert {
	u.Add(flownodeinstancelog.FieldType, v)
	return u
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceLogUpsert) SetStatus(v int8) *FlowNodeInstanceLogUpsert {
	u.Set(flownodeinstancelog.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsert) UpdateStatus() *FlowNodeInstanceLogUpsert {
	u.SetExcluded(flownodeinstancelog.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceLogUpsert) AddStatus(v int8) *FlowNodeInstanceLogUpsert {
	u.Add(flownodeinstancelog.FieldStatus, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.FlowNodeInstanceLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flownodeinstancelog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowNodeInstanceLogUpsertOne) UpdateNewValues() *FlowNodeInstanceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(flownodeinstancelog.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(flownodeinstancelog.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.FlowNodeInstanceLog.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *FlowNodeInstanceLogUpsertOne) Ignore() *FlowNodeInstanceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowNodeInstanceLogUpsertOne) DoNothing() *FlowNodeInstanceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowNodeInstanceLogCreate.OnConflict
// documentation for more info.
func (u *FlowNodeInstanceLogUpsertOne) Update(set func(*FlowNodeInstanceLogUpsert)) *FlowNodeInstanceLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowNodeInstanceLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceLogUpsertOne) SetCreatedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceLogUpsertOne) AddCreatedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateCreatedAt() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceLogUpsertOne) SetUpdatedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceLogUpsertOne) AddUpdatedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateUpdatedAt() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertOne) SetDeletedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertOne) AddDeletedAt(v int64) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateDeletedAt() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertOne) ClearDeletedAt() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceLogUpsertOne) SetFlowInstanceID(v string) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowInstanceID(v)
	})
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateFlowInstanceID() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowInstanceID()
	})
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (u *FlowNodeInstanceLogUpsertOne) SetFlowNodeInstanceID(v string) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowNodeInstanceID(v)
	})
}

// UpdateFlowNodeInstanceID sets the "flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateFlowNodeInstanceID() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowNodeInstanceID()
	})
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsertOne) SetFlowInstanceDataID(v string) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowInstanceDataID(v)
	})
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateFlowInstanceDataID() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowInstanceDataID()
	})
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsertOne) ClearFlowInstanceDataID() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.ClearFlowInstanceDataID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceLogUpsertOne) SetNodeKey(v string) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateNodeKey() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateNodeKey()
	})
}

// SetType sets the "type" field.
func (u *FlowNodeInstanceLogUpsertOne) SetType(v int8) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FlowNodeInstanceLogUpsertOne) AddType(v int8) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateType() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceLogUpsertOne) SetStatus(v int8) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceLogUpsertOne) AddStatus(v int8) *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertOne) UpdateStatus() *FlowNodeInstanceLogUpsertOne {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowNodeInstanceLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowNodeInstanceLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowNodeInstanceLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FlowNodeInstanceLogUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FlowNodeInstanceLogUpsertOne.ID is not supported by MySQL driver. Use FlowNodeInstanceLogUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FlowNodeInstanceLogUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FlowNodeInstanceLogCreateBulk is the builder for creating many FlowNodeInstanceLog entities in bulk.
type FlowNodeInstanceLogCreateBulk struct {
	config
	builders []*FlowNodeInstanceLogCreate
	conflict []sql.ConflictOption
}

// Save creates the FlowNodeInstanceLog entities in the database.
func (fnilcb *FlowNodeInstanceLogCreateBulk) Save(ctx context.Context) ([]*FlowNodeInstanceLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fnilcb.builders))
	nodes := make([]*FlowNodeInstanceLog, len(fnilcb.builders))
	mutators := make([]Mutator, len(fnilcb.builders))
	for i := range fnilcb.builders {
		func(i int, root context.Context) {
			builder := fnilcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FlowNodeInstanceLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fnilcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fnilcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fnilcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fnilcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fnilcb *FlowNodeInstanceLogCreateBulk) SaveX(ctx context.Context) []*FlowNodeInstanceLog {
	v, err := fnilcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fnilcb *FlowNodeInstanceLogCreateBulk) Exec(ctx context.Context) error {
	_, err := fnilcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fnilcb *FlowNodeInstanceLogCreateBulk) ExecX(ctx context.Context) {
	if err := fnilcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FlowNodeInstanceLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FlowNodeInstanceLogUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
//
func (fnilcb *FlowNodeInstanceLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *FlowNodeInstanceLogUpsertBulk {
	fnilcb.conflict = opts
	return &FlowNodeInstanceLogUpsertBulk{
		create: fnilcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FlowNodeInstanceLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (fnilcb *FlowNodeInstanceLogCreateBulk) OnConflictColumns(columns ...string) *FlowNodeInstanceLogUpsertBulk {
	fnilcb.conflict = append(fnilcb.conflict, sql.ConflictColumns(columns...))
	return &FlowNodeInstanceLogUpsertBulk{
		create: fnilcb,
	}
}

// FlowNodeInstanceLogUpsertBulk is the builder for "upsert"-ing
// a bulk of FlowNodeInstanceLog nodes.
type FlowNodeInstanceLogUpsertBulk struct {
	create *FlowNodeInstanceLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FlowNodeInstanceLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(flownodeinstancelog.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *FlowNodeInstanceLogUpsertBulk) UpdateNewValues() *FlowNodeInstanceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(flownodeinstancelog.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(flownodeinstancelog.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FlowNodeInstanceLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *FlowNodeInstanceLogUpsertBulk) Ignore() *FlowNodeInstanceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FlowNodeInstanceLogUpsertBulk) DoNothing() *FlowNodeInstanceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FlowNodeInstanceLogCreateBulk.OnConflict
// documentation for more info.
func (u *FlowNodeInstanceLogUpsertBulk) Update(set func(*FlowNodeInstanceLogUpsert)) *FlowNodeInstanceLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FlowNodeInstanceLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetCreatedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) AddCreatedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateCreatedAt() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetUpdatedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) AddUpdatedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateUpdatedAt() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetDeletedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) AddDeletedAt(v int64) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateDeletedAt() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *FlowNodeInstanceLogUpsertBulk) ClearDeletedAt() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.ClearDeletedAt()
	})
}

// SetFlowInstanceID sets the "flow_instance_id" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetFlowInstanceID(v string) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowInstanceID(v)
	})
}

// UpdateFlowInstanceID sets the "flow_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateFlowInstanceID() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowInstanceID()
	})
}

// SetFlowNodeInstanceID sets the "flow_node_instance_id" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetFlowNodeInstanceID(v string) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowNodeInstanceID(v)
	})
}

// UpdateFlowNodeInstanceID sets the "flow_node_instance_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateFlowNodeInstanceID() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowNodeInstanceID()
	})
}

// SetFlowInstanceDataID sets the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetFlowInstanceDataID(v string) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetFlowInstanceDataID(v)
	})
}

// UpdateFlowInstanceDataID sets the "flow_instance_data_id" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateFlowInstanceDataID() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateFlowInstanceDataID()
	})
}

// ClearFlowInstanceDataID clears the value of the "flow_instance_data_id" field.
func (u *FlowNodeInstanceLogUpsertBulk) ClearFlowInstanceDataID() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.ClearFlowInstanceDataID()
	})
}

// SetNodeKey sets the "node_key" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetNodeKey(v string) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetNodeKey(v)
	})
}

// UpdateNodeKey sets the "node_key" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateNodeKey() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateNodeKey()
	})
}

// SetType sets the "type" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetType(v int8) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetType(v)
	})
}

// AddType adds v to the "type" field.
func (u *FlowNodeInstanceLogUpsertBulk) AddType(v int8) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateType() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateType()
	})
}

// SetStatus sets the "status" field.
func (u *FlowNodeInstanceLogUpsertBulk) SetStatus(v int8) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *FlowNodeInstanceLogUpsertBulk) AddStatus(v int8) *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FlowNodeInstanceLogUpsertBulk) UpdateStatus() *FlowNodeInstanceLogUpsertBulk {
	return u.Update(func(s *FlowNodeInstanceLogUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *FlowNodeInstanceLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FlowNodeInstanceLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FlowNodeInstanceLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FlowNodeInstanceLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
